
Flappybirdgame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000738  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008cc  080008d4  000018d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008cc  080008cc  000018d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080008cc  080008cc  000018d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080008cc  080008d4  000018d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008cc  080008cc  000018cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008d0  080008d0  000018d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000018d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  080008d4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080008d4  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f39  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fff  00000000  00000000  0000583d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004f8  00000000  00000000  00006840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003a1  00000000  00000000  00006d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000cb1f  00000000  00000000  000070d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004890  00000000  00000000  00013bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000420c1  00000000  00000000  00018488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005a549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001434  00000000  00000000  0005a58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0005b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080008b4 	.word	0x080008b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080008b4 	.word	0x080008b4

080001d4 <led_Init>:
static void led_Init(void);
static void buttonB2_Init(void);
static void buzzer_Init(void);

static void led_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	//Khai báo GPIO kiểu structure
	GPIO_InitTypeDef GPIO_InitStructure;
	//Cấp xung Clock hoạt động cho Port A
	RCC_AHB1PeriphClockCmd(LED_GPIO_CLOCK_EN, ENABLE);
 80001da:	2101      	movs	r1, #1
 80001dc:	2001      	movs	r0, #1
 80001de:	f000 fa03 	bl	80005e8 <RCC_AHB1PeriphClockCmd>
	//Cấu hình các thông số cho GPIO: Pin, Mode, Speed, OType, Pu/Pd
	GPIO_InitStructure.GPIO_Pin = LED_GPIO_PIN;
 80001e2:	2301      	movs	r3, #1
 80001e4:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80001e6:	2301      	movs	r3, #1
 80001e8:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80001ea:	2302      	movs	r3, #2
 80001ec:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001ee:	2300      	movs	r3, #0
 80001f0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80001f2:	2301      	movs	r3, #1
 80001f4:	71fb      	strb	r3, [r7, #7]
	//Khởi tạo các giá trị sử dụng hàm GPIO_Init
	GPIO_Init(LED_GPIO_PORT, &GPIO_InitStructure);
 80001f6:	463b      	mov	r3, r7
 80001f8:	4619      	mov	r1, r3
 80001fa:	4803      	ldr	r0, [pc, #12]	@ (8000208 <led_Init+0x34>)
 80001fc:	f000 f92c 	bl	8000458 <GPIO_Init>
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	40020000 	.word	0x40020000

0800020c <buzzer_Init>:

static void buzzer_Init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(BUZZER_GPIO_CLOCK_EN, ENABLE);
 8000212:	2101      	movs	r1, #1
 8000214:	2004      	movs	r0, #4
 8000216:	f000 f9e7 	bl	80005e8 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;
 800021a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800021e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000220:	2301      	movs	r3, #1
 8000222:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000224:	2302      	movs	r3, #2
 8000226:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000228:	2300      	movs	r3, #0
 800022a:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800022c:	2301      	movs	r3, #1
 800022e:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);
 8000230:	463b      	mov	r3, r7
 8000232:	4619      	mov	r1, r3
 8000234:	4803      	ldr	r0, [pc, #12]	@ (8000244 <buzzer_Init+0x38>)
 8000236:	f000 f90f 	bl	8000458 <GPIO_Init>
}
 800023a:	bf00      	nop
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40020800 	.word	0x40020800

08000248 <buttonB2_Init>:

static void buttonB2_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
	//Khai báo GPIO kiểu structure
	GPIO_InitTypeDef GPIO_InitStructure;
	//Cấp xung Clock hoạt động cho Port B
	RCC_AHB1PeriphClockCmd(BUTTON_GPIO_CLOCK_EN, ENABLE);
 800024e:	2101      	movs	r1, #1
 8000250:	2002      	movs	r0, #2
 8000252:	f000 f9c9 	bl	80005e8 <RCC_AHB1PeriphClockCmd>
	//Cấu hình các thông số cho GPIO: Pin, Mode, Pu/Pd
	//Chọn chân
	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;
 8000256:	2308      	movs	r3, #8
 8000258:	603b      	str	r3, [r7, #0]
	//Chọn Mode Input
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800025a:	2300      	movs	r3, #0
 800025c:	713b      	strb	r3, [r7, #4]
	// Trạng thái ban đầu kéo lên
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800025e:	2301      	movs	r3, #1
 8000260:	71fb      	strb	r3, [r7, #7]
	//Khởi tạo các giá trị cho GPIO
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000262:	463b      	mov	r3, r7
 8000264:	4619      	mov	r1, r3
 8000266:	4803      	ldr	r0, [pc, #12]	@ (8000274 <buttonB2_Init+0x2c>)
 8000268:	f000 f8f6 	bl	8000458 <GPIO_Init>
}
 800026c:	bf00      	nop
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40020400 	.word	0x40020400

08000278 <mainInit>:

static void mainInit(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
    led_Init();
 800027c:	f7ff ffaa 	bl	80001d4 <led_Init>
    buzzer_Init();
 8000280:	f7ff ffc4 	bl	800020c <buzzer_Init>
    buttonB2_Init();
 8000284:	f7ff ffe0 	bl	8000248 <buttonB2_Init>
    // Tuỳ ý đặt trạng thái ban đầu
    GPIO_ResetBits(LED_GPIO_PORT, LED_GPIO_PIN);
 8000288:	2101      	movs	r1, #1
 800028a:	4805      	ldr	r0, [pc, #20]	@ (80002a0 <mainInit+0x28>)
 800028c:	f000 f99c 	bl	80005c8 <GPIO_ResetBits>
    GPIO_ResetBits(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN);
 8000290:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000294:	4803      	ldr	r0, [pc, #12]	@ (80002a4 <mainInit+0x2c>)
 8000296:	f000 f997 	bl	80005c8 <GPIO_ResetBits>
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40020000 	.word	0x40020000
 80002a4:	40020800 	.word	0x40020800

080002a8 <main>:

int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	// Initialize
	mainInit();
 80002ac:	f7ff ffe4 	bl	8000278 <mainInit>

	while(1)
	{
		//Sử dụng hàm GPIO_ReadInputDataBit để đọc trạng thái đầu vào của nút nhấn
		if(GPIO_ReadInputDataBit(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == BUTTON_PRESS)
 80002b0:	2108      	movs	r1, #8
 80002b2:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <main+0x40>)
 80002b4:	f000 f95f 	bl	8000576 <GPIO_ReadInputDataBit>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d109      	bne.n	80002d2 <main+0x2a>
		{
			GPIO_SetBits (LED_GPIO_PORT, LED_GPIO_PIN);        //Turn ON Led
 80002be:	2101      	movs	r1, #1
 80002c0:	480a      	ldr	r0, [pc, #40]	@ (80002ec <main+0x44>)
 80002c2:	f000 f972 	bl	80005aa <GPIO_SetBits>
			GPIO_SetBits (BUZZER_GPIO_PORT, BUZZER_GPIO_PIN);  //Turn ON Buzzer
 80002c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002ca:	4809      	ldr	r0, [pc, #36]	@ (80002f0 <main+0x48>)
 80002cc:	f000 f96d 	bl	80005aa <GPIO_SetBits>
 80002d0:	e7ee      	b.n	80002b0 <main+0x8>
		}
		else
		{
			GPIO_ResetBits (LED_GPIO_PORT, LED_GPIO_PIN);       //Turn OFF Led
 80002d2:	2101      	movs	r1, #1
 80002d4:	4805      	ldr	r0, [pc, #20]	@ (80002ec <main+0x44>)
 80002d6:	f000 f977 	bl	80005c8 <GPIO_ResetBits>
			GPIO_ResetBits (BUZZER_GPIO_PORT, BUZZER_GPIO_PIN); //Turn OFF Buzzer
 80002da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002de:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <main+0x48>)
 80002e0:	f000 f972 	bl	80005c8 <GPIO_ResetBits>
		if(GPIO_ReadInputDataBit(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == BUTTON_PRESS)
 80002e4:	e7e4      	b.n	80002b0 <main+0x8>
 80002e6:	bf00      	nop
 80002e8:	40020400 	.word	0x40020400
 80002ec:	40020000 	.word	0x40020000
 80002f0:	40020800 	.word	0x40020800

080002f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f4:	480d      	ldr	r0, [pc, #52]	@ (800032c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f8:	f000 f826 	bl	8000348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002fc:	480c      	ldr	r0, [pc, #48]	@ (8000330 <LoopForever+0x6>)
  ldr r1, =_edata
 80002fe:	490d      	ldr	r1, [pc, #52]	@ (8000334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000300:	4a0d      	ldr	r2, [pc, #52]	@ (8000338 <LoopForever+0xe>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a0a      	ldr	r2, [pc, #40]	@ (800033c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000314:	4c0a      	ldr	r4, [pc, #40]	@ (8000340 <LoopForever+0x16>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000322:	f000 faa3 	bl	800086c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000326:	f7ff ffbf 	bl	80002a8 <main>

0800032a <LoopForever>:

LoopForever:
  b LoopForever
 800032a:	e7fe      	b.n	800032a <LoopForever>
  ldr   r0, =_estack
 800032c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000334:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000338:	080008d4 	.word	0x080008d4
  ldr r2, =_sbss
 800033c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000340:	20000028 	.word	0x20000028

08000344 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000344:	e7fe      	b.n	8000344 <ADC_IRQHandler>
	...

08000348 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800034c:	4b16      	ldr	r3, [pc, #88]	@ (80003a8 <SystemInit+0x60>)
 800034e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000352:	4a15      	ldr	r2, [pc, #84]	@ (80003a8 <SystemInit+0x60>)
 8000354:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000358:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800035c:	4b13      	ldr	r3, [pc, #76]	@ (80003ac <SystemInit+0x64>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a12      	ldr	r2, [pc, #72]	@ (80003ac <SystemInit+0x64>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000368:	4b10      	ldr	r3, [pc, #64]	@ (80003ac <SystemInit+0x64>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800036e:	4b0f      	ldr	r3, [pc, #60]	@ (80003ac <SystemInit+0x64>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a0e      	ldr	r2, [pc, #56]	@ (80003ac <SystemInit+0x64>)
 8000374:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800037c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800037e:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <SystemInit+0x64>)
 8000380:	4a0b      	ldr	r2, [pc, #44]	@ (80003b0 <SystemInit+0x68>)
 8000382:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <SystemInit+0x64>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a08      	ldr	r2, [pc, #32]	@ (80003ac <SystemInit+0x64>)
 800038a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800038e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <SystemInit+0x64>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000396:	f000 f80d 	bl	80003b4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800039a:	4b03      	ldr	r3, [pc, #12]	@ (80003a8 <SystemInit+0x60>)
 800039c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80003a0:	609a      	str	r2, [r3, #8]
#endif
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	e000ed00 	.word	0xe000ed00
 80003ac:	40023800 	.word	0x40023800
 80003b0:	24003010 	.word	0x24003010

080003b4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003b8:	4b23      	ldr	r3, [pc, #140]	@ (8000448 <SetSysClock+0x94>)
 80003ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003bc:	4a22      	ldr	r2, [pc, #136]	@ (8000448 <SetSysClock+0x94>)
 80003be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c2:	6413      	str	r3, [r2, #64]	@ 0x40
    PWR->CR |= PWR_CR_VOS;
 80003c4:	4b21      	ldr	r3, [pc, #132]	@ (800044c <SetSysClock+0x98>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a20      	ldr	r2, [pc, #128]	@ (800044c <SetSysClock+0x98>)
 80003ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80003ce:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80003d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000448 <SetSysClock+0x94>)
 80003d2:	4a1d      	ldr	r2, [pc, #116]	@ (8000448 <SetSysClock+0x94>)
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80003d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000448 <SetSysClock+0x94>)
 80003da:	4a1b      	ldr	r2, [pc, #108]	@ (8000448 <SetSysClock+0x94>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80003e0:	4b19      	ldr	r3, [pc, #100]	@ (8000448 <SetSysClock+0x94>)
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	4a18      	ldr	r2, [pc, #96]	@ (8000448 <SetSysClock+0x94>)
 80003e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003ea:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80003ec:	4b16      	ldr	r3, [pc, #88]	@ (8000448 <SetSysClock+0x94>)
 80003ee:	4a18      	ldr	r2, [pc, #96]	@ (8000450 <SetSysClock+0x9c>)
 80003f0:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 80003f2:	4b15      	ldr	r3, [pc, #84]	@ (8000448 <SetSysClock+0x94>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a14      	ldr	r2, [pc, #80]	@ (8000448 <SetSysClock+0x94>)
 80003f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003fc:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003fe:	bf00      	nop
 8000400:	4b11      	ldr	r3, [pc, #68]	@ (8000448 <SetSysClock+0x94>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f9      	beq.n	8000400 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800040c:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <SetSysClock+0xa0>)
 800040e:	f240 6202 	movw	r2, #1538	@ 0x602
 8000412:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000414:	4b0c      	ldr	r3, [pc, #48]	@ (8000448 <SetSysClock+0x94>)
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	4a0b      	ldr	r2, [pc, #44]	@ (8000448 <SetSysClock+0x94>)
 800041a:	f023 0303 	bic.w	r3, r3, #3
 800041e:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000420:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <SetSysClock+0x94>)
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	4a08      	ldr	r2, [pc, #32]	@ (8000448 <SetSysClock+0x94>)
 8000426:	f043 0302 	orr.w	r3, r3, #2
 800042a:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800042c:	bf00      	nop
 800042e:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <SetSysClock+0x94>)
 8000430:	689b      	ldr	r3, [r3, #8]
 8000432:	f003 030c 	and.w	r3, r3, #12
 8000436:	2b08      	cmp	r3, #8
 8000438:	d1f9      	bne.n	800042e <SetSysClock+0x7a>
}
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40023800 	.word	0x40023800
 800044c:	40007000 	.word	0x40007000
 8000450:	08015410 	.word	0x08015410
 8000454:	40023c00 	.word	0x40023c00

08000458 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000458:	b480      	push	{r7}
 800045a:	b087      	sub	sp, #28
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	2300      	movs	r3, #0
 8000468:	613b      	str	r3, [r7, #16]
 800046a:	2300      	movs	r3, #0
 800046c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
 8000472:	e076      	b.n	8000562 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000474:	2201      	movs	r2, #1
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	fa02 f303 	lsl.w	r3, r2, r3
 800047c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	693a      	ldr	r2, [r7, #16]
 8000484:	4013      	ands	r3, r2
 8000486:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000488:	68fa      	ldr	r2, [r7, #12]
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	429a      	cmp	r2, r3
 800048e:	d165      	bne.n	800055c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	2103      	movs	r1, #3
 800049a:	fa01 f303 	lsl.w	r3, r1, r3
 800049e:	43db      	mvns	r3, r3
 80004a0:	401a      	ands	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	791b      	ldrb	r3, [r3, #4]
 80004ae:	4619      	mov	r1, r3
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	fa01 f303 	lsl.w	r3, r1, r3
 80004b8:	431a      	orrs	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d003      	beq.n	80004ce <GPIO_Init+0x76>
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	791b      	ldrb	r3, [r3, #4]
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d12e      	bne.n	800052c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	689a      	ldr	r2, [r3, #8]
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	2103      	movs	r1, #3
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	43db      	mvns	r3, r3
 80004de:	401a      	ands	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	689a      	ldr	r2, [r3, #8]
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	795b      	ldrb	r3, [r3, #5]
 80004ec:	4619      	mov	r1, r3
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	431a      	orrs	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	685a      	ldr	r2, [r3, #4]
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	b29b      	uxth	r3, r3
 8000504:	4619      	mov	r1, r3
 8000506:	2301      	movs	r3, #1
 8000508:	408b      	lsls	r3, r1
 800050a:	43db      	mvns	r3, r3
 800050c:	401a      	ands	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	7992      	ldrb	r2, [r2, #6]
 800051a:	4611      	mov	r1, r2
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	b292      	uxth	r2, r2
 8000520:	fa01 f202 	lsl.w	r2, r1, r2
 8000524:	b292      	uxth	r2, r2
 8000526:	431a      	orrs	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	68da      	ldr	r2, [r3, #12]
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	b29b      	uxth	r3, r3
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	2103      	movs	r1, #3
 8000538:	fa01 f303 	lsl.w	r3, r1, r3
 800053c:	43db      	mvns	r3, r3
 800053e:	401a      	ands	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	68da      	ldr	r2, [r3, #12]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	79db      	ldrb	r3, [r3, #7]
 800054c:	4619      	mov	r1, r3
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	fa01 f303 	lsl.w	r3, r1, r3
 8000556:	431a      	orrs	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3301      	adds	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d985      	bls.n	8000474 <GPIO_Init+0x1c>
    }
  }
}
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	371c      	adds	r7, #28
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000576:	b480      	push	{r7}
 8000578:	b085      	sub	sp, #20
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	460b      	mov	r3, r1
 8000580:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000582:	2300      	movs	r3, #0
 8000584:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	691a      	ldr	r2, [r3, #16]
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	4013      	ands	r3, r2
 800058e:	2b00      	cmp	r3, #0
 8000590:	d002      	beq.n	8000598 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000592:	2301      	movs	r3, #1
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	e001      	b.n	800059c <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000598:	2300      	movs	r3, #0
 800059a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800059c:	7bfb      	ldrb	r3, [r7, #15]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	887a      	ldrh	r2, [r7, #2]
 80005ba:	831a      	strh	r2, [r3, #24]
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	887a      	ldrh	r2, [r7, #2]
 80005d8:	835a      	strh	r2, [r3, #26]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005f4:	78fb      	ldrb	r3, [r7, #3]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d006      	beq.n	8000608 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80005fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005fe:	4909      	ldr	r1, [pc, #36]	@ (8000624 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4313      	orrs	r3, r2
 8000604:	630b      	str	r3, [r1, #48]	@ 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000606:	e006      	b.n	8000616 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <RCC_AHB1PeriphClockCmd+0x3c>)
 800060a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	43db      	mvns	r3, r3
 8000610:	4904      	ldr	r1, [pc, #16]	@ (8000624 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000612:	4013      	ands	r3, r2
 8000614:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800

08000628 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	b29b      	uxth	r3, r3
 8000636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800063a:	b29b      	uxth	r3, r3
}
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000648:	b480      	push	{r7}
 800064a:	b087      	sub	sp, #28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000660:	2300      	movs	r3, #0
 8000662:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	095b      	lsrs	r3, r3, #5
 800066a:	b2db      	uxtb	r3, r3
 800066c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800066e:	887b      	ldrh	r3, [r7, #2]
 8000670:	f003 031f 	and.w	r3, r3, #31
 8000674:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000676:	2201      	movs	r2, #1
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d107      	bne.n	8000696 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	899b      	ldrh	r3, [r3, #12]
 800068a:	b29b      	uxth	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	4013      	ands	r3, r2
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	e011      	b.n	80006ba <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	2b02      	cmp	r3, #2
 800069a:	d107      	bne.n	80006ac <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	8a1b      	ldrh	r3, [r3, #16]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	4013      	ands	r3, r2
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	e006      	b.n	80006ba <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	8a9b      	ldrh	r3, [r3, #20]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	4013      	ands	r3, r2
 80006b8:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80006ba:	887b      	ldrh	r3, [r7, #2]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b29b      	uxth	r3, r3
 80006c0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80006c2:	2201      	movs	r2, #1
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	461a      	mov	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	4013      	ands	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d005      	beq.n	80006ec <USART_GetITStatus+0xa4>
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d002      	beq.n	80006ec <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80006e6:	2301      	movs	r3, #1
 80006e8:	74fb      	strb	r3, [r7, #19]
 80006ea:	e001      	b.n	80006f0 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80006ec:	2300      	movs	r3, #0
 80006ee:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80006f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	371c      	adds	r7, #28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80006fe:	b480      	push	{r7}
 8000700:	b085      	sub	sp, #20
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
 8000706:	460b      	mov	r3, r1
 8000708:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800070a:	2300      	movs	r3, #0
 800070c:	81fb      	strh	r3, [r7, #14]
 800070e:	2300      	movs	r3, #0
 8000710:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000712:	887b      	ldrh	r3, [r7, #2]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000718:	89fb      	ldrh	r3, [r7, #14]
 800071a:	2201      	movs	r2, #1
 800071c:	fa02 f303 	lsl.w	r3, r2, r3
 8000720:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000722:	89bb      	ldrh	r3, [r7, #12]
 8000724:	43db      	mvns	r3, r3
 8000726:	b29a      	uxth	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	801a      	strh	r2, [r3, #0]
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 800073c:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <SysTick_Handler+0x18>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	4a03      	ldr	r2, [pc, #12]	@ (8000750 <SysTick_Handler+0x18>)
 8000744:	6013      	str	r3, [r2, #0]
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	2000001c 	.word	0x2000001c

08000754 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075a:	b672      	cpsid	i
}
 800075c:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 800075e:	f240 5125 	movw	r1, #1317	@ 0x525
 8000762:	480f      	ldr	r0, [pc, #60]	@ (80007a0 <USART2_IRQHandler+0x4c>)
 8000764:	f7ff ff70 	bl	8000648 <USART_GetITStatus>
 8000768:	4603      	mov	r3, r0
 800076a:	2b01      	cmp	r3, #1
 800076c:	d112      	bne.n	8000794 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <USART2_IRQHandler+0x50>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000774:	480a      	ldr	r0, [pc, #40]	@ (80007a0 <USART2_IRQHandler+0x4c>)
 8000776:	f7ff ff57 	bl	8000628 <USART_ReceiveData>
 800077a:	4603      	mov	r3, r0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000780:	1cfb      	adds	r3, r7, #3
 8000782:	4619      	mov	r1, r3
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 f822 	bl	80007ce <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800078a:	f240 5125 	movw	r1, #1317	@ 0x525
 800078e:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <USART2_IRQHandler+0x4c>)
 8000790:	f7ff ffb5 	bl	80006fe <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000794:	b662      	cpsie	i
}
 8000796:	bf00      	nop
    }
    __enable_irq();
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40004400 	.word	0x40004400
 80007a4:	20000020 	.word	0x20000020

080007a8 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	885a      	ldrh	r2, [r3, #2]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	bf2c      	ite	cs
 80007bc:	2301      	movcs	r3, #1
 80007be:	2300      	movcc	r3, #0
 80007c0:	b2db      	uxtb	r3, r3
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b084      	sub	sp, #16
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]
 80007e0:	e021      	b.n	8000826 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	441a      	add	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	88c9      	ldrh	r1, [r1, #6]
 80007f0:	440b      	add	r3, r1
 80007f2:	7812      	ldrb	r2, [r2, #0]
 80007f4:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	88db      	ldrh	r3, [r3, #6]
 80007fa:	3301      	adds	r3, #1
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	b21a      	sxth	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	3b01      	subs	r3, #1
 8000806:	b29b      	uxth	r3, r3
 8000808:	b21b      	sxth	r3, r3
 800080a:	4013      	ands	r3, r2
 800080c:	b21b      	sxth	r3, r3
 800080e:	b29a      	uxth	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	885b      	ldrh	r3, [r3, #2]
 8000818:	3301      	adds	r3, #1
 800081a:	b29a      	uxth	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	3301      	adds	r3, #1
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	791b      	ldrb	r3, [r3, #4]
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	429a      	cmp	r2, r3
 800082e:	d3d8      	bcc.n	80007e2 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ffb9 	bl	80007a8 <bufIsFull>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d010      	beq.n	800085e <bufEnDat+0x90>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	891b      	ldrh	r3, [r3, #8]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	7912      	ldrb	r2, [r2, #4]
 8000844:	4413      	add	r3, r2
 8000846:	b29b      	uxth	r3, r3
 8000848:	b21a      	sxth	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	3b01      	subs	r3, #1
 8000850:	b29b      	uxth	r3, r3
 8000852:	b21b      	sxth	r3, r3
 8000854:	4013      	ands	r3, r2
 8000856:	b21b      	sxth	r3, r3
 8000858:	b29a      	uxth	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800085e:	b662      	cpsie	i
}
 8000860:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <__libc_init_array>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	4d0d      	ldr	r5, [pc, #52]	@ (80008a4 <__libc_init_array+0x38>)
 8000870:	4c0d      	ldr	r4, [pc, #52]	@ (80008a8 <__libc_init_array+0x3c>)
 8000872:	1b64      	subs	r4, r4, r5
 8000874:	10a4      	asrs	r4, r4, #2
 8000876:	2600      	movs	r6, #0
 8000878:	42a6      	cmp	r6, r4
 800087a:	d109      	bne.n	8000890 <__libc_init_array+0x24>
 800087c:	4d0b      	ldr	r5, [pc, #44]	@ (80008ac <__libc_init_array+0x40>)
 800087e:	4c0c      	ldr	r4, [pc, #48]	@ (80008b0 <__libc_init_array+0x44>)
 8000880:	f000 f818 	bl	80008b4 <_init>
 8000884:	1b64      	subs	r4, r4, r5
 8000886:	10a4      	asrs	r4, r4, #2
 8000888:	2600      	movs	r6, #0
 800088a:	42a6      	cmp	r6, r4
 800088c:	d105      	bne.n	800089a <__libc_init_array+0x2e>
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f855 3b04 	ldr.w	r3, [r5], #4
 8000894:	4798      	blx	r3
 8000896:	3601      	adds	r6, #1
 8000898:	e7ee      	b.n	8000878 <__libc_init_array+0xc>
 800089a:	f855 3b04 	ldr.w	r3, [r5], #4
 800089e:	4798      	blx	r3
 80008a0:	3601      	adds	r6, #1
 80008a2:	e7f2      	b.n	800088a <__libc_init_array+0x1e>
 80008a4:	080008cc 	.word	0x080008cc
 80008a8:	080008cc 	.word	0x080008cc
 80008ac:	080008cc 	.word	0x080008cc
 80008b0:	080008d0 	.word	0x080008d0

080008b4 <_init>:
 80008b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b6:	bf00      	nop
 80008b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ba:	bc08      	pop	{r3}
 80008bc:	469e      	mov	lr, r3
 80008be:	4770      	bx	lr

080008c0 <_fini>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	bf00      	nop
 80008c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c6:	bc08      	pop	{r3}
 80008c8:	469e      	mov	lr, r3
 80008ca:	4770      	bx	lr
