
Flappybirdgame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005300  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022f0  080054a0  080054a0  000064a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007790  08007790  00009070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007790  08007790  00008790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007798  08007798  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007798  08007798  00008798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800779c  0800779c  0000879c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080077a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  20000070  08007810  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001440  08007810  00009440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014314  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003114  00000000  00000000  0001d3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  000204c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a2  00000000  00000000  000210c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eb5f  00000000  00000000  00021962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf9a  00000000  00000000  000304c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00049447  00000000  00000000  0003d45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000868a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003924  00000000  00000000  000868e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0008a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005488 	.word	0x08005488

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005488 	.word	0x08005488

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 800028c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000290:	2b00      	cmp	r3, #0
 8000292:	da0b      	bge.n	80002ac <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	b2da      	uxtb	r2, r3
 8000298:	490c      	ldr	r1, [pc, #48]	@ (80002cc <NVIC_SetPriority+0x4c>)
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	f003 030f 	and.w	r3, r3, #15
 80002a0:	3b04      	subs	r3, #4
 80002a2:	0112      	lsls	r2, r2, #4
 80002a4:	b2d2      	uxtb	r2, r2
 80002a6:	440b      	add	r3, r1
 80002a8:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002aa:	e009      	b.n	80002c0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4907      	ldr	r1, [pc, #28]	@ (80002d0 <NVIC_SetPriority+0x50>)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	0112      	lsls	r2, r2, #4
 80002b8:	b2d2      	uxtb	r2, r2
 80002ba:	440b      	add	r3, r1
 80002bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	e000ed00 	.word	0xe000ed00
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	3b01      	subs	r3, #1
 80002e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80002e4:	d301      	bcc.n	80002ea <SysTick_Config+0x16>
 80002e6:	2301      	movs	r3, #1
 80002e8:	e00f      	b.n	800030a <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <SysTick_Config+0x40>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3b01      	subs	r3, #1
 80002f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80002f2:	210f      	movs	r1, #15
 80002f4:	f04f 30ff 	mov.w	r0, #4294967295
 80002f8:	f7ff ffc2 	bl	8000280 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002fc:	4b05      	ldr	r3, [pc, #20]	@ (8000314 <SysTick_Config+0x40>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000302:	4b04      	ldr	r3, [pc, #16]	@ (8000314 <SysTick_Config+0x40>)
 8000304:	2207      	movs	r2, #7
 8000306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000308:	2300      	movs	r3, #0
}
 800030a:	4618      	mov	r0, r3
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	e000e010 	.word	0xe000e010

08000318 <millis>:

/* ================== LCD (Ucglib) ================== */
static ucg_t ucg;

/* ================== Thời gian ================== */
static inline uint32_t millis(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
    return GetMilSecTick();   // hoặc GetMilSecTick(), xem trong timer.h
 800031c:	f001 f910 	bl	8001540 <GetMilSecTick>
 8000320:	4603      	mov	r3, r0

}
 8000322:	4618      	mov	r0, r3
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <GPIO_Init_All>:

/* ================== SPL helpers ================== */
static void GPIO_Init_All(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
  // clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC, ENABLE);
 800032e:	2101      	movs	r1, #1
 8000330:	2005      	movs	r0, #5
 8000332:	f000 ff3d 	bl	80011b0 <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef gi;

  // LED: PA5
  gi.GPIO_Pin   = LED_PIN;
 8000336:	2320      	movs	r3, #32
 8000338:	603b      	str	r3, [r7, #0]
  gi.GPIO_Mode  = GPIO_Mode_OUT;
 800033a:	2301      	movs	r3, #1
 800033c:	713b      	strb	r3, [r7, #4]
  gi.GPIO_OType = GPIO_OType_PP;
 800033e:	2300      	movs	r3, #0
 8000340:	71bb      	strb	r3, [r7, #6]
  gi.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	71fb      	strb	r3, [r7, #7]
  gi.GPIO_Speed = GPIO_Speed_50MHz;
 8000346:	2302      	movs	r3, #2
 8000348:	717b      	strb	r3, [r7, #5]
  GPIO_Init(LED_GPIOx, &gi);
 800034a:	463b      	mov	r3, r7
 800034c:	4619      	mov	r1, r3
 800034e:	4813      	ldr	r0, [pc, #76]	@ (800039c <GPIO_Init_All+0x74>)
 8000350:	f000 fd8e 	bl	8000e70 <GPIO_Init>

  // Buzzer: PA6
  gi.GPIO_Pin   = BUZZ_PIN;
 8000354:	2340      	movs	r3, #64	@ 0x40
 8000356:	603b      	str	r3, [r7, #0]
  gi.GPIO_Mode  = GPIO_Mode_OUT;
 8000358:	2301      	movs	r3, #1
 800035a:	713b      	strb	r3, [r7, #4]
  gi.GPIO_OType = GPIO_OType_PP;
 800035c:	2300      	movs	r3, #0
 800035e:	71bb      	strb	r3, [r7, #6]
  gi.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8000360:	2300      	movs	r3, #0
 8000362:	71fb      	strb	r3, [r7, #7]
  gi.GPIO_Speed = GPIO_Speed_50MHz;
 8000364:	2302      	movs	r3, #2
 8000366:	717b      	strb	r3, [r7, #5]
  GPIO_Init(BUZZ_GPIOx, &gi);
 8000368:	463b      	mov	r3, r7
 800036a:	4619      	mov	r1, r3
 800036c:	480b      	ldr	r0, [pc, #44]	@ (800039c <GPIO_Init_All+0x74>)
 800036e:	f000 fd7f 	bl	8000e70 <GPIO_Init>

  // Button: PC13 (kéo xuống – active HIGH)
  gi.GPIO_Pin   = BTN_PIN;
 8000372:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000376:	603b      	str	r3, [r7, #0]
  gi.GPIO_Mode  = GPIO_Mode_IN;
 8000378:	2300      	movs	r3, #0
 800037a:	713b      	strb	r3, [r7, #4]
  gi.GPIO_OType = GPIO_OType_PP;
 800037c:	2300      	movs	r3, #0
 800037e:	71bb      	strb	r3, [r7, #6]
  gi.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8000380:	2302      	movs	r3, #2
 8000382:	71fb      	strb	r3, [r7, #7]
  gi.GPIO_Speed = GPIO_Speed_50MHz;
 8000384:	2302      	movs	r3, #2
 8000386:	717b      	strb	r3, [r7, #5]
  GPIO_Init(BTN_GPIOx, &gi);
 8000388:	463b      	mov	r3, r7
 800038a:	4619      	mov	r1, r3
 800038c:	4804      	ldr	r0, [pc, #16]	@ (80003a0 <GPIO_Init_All+0x78>)
 800038e:	f000 fd6f 	bl	8000e70 <GPIO_Init>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40020000 	.word	0x40020000
 80003a0:	40020800 	.word	0x40020800

080003a4 <LED_On>:

static inline void LED_On(void)  { GPIO_SetBits(LED_GPIOx, LED_PIN); }
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	2120      	movs	r1, #32
 80003aa:	4802      	ldr	r0, [pc, #8]	@ (80003b4 <LED_On+0x10>)
 80003ac:	f000 fe09 	bl	8000fc2 <GPIO_SetBits>
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40020000 	.word	0x40020000

080003b8 <LED_Off>:
static inline void LED_Off(void) { GPIO_ResetBits(LED_GPIOx, LED_PIN); }
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	2120      	movs	r1, #32
 80003be:	4802      	ldr	r0, [pc, #8]	@ (80003c8 <LED_Off+0x10>)
 80003c0:	f000 fe0e 	bl	8000fe0 <GPIO_ResetBits>
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40020000 	.word	0x40020000

080003cc <BTN_ReadRaw>:
static inline void LED_Toggle(void){ GPIO_ToggleBits(LED_GPIOx, LED_PIN); }

static inline uint8_t BTN_ReadRaw(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  return GPIO_ReadInputDataBit(BTN_GPIOx, BTN_PIN) ? 1 : 0;
 80003d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003d4:	4805      	ldr	r0, [pc, #20]	@ (80003ec <BTN_ReadRaw+0x20>)
 80003d6:	f000 fdda 	bl	8000f8e <GPIO_ReadInputDataBit>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	bf14      	ite	ne
 80003e0:	2301      	movne	r3, #1
 80003e2:	2300      	moveq	r3, #0
 80003e4:	b2db      	uxtb	r3, r3
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40020800 	.word	0x40020800

080003f0 <delay_ms>:

static void delay_ms(uint32_t d){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  uint32_t t = millis();
 80003f8:	f7ff ff8e 	bl	8000318 <millis>
 80003fc:	60f8      	str	r0, [r7, #12]
  while(millis() - t < d){ processTimerScheduler(); }
 80003fe:	e001      	b.n	8000404 <delay_ms+0x14>
 8000400:	f001 f8aa 	bl	8001558 <processTimerScheduler>
 8000404:	f7ff ff88 	bl	8000318 <millis>
 8000408:	4602      	mov	r2, r0
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	429a      	cmp	r2, r3
 8000412:	d8f5      	bhi.n	8000400 <delay_ms+0x10>
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	3710      	adds	r7, #16
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <buzzer_beep>:

/* beep ~2 kHz trong duration_ms */
static void buzzer_beep(uint16_t duration_ms){
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	80fb      	strh	r3, [r7, #6]
  uint32_t endt = millis() + duration_ms;
 800042a:	f7ff ff75 	bl	8000318 <millis>
 800042e:	4602      	mov	r2, r0
 8000430:	88fb      	ldrh	r3, [r7, #6]
 8000432:	4413      	add	r3, r2
 8000434:	60fb      	str	r3, [r7, #12]
  while((int32_t)(endt - millis()) > 0){
 8000436:	e00e      	b.n	8000456 <buzzer_beep+0x36>
    GPIO_ToggleBits(BUZZ_GPIOx, BUZZ_PIN);
 8000438:	2140      	movs	r1, #64	@ 0x40
 800043a:	480e      	ldr	r0, [pc, #56]	@ (8000474 <buzzer_beep+0x54>)
 800043c:	f000 fdf7 	bl	800102e <GPIO_ToggleBits>
    for(volatile int i=0;i<40;i++) __NOP();   // chỉnh cho phù hợp buzzer
 8000440:	2300      	movs	r3, #0
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	e004      	b.n	8000450 <buzzer_beep+0x30>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000446:	bf00      	nop
}
 8000448:	bf00      	nop
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	3301      	adds	r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	2b27      	cmp	r3, #39	@ 0x27
 8000454:	ddf7      	ble.n	8000446 <buzzer_beep+0x26>
  while((int32_t)(endt - millis()) > 0){
 8000456:	f7ff ff5f 	bl	8000318 <millis>
 800045a:	4602      	mov	r2, r0
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dce9      	bgt.n	8000438 <buzzer_beep+0x18>
  }
  GPIO_ResetBits(BUZZ_GPIOx, BUZZ_PIN);
 8000464:	2140      	movs	r1, #64	@ 0x40
 8000466:	4803      	ldr	r0, [pc, #12]	@ (8000474 <buzzer_beep+0x54>)
 8000468:	f000 fdba 	bl	8000fe0 <GPIO_ResetBits>
}
 800046c:	bf00      	nop
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40020000 	.word	0x40020000

08000478 <read_button_click>:

/* click detector (beep khi nhận nhấn) */
static uint8_t read_button_click(void){
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
  static uint8_t pressed_last = 0;
  uint8_t p = BTN_ReadRaw();
 800047e:	f7ff ffa5 	bl	80003cc <BTN_ReadRaw>
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
  uint8_t clicked = (p && !pressed_last);
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d005      	beq.n	8000498 <read_button_click+0x20>
 800048c:	4b0a      	ldr	r3, [pc, #40]	@ (80004b8 <read_button_click+0x40>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d101      	bne.n	8000498 <read_button_click+0x20>
 8000494:	2301      	movs	r3, #1
 8000496:	e000      	b.n	800049a <read_button_click+0x22>
 8000498:	2300      	movs	r3, #0
 800049a:	71bb      	strb	r3, [r7, #6]
  pressed_last = p;
 800049c:	4a06      	ldr	r2, [pc, #24]	@ (80004b8 <read_button_click+0x40>)
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	7013      	strb	r3, [r2, #0]
  if(clicked) buzzer_beep(40);
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d002      	beq.n	80004ae <read_button_click+0x36>
 80004a8:	2028      	movs	r0, #40	@ 0x28
 80004aa:	f7ff ffb9 	bl	8000420 <buzzer_beep>
  return clicked;
 80004ae:	79bb      	ldrb	r3, [r7, #6]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000141 	.word	0x20000141

080004bc <clear_playfield>:
#define PLAY_X0 2
#define PLAY_Y0 6
#define PLAY_W (SCR_W - 4)
#define PLAY_H (SCR_H - 10)

static void clear_playfield(void){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af02      	add	r7, sp, #8
  ucg_SetColor(&ucg, 0, 0,0,0);
 80004c2:	2300      	movs	r3, #0
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	2300      	movs	r3, #0
 80004c8:	2200      	movs	r2, #0
 80004ca:	2100      	movs	r1, #0
 80004cc:	480a      	ldr	r0, [pc, #40]	@ (80004f8 <clear_playfield+0x3c>)
 80004ce:	f003 fbbd 	bl	8003c4c <ucg_SetColor>
  ucg_DrawBox(&ucg, 1, 1, SCR_W-3, SCR_H-3);
 80004d2:	233d      	movs	r3, #61	@ 0x3d
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	237d      	movs	r3, #125	@ 0x7d
 80004d8:	2201      	movs	r2, #1
 80004da:	2101      	movs	r1, #1
 80004dc:	4806      	ldr	r0, [pc, #24]	@ (80004f8 <clear_playfield+0x3c>)
 80004de:	f001 fadd 	bl	8001a9c <ucg_DrawBox>
  ucg_SetColor(&ucg, 0, 255,255,255);
 80004e2:	23ff      	movs	r3, #255	@ 0xff
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	23ff      	movs	r3, #255	@ 0xff
 80004e8:	22ff      	movs	r2, #255	@ 0xff
 80004ea:	2100      	movs	r1, #0
 80004ec:	4802      	ldr	r0, [pc, #8]	@ (80004f8 <clear_playfield+0x3c>)
 80004ee:	f003 fbad 	bl	8003c4c <ucg_SetColor>
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	2000008c 	.word	0x2000008c

080004fc <draw_frame>:

static void draw_frame(uint16_t score){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
  ucg_SetColor(&ucg, 0, 255,255,255);
 8000506:	23ff      	movs	r3, #255	@ 0xff
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	23ff      	movs	r3, #255	@ 0xff
 800050c:	22ff      	movs	r2, #255	@ 0xff
 800050e:	2100      	movs	r1, #0
 8000510:	480f      	ldr	r0, [pc, #60]	@ (8000550 <draw_frame+0x54>)
 8000512:	f003 fb9b 	bl	8003c4c <ucg_SetColor>
  ucg_DrawFrame(&ucg, 0, 0, SCR_W-1, SCR_H-1);
 8000516:	233f      	movs	r3, #63	@ 0x3f
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	237f      	movs	r3, #127	@ 0x7f
 800051c:	2200      	movs	r2, #0
 800051e:	2100      	movs	r1, #0
 8000520:	480b      	ldr	r0, [pc, #44]	@ (8000550 <draw_frame+0x54>)
 8000522:	f001 fb0f 	bl	8001b44 <ucg_DrawFrame>
  char buf[10];
  snprintf(buf,sizeof(buf),"%u",score);
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	f107 000c 	add.w	r0, r7, #12
 800052c:	4a09      	ldr	r2, [pc, #36]	@ (8000554 <draw_frame+0x58>)
 800052e:	210a      	movs	r1, #10
 8000530:	f003 fee2 	bl	80042f8 <sniprintf>
  ucg_DrawString(&ucg, 2, 10, 0, buf);
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2300      	movs	r3, #0
 800053c:	220a      	movs	r2, #10
 800053e:	2102      	movs	r1, #2
 8000540:	4803      	ldr	r0, [pc, #12]	@ (8000550 <draw_frame+0x54>)
 8000542:	f003 f9c3 	bl	80038cc <ucg_DrawString>
}
 8000546:	bf00      	nop
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2000008c 	.word	0x2000008c
 8000554:	080054a0 	.word	0x080054a0

08000558 <draw_bird>:
static void draw_bird(bird_t *b){ ucg_DrawDisc(&ucg, b->x, b->y, b->r, UCG_DRAW_ALL); }
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af02      	add	r7, sp, #8
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	b21b      	sxth	r3, r3
 8000572:	200f      	movs	r0, #15
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	4803      	ldr	r0, [pc, #12]	@ (8000584 <draw_bird+0x2c>)
 8000578:	f001 fd4a 	bl	8002010 <ucg_DrawDisc>
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000008c 	.word	0x2000008c

08000588 <draw_pipe>:
static void draw_pipe(pipe_t *p, uint8_t gap){
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af02      	add	r7, sp, #8
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]
  int top_h = p->gap_y - gap/2;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800059a:	461a      	mov	r2, r3
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	085b      	lsrs	r3, r3, #1
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	1ad3      	subs	r3, r2, r3
 80005a4:	60fb      	str	r3, [r7, #12]
  int bot_y = p->gap_y + gap/2;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80005ac:	461a      	mov	r2, r3
 80005ae:	78fb      	ldrb	r3, [r7, #3]
 80005b0:	085b      	lsrs	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4413      	add	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
  if(top_h < 0) top_h = 0;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	da01      	bge.n	80005c2 <draw_pipe+0x3a>
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  if(bot_y > PLAY_H) bot_y = PLAY_H;
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	2b36      	cmp	r3, #54	@ 0x36
 80005c6:	dd01      	ble.n	80005cc <draw_pipe+0x44>
 80005c8:	2336      	movs	r3, #54	@ 0x36
 80005ca:	60bb      	str	r3, [r7, #8]
  ucg_DrawBox(&ucg, p->x, PLAY_Y0, 6, top_h);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f9b3 1000 	ldrsh.w	r1, [r3]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	b21b      	sxth	r3, r3
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2306      	movs	r3, #6
 80005da:	2206      	movs	r2, #6
 80005dc:	480c      	ldr	r0, [pc, #48]	@ (8000610 <draw_pipe+0x88>)
 80005de:	f001 fa5d 	bl	8001a9c <ucg_DrawBox>
  ucg_DrawBox(&ucg, p->x, PLAY_Y0 + bot_y, 6, PLAY_H - bot_y);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	3306      	adds	r3, #6
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	b21a      	sxth	r2, r3
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	b21b      	sxth	r3, r3
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2306      	movs	r3, #6
 8000602:	4803      	ldr	r0, [pc, #12]	@ (8000610 <draw_pipe+0x88>)
 8000604:	f001 fa4a 	bl	8001a9c <ucg_DrawBox>
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000008c 	.word	0x2000008c

08000614 <collide>:
static uint8_t collide(bird_t *b, pipe_t *p, uint8_t gap){
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	4613      	mov	r3, r2
 8000620:	71fb      	strb	r3, [r7, #7]
  if(b->y - b->r <= PLAY_Y0 || b->y + b->r >= PLAY_Y0 + PLAY_H) return 1;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	795b      	ldrb	r3, [r3, #5]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	2b06      	cmp	r3, #6
 8000632:	dd08      	ble.n	8000646 <collide+0x32>
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800063a:	461a      	mov	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	795b      	ldrb	r3, [r3, #5]
 8000640:	4413      	add	r3, r2
 8000642:	2b3b      	cmp	r3, #59	@ 0x3b
 8000644:	dd01      	ble.n	800064a <collide+0x36>
 8000646:	2301      	movs	r3, #1
 8000648:	e037      	b.n	80006ba <collide+0xa6>
  if(b->x + b->r >= p->x && b->x - b->r <= p->x + 6){
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000650:	461a      	mov	r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	795b      	ldrb	r3, [r3, #5]
 8000656:	4413      	add	r3, r2
 8000658:	68ba      	ldr	r2, [r7, #8]
 800065a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800065e:	4293      	cmp	r3, r2
 8000660:	db2a      	blt.n	80006b8 <collide+0xa4>
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000668:	461a      	mov	r2, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	795b      	ldrb	r3, [r3, #5]
 800066e:	1ad2      	subs	r2, r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000676:	3306      	adds	r3, #6
 8000678:	429a      	cmp	r2, r3
 800067a:	dc1d      	bgt.n	80006b8 <collide+0xa4>
    if(!(b->y > (p->gap_y - gap/2) && b->y < (p->gap_y + gap/2))) return 1;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000682:	461a      	mov	r2, r3
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800068a:	4619      	mov	r1, r3
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	085b      	lsrs	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	1acb      	subs	r3, r1, r3
 8000694:	429a      	cmp	r2, r3
 8000696:	dd0d      	ble.n	80006b4 <collide+0xa0>
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800069e:	461a      	mov	r2, r3
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80006a6:	4619      	mov	r1, r3
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	440b      	add	r3, r1
 80006b0:	429a      	cmp	r2, r3
 80006b2:	db01      	blt.n	80006b8 <collide+0xa4>
 80006b4:	2301      	movs	r3, #1
 80006b6:	e000      	b.n	80006ba <collide+0xa6>
  }
  return 0;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <game_over_blink>:

static void game_over_blink(uint8_t times){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b084      	sub	sp, #16
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	4603      	mov	r3, r0
 80006ce:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i=0;i<times;i++){
 80006d0:	2300      	movs	r3, #0
 80006d2:	73fb      	strb	r3, [r7, #15]
 80006d4:	e00c      	b.n	80006f0 <game_over_blink+0x2a>
    LED_On();  delay_ms(120);
 80006d6:	f7ff fe65 	bl	80003a4 <LED_On>
 80006da:	2078      	movs	r0, #120	@ 0x78
 80006dc:	f7ff fe88 	bl	80003f0 <delay_ms>
    LED_Off(); delay_ms(120);
 80006e0:	f7ff fe6a 	bl	80003b8 <LED_Off>
 80006e4:	2078      	movs	r0, #120	@ 0x78
 80006e6:	f7ff fe83 	bl	80003f0 <delay_ms>
  for(uint8_t i=0;i<times;i++){
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	3301      	adds	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	7bfa      	ldrb	r2, [r7, #15]
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d3ee      	bcc.n	80006d6 <game_over_blink+0x10>
  }
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <splash_and_choose_level>:

static void splash_and_choose_level(void){
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af02      	add	r7, sp, #8
  ucg_ClearScreen(&ucg);
 800070a:	484b      	ldr	r0, [pc, #300]	@ (8000838 <splash_and_choose_level+0x134>)
 800070c:	f001 f9f2 	bl	8001af4 <ucg_ClearScreen>
  ucg_SetFont(&ucg, ucg_font_helvR10_tf);
 8000710:	494a      	ldr	r1, [pc, #296]	@ (800083c <splash_and_choose_level+0x138>)
 8000712:	4849      	ldr	r0, [pc, #292]	@ (8000838 <splash_and_choose_level+0x134>)
 8000714:	f003 f99e 	bl	8003a54 <ucg_SetFont>
  ucg_DrawString(&ucg, 14, 20, 0, "FLAPPY BIRD");
 8000718:	4b49      	ldr	r3, [pc, #292]	@ (8000840 <splash_and_choose_level+0x13c>)
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2300      	movs	r3, #0
 800071e:	2214      	movs	r2, #20
 8000720:	210e      	movs	r1, #14
 8000722:	4845      	ldr	r0, [pc, #276]	@ (8000838 <splash_and_choose_level+0x134>)
 8000724:	f003 f8d2 	bl	80038cc <ucg_DrawString>
  ucg_SetFont(&ucg, ucg_font_helvR08_tf);
 8000728:	4946      	ldr	r1, [pc, #280]	@ (8000844 <splash_and_choose_level+0x140>)
 800072a:	4843      	ldr	r0, [pc, #268]	@ (8000838 <splash_and_choose_level+0x134>)
 800072c:	f003 f992 	bl	8003a54 <ucg_SetFont>
  ucg_DrawString(&ucg, 6, 36, 0, "Nhan ngan: START");
 8000730:	4b45      	ldr	r3, [pc, #276]	@ (8000848 <splash_and_choose_level+0x144>)
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2300      	movs	r3, #0
 8000736:	2224      	movs	r2, #36	@ 0x24
 8000738:	2106      	movs	r1, #6
 800073a:	483f      	ldr	r0, [pc, #252]	@ (8000838 <splash_and_choose_level+0x134>)
 800073c:	f003 f8c6 	bl	80038cc <ucg_DrawString>
  ucg_DrawString(&ucg, 6, 48, 0, "Giu 2s: DOI LEVEL");
 8000740:	4b42      	ldr	r3, [pc, #264]	@ (800084c <splash_and_choose_level+0x148>)
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2300      	movs	r3, #0
 8000746:	2230      	movs	r2, #48	@ 0x30
 8000748:	2106      	movs	r1, #6
 800074a:	483b      	ldr	r0, [pc, #236]	@ (8000838 <splash_and_choose_level+0x134>)
 800074c:	f003 f8be 	bl	80038cc <ucg_DrawString>

  char lv[20];
  snprintf(lv, sizeof(lv), "LEVEL: %u", (unsigned)current_level+1);
 8000750:	4b3f      	ldr	r3, [pc, #252]	@ (8000850 <splash_and_choose_level+0x14c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	4638      	mov	r0, r7
 8000758:	4a3e      	ldr	r2, [pc, #248]	@ (8000854 <splash_and_choose_level+0x150>)
 800075a:	2114      	movs	r1, #20
 800075c:	f003 fdcc 	bl	80042f8 <sniprintf>
  ucg_DrawString(&ucg, 40, 60, 0, lv);
 8000760:	463b      	mov	r3, r7
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2300      	movs	r3, #0
 8000766:	223c      	movs	r2, #60	@ 0x3c
 8000768:	2128      	movs	r1, #40	@ 0x28
 800076a:	4833      	ldr	r0, [pc, #204]	@ (8000838 <splash_and_choose_level+0x134>)
 800076c:	f003 f8ae 	bl	80038cc <ucg_DrawString>

  uint32_t hold_t = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  while(1){
    processTimerScheduler();
 8000774:	f000 fef0 	bl	8001558 <processTimerScheduler>
    if(BTN_ReadRaw()){
 8000778:	f7ff fe28 	bl	80003cc <BTN_ReadRaw>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d044      	beq.n	800080c <splash_and_choose_level+0x108>
      if(!hold_t) hold_t = millis();
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d102      	bne.n	800078e <splash_and_choose_level+0x8a>
 8000788:	f7ff fdc6 	bl	8000318 <millis>
 800078c:	6178      	str	r0, [r7, #20]
      if(millis() - hold_t > 2000){
 800078e:	f7ff fdc3 	bl	8000318 <millis>
 8000792:	4602      	mov	r2, r0
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800079c:	d9ea      	bls.n	8000774 <splash_and_choose_level+0x70>
        current_level ^= 1;
 800079e:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <splash_and_choose_level+0x14c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	f083 0301 	eor.w	r3, r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <splash_and_choose_level+0x14c>)
 80007aa:	701a      	strb	r2, [r3, #0]
        ucg_SetColor(&ucg,0,0,0,0);
 80007ac:	2300      	movs	r3, #0
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2300      	movs	r3, #0
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	4820      	ldr	r0, [pc, #128]	@ (8000838 <splash_and_choose_level+0x134>)
 80007b8:	f003 fa48 	bl	8003c4c <ucg_SetColor>
        ucg_DrawBox(&ucg, 38, 52, 60, 12);
 80007bc:	230c      	movs	r3, #12
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	233c      	movs	r3, #60	@ 0x3c
 80007c2:	2234      	movs	r2, #52	@ 0x34
 80007c4:	2126      	movs	r1, #38	@ 0x26
 80007c6:	481c      	ldr	r0, [pc, #112]	@ (8000838 <splash_and_choose_level+0x134>)
 80007c8:	f001 f968 	bl	8001a9c <ucg_DrawBox>
        ucg_SetColor(&ucg,0,255,255,255);
 80007cc:	23ff      	movs	r3, #255	@ 0xff
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	23ff      	movs	r3, #255	@ 0xff
 80007d2:	22ff      	movs	r2, #255	@ 0xff
 80007d4:	2100      	movs	r1, #0
 80007d6:	4818      	ldr	r0, [pc, #96]	@ (8000838 <splash_and_choose_level+0x134>)
 80007d8:	f003 fa38 	bl	8003c4c <ucg_SetColor>
        snprintf(lv, sizeof(lv), "LEVEL: %u", (unsigned)current_level+1);
 80007dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <splash_and_choose_level+0x14c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	4638      	mov	r0, r7
 80007e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000854 <splash_and_choose_level+0x150>)
 80007e6:	2114      	movs	r1, #20
 80007e8:	f003 fd86 	bl	80042f8 <sniprintf>
        ucg_DrawString(&ucg, 40, 60, 0, lv);
 80007ec:	463b      	mov	r3, r7
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2300      	movs	r3, #0
 80007f2:	223c      	movs	r2, #60	@ 0x3c
 80007f4:	2128      	movs	r1, #40	@ 0x28
 80007f6:	4810      	ldr	r0, [pc, #64]	@ (8000838 <splash_and_choose_level+0x134>)
 80007f8:	f003 f868 	bl	80038cc <ucg_DrawString>
        hold_t = millis()+0x7FFFFFFF;
 80007fc:	f7ff fd8c 	bl	8000318 <millis>
 8000800:	4603      	mov	r3, r0
 8000802:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000806:	3b01      	subs	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	e7b3      	b.n	8000774 <splash_and_choose_level+0x70>
      }
    }else{
      if(hold_t && (millis() - hold_t) < 600){ buzzer_beep(60); return; }
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00b      	beq.n	800082a <splash_and_choose_level+0x126>
 8000812:	f7ff fd81 	bl	8000318 <millis>
 8000816:	4602      	mov	r2, r0
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000820:	d203      	bcs.n	800082a <splash_and_choose_level+0x126>
 8000822:	203c      	movs	r0, #60	@ 0x3c
 8000824:	f7ff fdfc 	bl	8000420 <buzzer_beep>
 8000828:	e002      	b.n	8000830 <splash_and_choose_level+0x12c>
      hold_t = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
    processTimerScheduler();
 800082e:	e7a1      	b.n	8000774 <splash_and_choose_level+0x70>
    }
  }
}
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000008c 	.word	0x2000008c
 800083c:	08005e98 	.word	0x08005e98
 8000840:	080054a4 	.word	0x080054a4
 8000844:	0800560c 	.word	0x0800560c
 8000848:	080054b0 	.word	0x080054b0
 800084c:	080054c4 	.word	0x080054c4
 8000850:	20000140 	.word	0x20000140
 8000854:	080054d8 	.word	0x080054d8

08000858 <run_game>:

static void run_game(void){
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	@ 0x30
 800085c:	af02      	add	r7, sp, #8
  level_cfg_t L = LEVELS[current_level];
 800085e:	4b5e      	ldr	r3, [pc, #376]	@ (80009d8 <run_game+0x180>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	4a5d      	ldr	r2, [pc, #372]	@ (80009dc <run_game+0x184>)
 8000866:	460b      	mov	r3, r1
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	440b      	add	r3, r1
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	441a      	add	r2, r3
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	6810      	ldr	r0, [r2, #0]
 8000876:	6018      	str	r0, [r3, #0]
 8000878:	8892      	ldrh	r2, [r2, #4]
 800087a:	809a      	strh	r2, [r3, #4]
  clear_playfield();
 800087c:	f7ff fe1e 	bl	80004bc <clear_playfield>

  uint16_t score = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	84fb      	strh	r3, [r7, #38]	@ 0x26
  bird_t bird = { .x = PLAY_X0 + 18, .y = PLAY_Y0 + PLAY_H/2, .vy = 0, .r = 3 };
 8000884:	4a56      	ldr	r2, [pc, #344]	@ (80009e0 <run_game+0x188>)
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800088e:	6018      	str	r0, [r3, #0]
 8000890:	3304      	adds	r3, #4
 8000892:	8019      	strh	r1, [r3, #0]
  pipe_t pipe = { .x = PLAY_X0 + PLAY_W - 2, .gap_y = PLAY_Y0 + 18, .scored = 0 };
 8000894:	4b53      	ldr	r3, [pc, #332]	@ (80009e4 <run_game+0x18c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	607b      	str	r3, [r7, #4]

  uint32_t last_step = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  srand(millis());
 800089e:	f7ff fd3b 	bl	8000318 <millis>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 fbf9 	bl	800409c <srand>

  while(1){
    uint32_t now = millis();
 80008aa:	f7ff fd35 	bl	8000318 <millis>
 80008ae:	61f8      	str	r0, [r7, #28]
    if(now - last_step < L.step_ms){ processTimerScheduler(); continue; }
 80008b0:	69fa      	ldr	r2, [r7, #28]
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	8aba      	ldrh	r2, [r7, #20]
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d202      	bcs.n	80008c2 <run_game+0x6a>
 80008bc:	f000 fe4c 	bl	8001558 <processTimerScheduler>
 80008c0:	e085      	b.n	80009ce <run_game+0x176>
    last_step = now;
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	623b      	str	r3, [r7, #32]

    if(read_button_click()) bird.vy = L.flap_vel;
 80008c6:	f7ff fdd7 	bl	8000478 <read_button_click>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <run_game+0x7e>
 80008d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80008d4:	733b      	strb	r3, [r7, #12]

    bird.vy += L.gravity;
 80008d6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	7cbb      	ldrb	r3, [r7, #18]
 80008de:	4413      	add	r3, r2
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	733b      	strb	r3, [r7, #12]
    bird.y  += bird.vy;
 80008e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	4413      	add	r3, r2
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	817b      	strh	r3, [r7, #10]

    pipe.x -= L.pipe_speed;
 80008fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	7c7a      	ldrb	r2, [r7, #17]
 8000902:	1a9b      	subs	r3, r3, r2
 8000904:	b29b      	uxth	r3, r3
 8000906:	b21b      	sxth	r3, r3
 8000908:	80bb      	strh	r3, [r7, #4]
    if(pipe.x < PLAY_X0 - 8){
 800090a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800090e:	f113 0f06 	cmn.w	r3, #6
 8000912:	da1b      	bge.n	800094c <run_game+0xf4>
      pipe.x = PLAY_X0 + PLAY_W - 2;
 8000914:	237c      	movs	r3, #124	@ 0x7c
 8000916:	80bb      	strh	r3, [r7, #4]
      int16_t miny = PLAY_Y0 + 10;
 8000918:	2310      	movs	r3, #16
 800091a:	837b      	strh	r3, [r7, #26]
      int16_t maxy = PLAY_Y0 + PLAY_H - 10;
 800091c:	2332      	movs	r3, #50	@ 0x32
 800091e:	833b      	strh	r3, [r7, #24]
      pipe.gap_y = (rand() % (maxy - miny)) + miny;
 8000920:	f003 fbea 	bl	80040f8 <rand>
 8000924:	4602      	mov	r2, r0
 8000926:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 800092a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800092e:	1acb      	subs	r3, r1, r3
 8000930:	fb92 f1f3 	sdiv	r1, r2, r3
 8000934:	fb01 f303 	mul.w	r3, r1, r3
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	b2da      	uxtb	r2, r3
 800093c:	8b7b      	ldrh	r3, [r7, #26]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4413      	add	r3, r2
 8000942:	b2db      	uxtb	r3, r3
 8000944:	b25b      	sxtb	r3, r3
 8000946:	71bb      	strb	r3, [r7, #6]
      pipe.scored = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	71fb      	strb	r3, [r7, #7]
    }

    if(!pipe.scored && pipe.x + 6 < bird.x - bird.r){ score++; pipe.scored = 1; }
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10e      	bne.n	8000970 <run_game+0x118>
 8000952:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000956:	1d9a      	adds	r2, r3, #6
 8000958:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800095c:	4619      	mov	r1, r3
 800095e:	7b7b      	ldrb	r3, [r7, #13]
 8000960:	1acb      	subs	r3, r1, r3
 8000962:	429a      	cmp	r2, r3
 8000964:	da04      	bge.n	8000970 <run_game+0x118>
 8000966:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000968:	3301      	adds	r3, #1
 800096a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800096c:	2301      	movs	r3, #1
 800096e:	71fb      	strb	r3, [r7, #7]

    clear_playfield();
 8000970:	f7ff fda4 	bl	80004bc <clear_playfield>
    draw_frame(score);
 8000974:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fdc0 	bl	80004fc <draw_frame>
    draw_pipe(&pipe, L.pipe_gap);
 800097c:	7c3a      	ldrb	r2, [r7, #16]
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fe00 	bl	8000588 <draw_pipe>
    draw_bird(&bird);
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fde3 	bl	8000558 <draw_bird>

    if(collide(&bird, &pipe, L.pipe_gap)){
 8000992:	7c3a      	ldrb	r2, [r7, #16]
 8000994:	1d39      	adds	r1, r7, #4
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fe3a 	bl	8000614 <collide>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d081      	beq.n	80008aa <run_game+0x52>
      ucg_SetFont(&ucg, ucg_font_helvR10_tf);
 80009a6:	4910      	ldr	r1, [pc, #64]	@ (80009e8 <run_game+0x190>)
 80009a8:	4810      	ldr	r0, [pc, #64]	@ (80009ec <run_game+0x194>)
 80009aa:	f003 f853 	bl	8003a54 <ucg_SetFont>
      ucg_DrawString(&ucg, 26, 34, 0, "GAME OVER");
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <run_game+0x198>)
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2300      	movs	r3, #0
 80009b4:	2222      	movs	r2, #34	@ 0x22
 80009b6:	211a      	movs	r1, #26
 80009b8:	480c      	ldr	r0, [pc, #48]	@ (80009ec <run_game+0x194>)
 80009ba:	f002 ff87 	bl	80038cc <ucg_DrawString>
      game_over_blink(6);
 80009be:	2006      	movs	r0, #6
 80009c0:	f7ff fe81 	bl	80006c6 <game_over_blink>
      delay_ms(800);
 80009c4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80009c8:	f7ff fd12 	bl	80003f0 <delay_ms>
      return;
 80009cc:	e000      	b.n	80009d0 <run_game+0x178>
  while(1){
 80009ce:	e76c      	b.n	80008aa <run_game+0x52>
    }
  }
}
 80009d0:	3728      	adds	r7, #40	@ 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000140 	.word	0x20000140
 80009dc:	20000000 	.word	0x20000000
 80009e0:	080054f0 	.word	0x080054f0
 80009e4:	080054f8 	.word	0x080054f8
 80009e8:	08005e98 	.word	0x08005e98
 80009ec:	2000008c 	.word	0x2000008c
 80009f0:	080054e4 	.word	0x080054e4

080009f4 <main>:

/* ================== MAIN ================== */
int main(void){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af02      	add	r7, sp, #8
  SystemCoreClockUpdate();
 80009fa:	f000 f965 	bl	8000cc8 <SystemCoreClockUpdate>

  // SysTick 1 ms
  SysTick_Config(SystemCoreClock / 1000);
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <main+0x74>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1a      	ldr	r2, [pc, #104]	@ (8000a6c <main+0x78>)
 8000a04:	fba2 2303 	umull	r2, r3, r2, r3
 8000a08:	099b      	lsrs	r3, r3, #6
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fc62 	bl	80002d4 <SysTick_Config>

  TimerInit();
 8000a10:	f000 fcc2 	bl	8001398 <TimerInit>
  GPIO_Init_All();
 8000a14:	f7ff fc88 	bl	8000328 <GPIO_Init_All>

  // LCD init
  Ucglib4WireSWSPI_begin(&ucg, 0);   // hoặc 1 nếu muốn chế độ transparent
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4815      	ldr	r0, [pc, #84]	@ (8000a70 <main+0x7c>)
 8000a1c:	f001 f822 	bl	8001a64 <Ucglib4WireSWSPI_begin>
  ucg_SetFont(&ucg, ucg_font_helvR12_tf);
 8000a20:	4914      	ldr	r1, [pc, #80]	@ (8000a74 <main+0x80>)
 8000a22:	4813      	ldr	r0, [pc, #76]	@ (8000a70 <main+0x7c>)
 8000a24:	f003 f816 	bl	8003a54 <ucg_SetFont>
  ucg_ClearScreen(&ucg);
 8000a28:	4811      	ldr	r0, [pc, #68]	@ (8000a70 <main+0x7c>)
 8000a2a:	f001 f863 	bl	8001af4 <ucg_ClearScreen>
  ucg_SetFont(&ucg, ucg_font_helvR08_tf);
 8000a2e:	4912      	ldr	r1, [pc, #72]	@ (8000a78 <main+0x84>)
 8000a30:	480f      	ldr	r0, [pc, #60]	@ (8000a70 <main+0x7c>)
 8000a32:	f003 f80f 	bl	8003a54 <ucg_SetFont>
  ucg_SetColor(&ucg, 0, 255,255,255);
 8000a36:	23ff      	movs	r3, #255	@ 0xff
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	23ff      	movs	r3, #255	@ 0xff
 8000a3c:	22ff      	movs	r2, #255	@ 0xff
 8000a3e:	2100      	movs	r1, #0
 8000a40:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <main+0x7c>)
 8000a42:	f003 f903 	bl	8003c4c <ucg_SetColor>
  ucg_SetColor(&ucg, 1, 0,0,0);
 8000a46:	2300      	movs	r3, #0
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4807      	ldr	r0, [pc, #28]	@ (8000a70 <main+0x7c>)
 8000a52:	f003 f8fb 	bl	8003c4c <ucg_SetColor>
  ucg_SetRotate180(&ucg);   // bỏ nếu màn hình đúng chiều
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <main+0x7c>)
 8000a58:	f003 f9f2 	bl	8003e40 <ucg_SetRotate180>

  // vòng đời chương trình
  while(1){
    splash_and_choose_level();
 8000a5c:	f7ff fe52 	bl	8000704 <splash_and_choose_level>
    run_game();
 8000a60:	f7ff fefa 	bl	8000858 <run_game>
    splash_and_choose_level();
 8000a64:	bf00      	nop
 8000a66:	e7f9      	b.n	8000a5c <main+0x68>
 8000a68:	2000000c 	.word	0x2000000c
 8000a6c:	10624dd3 	.word	0x10624dd3
 8000a70:	2000008c 	.word	0x2000008c
 8000a74:	080069bc 	.word	0x080069bc
 8000a78:	0800560c 	.word	0x0800560c

08000a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return 1;
 8000a80:	2301      	movs	r3, #1
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_kill>:

int _kill(int pid, int sig)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a96:	f003 fcf7 	bl	8004488 <__errno>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2216      	movs	r2, #22
 8000a9e:	601a      	str	r2, [r3, #0]
  return -1;
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_exit>:

void _exit (int status)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ffe7 	bl	8000a8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000abe:	bf00      	nop
 8000ac0:	e7fd      	b.n	8000abe <_exit+0x12>

08000ac2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e00a      	b.n	8000aea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ad4:	f3af 8000 	nop.w
 8000ad8:	4601      	mov	r1, r0
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	60ba      	str	r2, [r7, #8]
 8000ae0:	b2ca      	uxtb	r2, r1
 8000ae2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	dbf0      	blt.n	8000ad4 <_read+0x12>
  }

  return len;
 8000af2:	687b      	ldr	r3, [r7, #4]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e009      	b.n	8000b22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	60ba      	str	r2, [r7, #8]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dbf1      	blt.n	8000b0e <_write+0x12>
  }
  return len;
 8000b2a:	687b      	ldr	r3, [r7, #4]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_close>:

int _close(int file)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b5c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <_isatty>:

int _isatty(int file)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b74:	2301      	movs	r3, #1
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b085      	sub	sp, #20
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	@ (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f003 fc5c 	bl	8004488 <__errno>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20018000 	.word	0x20018000
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	20000144 	.word	0x20000144
 8000c04:	20001440 	.word	0x20001440

08000c08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c08:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c0c:	f000 f826 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c36:	f003 fc2d 	bl	8004494 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000c3a:	f7ff fedb 	bl	80009f4 <main>

08000c3e <LoopForever>:

LoopForever:
  b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   r0, =_estack
 8000c40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c4c:	080077a0 	.word	0x080077a0
  ldr r2, =_sbss
 8000c50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c54:	20001440 	.word	0x20001440

08000c58 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <SystemInit+0x60>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c66:	4a15      	ldr	r2, [pc, #84]	@ (8000cbc <SystemInit+0x60>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <SystemInit+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <SystemInit+0x64>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <SystemInit+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <SystemInit+0x64>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <SystemInit+0x64>)
 8000c88:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <SystemInit+0x64>)
 8000c94:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc4 <SystemInit+0x68>)
 8000c96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <SystemInit+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a08      	ldr	r2, [pc, #32]	@ (8000cc0 <SystemInit+0x64>)
 8000c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ca2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <SystemInit+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000caa:	f000 f88f 	bl	8000dcc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cae:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <SystemInit+0x60>)
 8000cb0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cb4:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	24003010 	.word	0x24003010

08000cc8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	2302      	movs	r3, #2
 8000ce0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ce2:	4b35      	ldr	r3, [pc, #212]	@ (8000db8 <SystemCoreClockUpdate+0xf0>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f003 030c 	and.w	r3, r3, #12
 8000cea:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	2b08      	cmp	r3, #8
 8000cf0:	d011      	beq.n	8000d16 <SystemCoreClockUpdate+0x4e>
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d844      	bhi.n	8000d82 <SystemCoreClockUpdate+0xba>
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <SystemCoreClockUpdate+0x3e>
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d004      	beq.n	8000d0e <SystemCoreClockUpdate+0x46>
 8000d04:	e03d      	b.n	8000d82 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000d06:	4b2d      	ldr	r3, [pc, #180]	@ (8000dbc <SystemCoreClockUpdate+0xf4>)
 8000d08:	4a2d      	ldr	r2, [pc, #180]	@ (8000dc0 <SystemCoreClockUpdate+0xf8>)
 8000d0a:	601a      	str	r2, [r3, #0]
      break;
 8000d0c:	e03d      	b.n	8000d8a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dbc <SystemCoreClockUpdate+0xf4>)
 8000d10:	4a2c      	ldr	r2, [pc, #176]	@ (8000dc4 <SystemCoreClockUpdate+0xfc>)
 8000d12:	601a      	str	r2, [r3, #0]
      break;
 8000d14:	e039      	b.n	8000d8a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000d16:	4b28      	ldr	r3, [pc, #160]	@ (8000db8 <SystemCoreClockUpdate+0xf0>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	0d9b      	lsrs	r3, r3, #22
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d22:	4b25      	ldr	r3, [pc, #148]	@ (8000db8 <SystemCoreClockUpdate+0xf0>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d2a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00c      	beq.n	8000d4c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000d32:	4a24      	ldr	r2, [pc, #144]	@ (8000dc4 <SystemCoreClockUpdate+0xfc>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000db8 <SystemCoreClockUpdate+0xf0>)
 8000d3c:	6852      	ldr	r2, [r2, #4]
 8000d3e:	0992      	lsrs	r2, r2, #6
 8000d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d44:	fb02 f303 	mul.w	r3, r2, r3
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	e00b      	b.n	8000d64 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc0 <SystemCoreClockUpdate+0xf8>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d54:	4a18      	ldr	r2, [pc, #96]	@ (8000db8 <SystemCoreClockUpdate+0xf0>)
 8000d56:	6852      	ldr	r2, [r2, #4]
 8000d58:	0992      	lsrs	r2, r2, #6
 8000d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d5e:	fb02 f303 	mul.w	r3, r2, r3
 8000d62:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <SystemCoreClockUpdate+0xf0>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	0c1b      	lsrs	r3, r3, #16
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	3301      	adds	r3, #1
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000dbc <SystemCoreClockUpdate+0xf4>)
 8000d7e:	6013      	str	r3, [r2, #0]
      break;
 8000d80:	e003      	b.n	8000d8a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <SystemCoreClockUpdate+0xf4>)
 8000d84:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc0 <SystemCoreClockUpdate+0xf8>)
 8000d86:	601a      	str	r2, [r3, #0]
      break;
 8000d88:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <SystemCoreClockUpdate+0xf0>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	091b      	lsrs	r3, r3, #4
 8000d90:	f003 030f 	and.w	r3, r3, #15
 8000d94:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc8 <SystemCoreClockUpdate+0x100>)
 8000d96:	5cd3      	ldrb	r3, [r2, r3]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <SystemCoreClockUpdate+0xf4>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	fa22 f303 	lsr.w	r3, r2, r3
 8000da6:	4a05      	ldr	r2, [pc, #20]	@ (8000dbc <SystemCoreClockUpdate+0xf4>)
 8000da8:	6013      	str	r3, [r2, #0]
}
 8000daa:	bf00      	nop
 8000dac:	371c      	adds	r7, #28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	00f42400 	.word	0x00f42400
 8000dc4:	017d7840 	.word	0x017d7840
 8000dc8:	0800550c 	.word	0x0800550c

08000dcc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000dd0:	4b23      	ldr	r3, [pc, #140]	@ (8000e60 <SetSysClock+0x94>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	4a22      	ldr	r2, [pc, #136]	@ (8000e60 <SetSysClock+0x94>)
 8000dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dda:	6413      	str	r3, [r2, #64]	@ 0x40
    PWR->CR |= PWR_CR_VOS;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	@ (8000e64 <SetSysClock+0x98>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a20      	ldr	r2, [pc, #128]	@ (8000e64 <SetSysClock+0x98>)
 8000de2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000de6:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <SetSysClock+0x94>)
 8000dea:	4a1d      	ldr	r2, [pc, #116]	@ (8000e60 <SetSysClock+0x94>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <SetSysClock+0x94>)
 8000df2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e60 <SetSysClock+0x94>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000df8:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <SetSysClock+0x94>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	4a18      	ldr	r2, [pc, #96]	@ (8000e60 <SetSysClock+0x94>)
 8000dfe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e02:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000e04:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <SetSysClock+0x94>)
 8000e06:	4a18      	ldr	r2, [pc, #96]	@ (8000e68 <SetSysClock+0x9c>)
 8000e08:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <SetSysClock+0x94>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a14      	ldr	r2, [pc, #80]	@ (8000e60 <SetSysClock+0x94>)
 8000e10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e14:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e16:	bf00      	nop
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <SetSysClock+0x94>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0f9      	beq.n	8000e18 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000e24:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <SetSysClock+0xa0>)
 8000e26:	f240 6202 	movw	r2, #1538	@ 0x602
 8000e2a:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <SetSysClock+0x94>)
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	4a0b      	ldr	r2, [pc, #44]	@ (8000e60 <SetSysClock+0x94>)
 8000e32:	f023 0303 	bic.w	r3, r3, #3
 8000e36:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000e38:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <SetSysClock+0x94>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <SetSysClock+0x94>)
 8000e3e:	f043 0302 	orr.w	r3, r3, #2
 8000e42:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000e44:	bf00      	nop
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <SetSysClock+0x94>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d1f9      	bne.n	8000e46 <SetSysClock+0x7a>
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000
 8000e68:	08015410 	.word	0x08015410
 8000e6c:	40023c00 	.word	0x40023c00

08000e70 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	e076      	b.n	8000f7a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d165      	bne.n	8000f74 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	401a      	ands	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	791b      	ldrb	r3, [r3, #4]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	791b      	ldrb	r3, [r3, #4]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d003      	beq.n	8000ee6 <GPIO_Init+0x76>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	791b      	ldrb	r3, [r3, #4]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d12e      	bne.n	8000f44 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2103      	movs	r1, #3
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	795b      	ldrb	r3, [r3, #5]
 8000f04:	4619      	mov	r1, r3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2301      	movs	r3, #1
 8000f20:	408b      	lsls	r3, r1
 8000f22:	43db      	mvns	r3, r3
 8000f24:	401a      	ands	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	7992      	ldrb	r2, [r2, #6]
 8000f32:	4611      	mov	r1, r2
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	b292      	uxth	r2, r2
 8000f38:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3c:	b292      	uxth	r2, r2
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2103      	movs	r1, #3
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	79db      	ldrb	r3, [r3, #7]
 8000f64:	4619      	mov	r1, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3301      	adds	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d985      	bls.n	8000e8c <GPIO_Init+0x1c>
    }
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	460b      	mov	r3, r1
 8000f98:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000faa:	2301      	movs	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	e001      	b.n	8000fb4 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	887a      	ldrh	r2, [r7, #2]
 8000fd2:	831a      	strh	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	835a      	strh	r2, [r3, #26]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	807b      	strh	r3, [r7, #2]
 800100a:	4613      	mov	r3, r2
 800100c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800100e:	787b      	ldrb	r3, [r7, #1]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 800101a:	e002      	b.n	8001022 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	835a      	strh	r2, [r3, #26]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	405a      	eors	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	615a      	str	r2, [r3, #20]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	2302      	movs	r3, #2
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	2302      	movs	r3, #2
 8001072:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001074:	4b4a      	ldr	r3, [pc, #296]	@ (80011a0 <RCC_GetClocksFreq+0x14c>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 030c 	and.w	r3, r3, #12
 800107c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	2b08      	cmp	r3, #8
 8001082:	d011      	beq.n	80010a8 <RCC_GetClocksFreq+0x54>
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2b08      	cmp	r3, #8
 8001088:	d844      	bhi.n	8001114 <RCC_GetClocksFreq+0xc0>
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <RCC_GetClocksFreq+0x44>
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2b04      	cmp	r3, #4
 8001094:	d004      	beq.n	80010a0 <RCC_GetClocksFreq+0x4c>
 8001096:	e03d      	b.n	8001114 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a42      	ldr	r2, [pc, #264]	@ (80011a4 <RCC_GetClocksFreq+0x150>)
 800109c:	601a      	str	r2, [r3, #0]
    break;
 800109e:	e03d      	b.n	800111c <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a41      	ldr	r2, [pc, #260]	@ (80011a8 <RCC_GetClocksFreq+0x154>)
 80010a4:	601a      	str	r2, [r3, #0]
    break;
 80010a6:	e039      	b.n	800111c <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80010a8:	4b3d      	ldr	r3, [pc, #244]	@ (80011a0 <RCC_GetClocksFreq+0x14c>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	0d9b      	lsrs	r3, r3, #22
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010b4:	4b3a      	ldr	r3, [pc, #232]	@ (80011a0 <RCC_GetClocksFreq+0x14c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010bc:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00c      	beq.n	80010de <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010c4:	4a38      	ldr	r2, [pc, #224]	@ (80011a8 <RCC_GetClocksFreq+0x154>)
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010cc:	4a34      	ldr	r2, [pc, #208]	@ (80011a0 <RCC_GetClocksFreq+0x14c>)
 80010ce:	6852      	ldr	r2, [r2, #4]
 80010d0:	0992      	lsrs	r2, r2, #6
 80010d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	e00b      	b.n	80010f6 <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010de:	4a31      	ldr	r2, [pc, #196]	@ (80011a4 <RCC_GetClocksFreq+0x150>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4a2e      	ldr	r2, [pc, #184]	@ (80011a0 <RCC_GetClocksFreq+0x14c>)
 80010e8:	6852      	ldr	r2, [r2, #4]
 80010ea:	0992      	lsrs	r2, r2, #6
 80010ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010f0:	fb02 f303 	mul.w	r3, r2, r3
 80010f4:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80010f6:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <RCC_GetClocksFreq+0x14c>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	0c1b      	lsrs	r3, r3, #16
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	3301      	adds	r3, #1
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	fbb2 f2f3 	udiv	r2, r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	601a      	str	r2, [r3, #0]
    break;
 8001112:	e003      	b.n	800111c <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a23      	ldr	r2, [pc, #140]	@ (80011a4 <RCC_GetClocksFreq+0x150>)
 8001118:	601a      	str	r2, [r3, #0]
    break;
 800111a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800111c:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <RCC_GetClocksFreq+0x14c>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001124:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800112c:	4a1f      	ldr	r2, [pc, #124]	@ (80011ac <RCC_GetClocksFreq+0x158>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	4413      	add	r3, r2
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	40da      	lsrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001144:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <RCC_GetClocksFreq+0x14c>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800114c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	0a9b      	lsrs	r3, r3, #10
 8001152:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001154:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <RCC_GetClocksFreq+0x158>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	40da      	lsrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <RCC_GetClocksFreq+0x14c>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001174:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	0b5b      	lsrs	r3, r3, #13
 800117a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800117c:	4a0b      	ldr	r2, [pc, #44]	@ (80011ac <RCC_GetClocksFreq+0x158>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	40da      	lsrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	60da      	str	r2, [r3, #12]
}
 8001194:	bf00      	nop
 8001196:	3724      	adds	r7, #36	@ 0x24
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	40023800 	.word	0x40023800
 80011a4:	00f42400 	.word	0x00f42400
 80011a8:	017d7840 	.word	0x017d7840
 80011ac:	0800551c 	.word	0x0800551c

080011b0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80011c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011c6:	4909      	ldr	r1, [pc, #36]	@ (80011ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80011ce:	e006      	b.n	80011de <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80011d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	4904      	ldr	r1, [pc, #16]	@ (80011ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80011da:	4013      	ands	r3, r2
 80011dc:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	889b      	ldrh	r3, [r3, #4]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001202:	b29b      	uxth	r3, r3
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	095b      	lsrs	r3, r3, #5
 8001232:	b2db      	uxtb	r3, r3
 8001234:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	f003 031f 	and.w	r3, r3, #31
 800123c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800123e:	2201      	movs	r2, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d107      	bne.n	800125e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	899b      	ldrh	r3, [r3, #12]
 8001252:	b29b      	uxth	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	4013      	ands	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	e011      	b.n	8001282 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d107      	bne.n	8001274 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	8a1b      	ldrh	r3, [r3, #16]
 8001268:	b29b      	uxth	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	4013      	ands	r3, r2
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e006      	b.n	8001282 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	8a9b      	ldrh	r3, [r3, #20]
 8001278:	b29b      	uxth	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	4013      	ands	r3, r2
 8001280:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	b29b      	uxth	r3, r3
 8001288:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800128a:	2201      	movs	r2, #1
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4013      	ands	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <USART_GetITStatus+0xa4>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80012ae:	2301      	movs	r3, #1
 80012b0:	74fb      	strb	r3, [r7, #19]
 80012b2:	e001      	b.n	80012b8 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80012b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	371c      	adds	r7, #28
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80012d2:	2300      	movs	r3, #0
 80012d4:	81fb      	strh	r3, [r7, #14]
 80012d6:	2300      	movs	r3, #0
 80012d8:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80012e0:	89fb      	ldrh	r3, [r7, #14]
 80012e2:	2201      	movs	r2, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80012ea:	89bb      	ldrh	r3, [r7, #12]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	801a      	strh	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <NVIC_SetPriority>:
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	da0b      	bge.n	800132c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	@ (800134c <NVIC_SetPriority+0x4c>)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	3b04      	subs	r3, #4
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	761a      	strb	r2, [r3, #24]
}
 800132a:	e009      	b.n	8001340 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4907      	ldr	r1, [pc, #28]	@ (8001350 <NVIC_SetPriority+0x50>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00
 8001350:	e000e100 	.word	0xe000e100

08001354 <SysTick_Config>:
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ffc2 	bl	8001300 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 800139e:	463b      	mov	r3, r7
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fe57 	bl	8001054 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <TimerInit+0x3c>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	099b      	lsrs	r3, r3, #6
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ffcf 	bl	8001354 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 80013b6:	2101      	movs	r1, #1
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ffa0 	bl	8001300 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 80013c0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80013c4:	2100      	movs	r1, #0
 80013c6:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <TimerInit+0x40>)
 80013c8:	f002 fe4e 	bl	8004068 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	10624dd3 	.word	0x10624dd3
 80013d8:	20000148 	.word	0x20000148

080013dc <TimerStart>:
    char* name,
	uint32_t wMilSecTick,
	uint8_t byRepeats,
	void (*callback)(void *),
    void *pcallbackData
) {   
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	4613      	mov	r3, r2
 80013ea:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	75fb      	strb	r3, [r7, #23]
 80013f0:	e04c      	b.n	800148c <TimerStart+0xb0>
    {
        if (g_pTimerHandle[i].callbackFunc == NULL)
 80013f2:	7dfa      	ldrb	r2, [r7, #23]
 80013f4:	4929      	ldr	r1, [pc, #164]	@ (800149c <TimerStart+0xc0>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	440b      	add	r3, r1
 8001400:	3310      	adds	r3, #16
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d13e      	bne.n	8001486 <TimerStart+0xaa>
        {
            g_pTimerHandle[i].name = name;
 8001408:	7dfa      	ldrb	r2, [r7, #23]
 800140a:	4924      	ldr	r1, [pc, #144]	@ (800149c <TimerStart+0xc0>)
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].callbackFunc = callback;
 800141a:	7dfa      	ldrb	r2, [r7, #23]
 800141c:	491f      	ldr	r1, [pc, #124]	@ (800149c <TimerStart+0xc0>)
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	440b      	add	r3, r1
 8001428:	3310      	adds	r3, #16
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].repeats = byRepeats;
 800142e:	7dfa      	ldrb	r2, [r7, #23]
 8001430:	491a      	ldr	r1, [pc, #104]	@ (800149c <TimerStart+0xc0>)
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	440b      	add	r3, r1
 800143c:	330c      	adds	r3, #12
 800143e:	79fa      	ldrb	r2, [r7, #7]
 8001440:	701a      	strb	r2, [r3, #0]
            g_pTimerHandle[i].pCallbackData = pcallbackData;
 8001442:	7dfa      	ldrb	r2, [r7, #23]
 8001444:	4915      	ldr	r1, [pc, #84]	@ (800149c <TimerStart+0xc0>)
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	3314      	adds	r3, #20
 8001452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001454:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecStart = GetMilSecTick();
 8001456:	7dfc      	ldrb	r4, [r7, #23]
 8001458:	f000 f872 	bl	8001540 <GetMilSecTick>
 800145c:	4602      	mov	r2, r0
 800145e:	490f      	ldr	r1, [pc, #60]	@ (800149c <TimerStart+0xc0>)
 8001460:	4623      	mov	r3, r4
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4423      	add	r3, r4
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	3304      	adds	r3, #4
 800146c:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecTimeout = wMilSecTick;
 800146e:	7dfa      	ldrb	r2, [r7, #23]
 8001470:	490a      	ldr	r1, [pc, #40]	@ (800149c <TimerStart+0xc0>)
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	3308      	adds	r3, #8
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	601a      	str	r2, [r3, #0]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", timeCall = ");
            DBG_TIMER_SEND_NUM(wMilSecTick);
            DBG_TIMER_SEND_STR("\n");

            return i;
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	e006      	b.n	8001494 <TimerStart+0xb8>
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	3301      	adds	r3, #1
 800148a:	75fb      	strb	r3, [r7, #23]
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b0f      	cmp	r3, #15
 8001490:	d9af      	bls.n	80013f2 <TimerStart+0x16>
        }
    }
    
    return NO_TIMER;
 8001492:	23ff      	movs	r3, #255	@ 0xff
}
 8001494:	4618      	mov	r0, r3
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd90      	pop	{r4, r7, pc}
 800149c:	20000148 	.word	0x20000148

080014a0 <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d80a      	bhi.n	80014c6 <TimerStop+0x26>
 80014b0:	79fa      	ldrb	r2, [r7, #7]
 80014b2:	4922      	ldr	r1, [pc, #136]	@ (800153c <TimerStop+0x9c>)
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	440b      	add	r3, r1
 80014be:	3310      	adds	r3, #16
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <TimerStop+0x2a>
        return 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e031      	b.n	800152e <TimerStop+0x8e>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 80014ca:	79fa      	ldrb	r2, [r7, #7]
 80014cc:	491b      	ldr	r1, [pc, #108]	@ (800153c <TimerStop+0x9c>)
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 80014dc:	79fa      	ldrb	r2, [r7, #7]
 80014de:	4917      	ldr	r1, [pc, #92]	@ (800153c <TimerStop+0x9c>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	3310      	adds	r3, #16
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 80014f0:	79fa      	ldrb	r2, [r7, #7]
 80014f2:	4912      	ldr	r1, [pc, #72]	@ (800153c <TimerStop+0x9c>)
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	330c      	adds	r3, #12
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	490d      	ldr	r1, [pc, #52]	@ (800153c <TimerStop+0x9c>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	3308      	adds	r3, #8
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 8001518:	79fa      	ldrb	r2, [r7, #7]
 800151a:	4908      	ldr	r1, [pc, #32]	@ (800153c <TimerStop+0x9c>)
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	3304      	adds	r3, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
    
    return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000148 	.word	0x20000148

08001540 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <GetMilSecTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200002c8 	.word	0x200002c8

08001558 <processTimerScheduler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
processTimerScheduler(void) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
    void (*callbackfunc)(void *);
    void *pPrameter;
    
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 800155e:	2300      	movs	r3, #0
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	e068      	b.n	8001636 <processTimerScheduler+0xde>
    {
        if ((g_pTimerHandle[i].callbackFunc != NULL) && TimeExpired(i))
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	4938      	ldr	r1, [pc, #224]	@ (8001648 <processTimerScheduler+0xf0>)
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	440b      	add	r3, r1
 8001572:	3310      	adds	r3, #16
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d05a      	beq.n	8001630 <processTimerScheduler+0xd8>
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f865 	bl	800164c <TimeExpired>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d053      	beq.n	8001630 <processTimerScheduler+0xd8>
        {
            callbackfunc = g_pTimerHandle[i].callbackFunc;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	492f      	ldr	r1, [pc, #188]	@ (8001648 <processTimerScheduler+0xf0>)
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	3310      	adds	r3, #16
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60bb      	str	r3, [r7, #8]
            pPrameter = g_pTimerHandle[i].pCallbackData;
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	492a      	ldr	r1, [pc, #168]	@ (8001648 <processTimerScheduler+0xf0>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	3314      	adds	r3, #20
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	607b      	str	r3, [r7, #4]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", CB = ");
            DBG_TIMER_SEND_NUM((uint32_t)callbackfunc);
            DBG_TIMER_SEND_STR("\n");
            
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	4925      	ldr	r1, [pc, #148]	@ (8001648 <processTimerScheduler+0xf0>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	330c      	adds	r3, #12
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2bff      	cmp	r3, #255	@ 0xff
 80015c6:	d020      	beq.n	800160a <processTimerScheduler+0xb2>
                (g_pTimerHandle[i].repeats != TIMER_REPEAT_ONE_TIME))
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	491f      	ldr	r1, [pc, #124]	@ (8001648 <processTimerScheduler+0xf0>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	330c      	adds	r3, #12
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b2db      	uxtb	r3, r3
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d014      	beq.n	800160a <processTimerScheduler+0xb2>
                 g_pTimerHandle[i].repeats--;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	4919      	ldr	r1, [pc, #100]	@ (8001648 <processTimerScheduler+0xf0>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	330c      	adds	r3, #12
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	3b01      	subs	r3, #1
 80015f6:	b2d8      	uxtb	r0, r3
 80015f8:	4913      	ldr	r1, [pc, #76]	@ (8001648 <processTimerScheduler+0xf0>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	330c      	adds	r3, #12
 8001606:	4602      	mov	r2, r0
 8001608:	701a      	strb	r2, [r3, #0]
            
            if (g_pTimerHandle[i].repeats == TIMER_REPEAT_ONE_TIME) {
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	490e      	ldr	r1, [pc, #56]	@ (8001648 <processTimerScheduler+0xf0>)
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	440b      	add	r3, r1
 8001618:	330c      	adds	r3, #12
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d103      	bne.n	800162a <processTimerScheduler+0xd2>
                 DBG_TIMER_SEND_STR("$ CANCEL \n");
                 TimerStop(i);
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff3b 	bl	80014a0 <TimerStop>
            }
            
            callbackfunc(pPrameter);
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	3301      	adds	r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d993      	bls.n	8001564 <processTimerScheduler+0xc>
        }
    }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000148 	.word	0x20000148

0800164c <TimeExpired>:
 * @retval TRUE or FALSE
 */
uint8_t
TimeExpired(
    uint8_t byTimerId
) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
    uint32_t wMilSecTick;
    uint32_t wDeltaMilSec = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165a:	b672      	cpsid	i
}
 800165c:	bf00      	nop
    
    __disable_irq();
    wMilSecTick = GetMilSecTick();
 800165e:	f7ff ff6f 	bl	8001540 <GetMilSecTick>
 8001662:	60b8      	str	r0, [r7, #8]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	d80a      	bhi.n	8001680 <TimeExpired+0x34>
 800166a:	79fa      	ldrb	r2, [r7, #7]
 800166c:	492b      	ldr	r1, [pc, #172]	@ (800171c <TimeExpired+0xd0>)
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	440b      	add	r3, r1
 8001678:	3310      	adds	r3, #16
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d103      	bne.n	8001688 <TimeExpired+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
 8001680:	b662      	cpsie	i
}
 8001682:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8001684:	2300      	movs	r3, #0
 8001686:	e044      	b.n	8001712 <TimeExpired+0xc6>
    }
      
    if (wMilSecTick >= g_pTimerHandle[byTimerId].milSecStart) 
 8001688:	79fa      	ldrb	r2, [r7, #7]
 800168a:	4924      	ldr	r1, [pc, #144]	@ (800171c <TimeExpired+0xd0>)
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	3304      	adds	r3, #4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	429a      	cmp	r2, r3
 800169e:	d30c      	bcc.n	80016ba <TimeExpired+0x6e>
    {
        wDeltaMilSec = wMilSecTick - g_pTimerHandle[byTimerId].milSecStart;
 80016a0:	79fa      	ldrb	r2, [r7, #7]
 80016a2:	491e      	ldr	r1, [pc, #120]	@ (800171c <TimeExpired+0xd0>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	3304      	adds	r3, #4
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e00e      	b.n	80016d8 <TimeExpired+0x8c>
    } 
    else
    {
        wDeltaMilSec = g_pTimerHandle[byTimerId].milSecStart - wMilSecTick;
 80016ba:	79fa      	ldrb	r2, [r7, #7]
 80016bc:	4917      	ldr	r1, [pc, #92]	@ (800171c <TimeExpired+0xd0>)
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	3304      	adds	r3, #4
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	60fb      	str	r3, [r7, #12]
        wDeltaMilSec = 0xFFFFFFFFU - wDeltaMilSec;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	60fb      	str	r3, [r7, #12]
    }
    
    if (wDeltaMilSec < g_pTimerHandle[byTimerId].milSecTimeout)
 80016d8:	79fa      	ldrb	r2, [r7, #7]
 80016da:	4910      	ldr	r1, [pc, #64]	@ (800171c <TimeExpired+0xd0>)
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	440b      	add	r3, r1
 80016e6:	3308      	adds	r3, #8
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d203      	bcs.n	80016f8 <TimeExpired+0xac>
  __ASM volatile ("cpsie i" : : : "memory");
 80016f0:	b662      	cpsie	i
}
 80016f2:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e00c      	b.n	8001712 <TimeExpired+0xc6>
    }
    
    g_pTimerHandle[byTimerId].milSecStart = wMilSecTick;
 80016f8:	79fa      	ldrb	r2, [r7, #7]
 80016fa:	4908      	ldr	r1, [pc, #32]	@ (800171c <TimeExpired+0xd0>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3304      	adds	r3, #4
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800170c:	b662      	cpsie	i
}
 800170e:	bf00      	nop
    
    __enable_irq();
    
    return 1;
 8001710:	2301      	movs	r3, #1
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000148 	.word	0x20000148

08001720 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <SysTick_Handler+0x18>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	4a03      	ldr	r2, [pc, #12]	@ (8001738 <SysTick_Handler+0x18>)
 800172c:	6013      	str	r3, [r2, #0]
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	200002c8 	.word	0x200002c8

0800173c <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001742:	b672      	cpsid	i
}
 8001744:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8001746:	f240 5125 	movw	r1, #1317	@ 0x525
 800174a:	480f      	ldr	r0, [pc, #60]	@ (8001788 <USART2_IRQHandler+0x4c>)
 800174c:	f7ff fd60 	bl	8001210 <USART_GetITStatus>
 8001750:	4603      	mov	r3, r0
 8001752:	2b01      	cmp	r3, #1
 8001754:	d112      	bne.n	800177c <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8001756:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <USART2_IRQHandler+0x50>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 800175c:	480a      	ldr	r0, [pc, #40]	@ (8001788 <USART2_IRQHandler+0x4c>)
 800175e:	f7ff fd47 	bl	80011f0 <USART_ReceiveData>
 8001762:	4603      	mov	r3, r0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8001768:	1cfb      	adds	r3, r7, #3
 800176a:	4619      	mov	r1, r3
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f002 fbe7 	bl	8003f40 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8001772:	f240 5125 	movw	r1, #1317	@ 0x525
 8001776:	4804      	ldr	r0, [pc, #16]	@ (8001788 <USART2_IRQHandler+0x4c>)
 8001778:	f7ff fda5 	bl	80012c6 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 800177c:	b662      	cpsie	i
}
 800177e:	bf00      	nop
    }
    __enable_irq();
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40004400 	.word	0x40004400
 800178c:	200002cc 	.word	0x200002cc

08001790 <delayMicroseconds>:
//ucg_int_t get_tx(void) { return tx; };
//ucg_int_t get_ty(void) { return ty; };
//ucg_t *get_ucg(void) { return &ucg; };

static void delayMicroseconds(uint32_t microseconds)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
//	}
//	uint32_t i;
//	for( i = 0; i < microseconds; i++ )
//	{
//	}
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <ucg_gpio_init>:

static void ucg_gpio_init(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);
 80017aa:	2101      	movs	r1, #1
 80017ac:	2007      	movs	r0, #7
 80017ae:	f7ff fcff 	bl	80011b0 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80017b2:	2301      	movs	r3, #1
 80017b4:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80017b6:	2303      	movs	r3, #3
 80017b8:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80017ba:	2300      	movs	r3, #0
 80017bc:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = SPI1_SCK_PIN | SPI1_MOSI_PIN | SPI1_RS_PIN | SPI1_MODE_PIN;
 80017c2:	f44f 7368 	mov.w	r3, #928	@ 0x3a0
 80017c6:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80017c8:	463b      	mov	r3, r7
 80017ca:	4619      	mov	r1, r3
 80017cc:	480a      	ldr	r0, [pc, #40]	@ (80017f8 <ucg_gpio_init+0x54>)
 80017ce:	f7ff fb4f 	bl	8000e70 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_CS_PIN | SPI1_ENABLE_PIN;
 80017d2:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80017d6:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	4807      	ldr	r0, [pc, #28]	@ (80017fc <ucg_gpio_init+0x58>)
 80017de:	f7ff fb47 	bl	8000e70 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_RST_PIN;
 80017e2:	2380      	movs	r3, #128	@ 0x80
 80017e4:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80017e6:	463b      	mov	r3, r7
 80017e8:	4619      	mov	r1, r3
 80017ea:	4805      	ldr	r0, [pc, #20]	@ (8001800 <ucg_gpio_init+0x5c>)
 80017ec:	f7ff fb40 	bl	8000e70 <GPIO_Init>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020400 	.word	0x40020400
 8001800:	40020800 	.word	0x40020800

08001804 <ucg_com_arduino_send_generic_SW_SPI>:

static void ucg_com_arduino_send_generic_SW_SPI(ucg_t *ucg, uint8_t data)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 8;
 8001810:	2308      	movs	r3, #8
 8001812:	73fb      	strb	r3, [r7, #15]

  do
  {
    if ( data & 128 )
 8001814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001818:	2b00      	cmp	r3, #0
 800181a:	da05      	bge.n	8001828 <ucg_com_arduino_send_generic_SW_SPI+0x24>
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 800181c:	2201      	movs	r2, #1
 800181e:	2180      	movs	r1, #128	@ 0x80
 8001820:	4814      	ldr	r0, [pc, #80]	@ (8001874 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8001822:	f7ff fbec 	bl	8000ffe <GPIO_WriteBit>
 8001826:	e004      	b.n	8001832 <ucg_com_arduino_send_generic_SW_SPI+0x2e>
    }
    else
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2180      	movs	r1, #128	@ 0x80
 800182c:	4811      	ldr	r0, [pc, #68]	@ (8001874 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800182e:	f7ff fbe6 	bl	8000ffe <GPIO_WriteBit>
    }
    // no delay required, also Arduino Due is slow enough
    // delay required for ESP32
    delayMicroseconds(1);
 8001832:	2001      	movs	r0, #1
 8001834:	f7ff ffac 	bl	8001790 <delayMicroseconds>
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 1);
 8001838:	2201      	movs	r2, #1
 800183a:	2120      	movs	r1, #32
 800183c:	480d      	ldr	r0, [pc, #52]	@ (8001874 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800183e:	f7ff fbde 	bl	8000ffe <GPIO_WriteBit>
    delayMicroseconds(1);
 8001842:	2001      	movs	r0, #1
 8001844:	f7ff ffa4 	bl	8001790 <delayMicroseconds>
    i--;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	3b01      	subs	r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2120      	movs	r1, #32
 8001852:	4808      	ldr	r0, [pc, #32]	@ (8001874 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8001854:	f7ff fbd3 	bl	8000ffe <GPIO_WriteBit>
    delayMicroseconds(1);
 8001858:	2001      	movs	r0, #1
 800185a:	f7ff ff99 	bl	8001790 <delayMicroseconds>
    data <<= 1;
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	70fb      	strb	r3, [r7, #3]
  } while( i > 0 );
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1d4      	bne.n	8001814 <ucg_com_arduino_send_generic_SW_SPI+0x10>
}
 800186a:	bf00      	nop
 800186c:	bf00      	nop
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40020000 	.word	0x40020000

08001878 <ucg_com_arduino_generic_SW_SPI>:

static int16_t ucg_com_arduino_generic_SW_SPI(ucg_t *ucg, int16_t msg, uint16_t arg, uint8_t *data)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	817b      	strh	r3, [r7, #10]
 8001886:	4613      	mov	r3, r2
 8001888:	813b      	strh	r3, [r7, #8]
  switch(msg)
 800188a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800188e:	3b0a      	subs	r3, #10
 8001890:	2b0b      	cmp	r3, #11
 8001892:	f200 80dc 	bhi.w	8001a4e <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8001896:	a201      	add	r2, pc, #4	@ (adr r2, 800189c <ucg_com_arduino_generic_SW_SPI+0x24>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	080018cd 	.word	0x080018cd
 80018a0:	08001a4f 	.word	0x08001a4f
 80018a4:	0800191f 	.word	0x0800191f
 80018a8:	08001929 	.word	0x08001929
 80018ac:	08001939 	.word	0x08001939
 80018b0:	08001949 	.word	0x08001949
 80018b4:	0800195b 	.word	0x0800195b
 80018b8:	0800197b 	.word	0x0800197b
 80018bc:	080019a3 	.word	0x080019a3
 80018c0:	080019d9 	.word	0x080019d9
 80018c4:	080019f7 	.word	0x080019f7
 80018c8:	08001a47 	.word	0x08001a47
      /* "data" is a pointer to ucg_com_info_t structure with the following information: */
      /*	((ucg_com_info_t *)data)->serial_clk_speed value in nanoseconds */
      /*	((ucg_com_info_t *)data)->parallel_clk_speed value in nanoseconds */
    
      /* setup pins */
      ucg_gpio_init();
 80018cc:	f7ff ff6a 	bl	80017a4 <ucg_gpio_init>

      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2180      	movs	r1, #128	@ 0x80
 80018d4:	4860      	ldr	r0, [pc, #384]	@ (8001a58 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80018d6:	f7ff fb92 	bl	8000ffe <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, 1);
 80018da:	2201      	movs	r2, #1
 80018dc:	2140      	movs	r1, #64	@ 0x40
 80018de:	485f      	ldr	r0, [pc, #380]	@ (8001a5c <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80018e0:	f7ff fb8d 	bl	8000ffe <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, 1);
 80018e4:	2201      	movs	r2, #1
 80018e6:	2180      	movs	r1, #128	@ 0x80
 80018e8:	485d      	ldr	r0, [pc, #372]	@ (8001a60 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 80018ea:	f7ff fb88 	bl	8000ffe <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 80018ee:	2201      	movs	r2, #1
 80018f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018f4:	4858      	ldr	r0, [pc, #352]	@ (8001a58 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80018f6:	f7ff fb82 	bl	8000ffe <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2120      	movs	r1, #32
 80018fe:	4856      	ldr	r0, [pc, #344]	@ (8001a58 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001900:	f7ff fb7d 	bl	8000ffe <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_ENABLE_PORT, SPI1_ENABLE_PIN, 1);
 8001904:	2201      	movs	r2, #1
 8001906:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800190a:	4854      	ldr	r0, [pc, #336]	@ (8001a5c <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 800190c:	f7ff fb77 	bl	8000ffe <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_MODE_PORT, SPI1_MODE_PIN, 1);
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001916:	4850      	ldr	r0, [pc, #320]	@ (8001a58 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001918:	f7ff fb71 	bl	8000ffe <GPIO_WriteBit>
      break;
 800191c:	e097      	b.n	8001a4e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_POWER_DOWN:
      break;

    case UCG_COM_MSG_DELAY:
      delayMicroseconds(arg);
 800191e:	893b      	ldrh	r3, [r7, #8]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff35 	bl	8001790 <delayMicroseconds>
      break;
 8001926:	e092      	b.n	8001a4e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_RESET_LINE:
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, arg);
 8001928:	893b      	ldrh	r3, [r7, #8]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	2180      	movs	r1, #128	@ 0x80
 8001930:	484b      	ldr	r0, [pc, #300]	@ (8001a60 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8001932:	f7ff fb64 	bl	8000ffe <GPIO_WriteBit>
      break;
 8001936:	e08a      	b.n	8001a4e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CS_LINE:
	  GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, arg);
 8001938:	893b      	ldrh	r3, [r7, #8]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	2140      	movs	r1, #64	@ 0x40
 8001940:	4846      	ldr	r0, [pc, #280]	@ (8001a5c <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8001942:	f7ff fb5c 	bl	8000ffe <GPIO_WriteBit>
      break;
 8001946:	e082      	b.n	8001a4e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CD_LINE:
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, arg);
 8001948:	893b      	ldrh	r3, [r7, #8]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001952:	4841      	ldr	r0, [pc, #260]	@ (8001a58 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001954:	f7ff fb53 	bl	8000ffe <GPIO_WriteBit>
      break;
 8001958:	e079      	b.n	8001a4e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_BYTE:
      ucg_com_arduino_send_generic_SW_SPI(ucg, arg);
 800195a:	893b      	ldrh	r3, [r7, #8]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4619      	mov	r1, r3
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7ff ff4f 	bl	8001804 <ucg_com_arduino_send_generic_SW_SPI>
      break;
 8001966:	e072      	b.n	8001a4e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_1_BYTE:
      while( arg > 0 ) {
	    ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7ff ff48 	bl	8001804 <ucg_com_arduino_send_generic_SW_SPI>
	    arg--;
 8001974:	893b      	ldrh	r3, [r7, #8]
 8001976:	3b01      	subs	r3, #1
 8001978:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 800197a:	893b      	ldrh	r3, [r7, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f3      	bne.n	8001968 <ucg_com_arduino_generic_SW_SPI+0xf0>
      }
      break;
 8001980:	e065      	b.n	8001a4e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_2_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f7ff ff3b 	bl	8001804 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3301      	adds	r3, #1
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f7ff ff34 	bl	8001804 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 800199c:	893b      	ldrh	r3, [r7, #8]
 800199e:	3b01      	subs	r3, #1
 80019a0:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 80019a2:	893b      	ldrh	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1ec      	bne.n	8001982 <ucg_com_arduino_generic_SW_SPI+0x10a>
      }
      break;
 80019a8:	e051      	b.n	8001a4e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_3_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	4619      	mov	r1, r3
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff ff27 	bl	8001804 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3301      	adds	r3, #1
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f7ff ff20 	bl	8001804 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[2]);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3302      	adds	r3, #2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	4619      	mov	r1, r3
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff ff19 	bl	8001804 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 80019d2:	893b      	ldrh	r3, [r7, #8]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 80019d8:	893b      	ldrh	r3, [r7, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1e5      	bne.n	80019aa <ucg_com_arduino_generic_SW_SPI+0x132>
      }
      break;
 80019de:	e036      	b.n	8001a4e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_STR:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data++);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff ff0a 	bl	8001804 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 80019f0:	893b      	ldrh	r3, [r7, #8]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 80019f6:	893b      	ldrh	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f1      	bne.n	80019e0 <ucg_com_arduino_generic_SW_SPI+0x168>
      }
      break;
 80019fc:	e027      	b.n	8001a4e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_CD_DATA_SEQUENCE:
      while(arg > 0)
      {
		if ( *data != 0 )
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d010      	beq.n	8001a28 <ucg_com_arduino_generic_SW_SPI+0x1b0>
		{
		  if ( *data == 1 )
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d106      	bne.n	8001a1c <ucg_com_arduino_generic_SW_SPI+0x1a4>
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a14:	4810      	ldr	r0, [pc, #64]	@ (8001a58 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001a16:	f7ff faf2 	bl	8000ffe <GPIO_WriteBit>
 8001a1a:	e005      	b.n	8001a28 <ucg_com_arduino_generic_SW_SPI+0x1b0>
		  }
		  else
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a22:	480d      	ldr	r0, [pc, #52]	@ (8001a58 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001a24:	f7ff faeb 	bl	8000ffe <GPIO_WriteBit>
		  }
		}
		data++;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	607b      	str	r3, [r7, #4]
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	4619      	mov	r1, r3
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f7ff fee5 	bl	8001804 <ucg_com_arduino_send_generic_SW_SPI>
		data++;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
		arg--;
 8001a40:	893b      	ldrh	r3, [r7, #8]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	813b      	strh	r3, [r7, #8]
      while(arg > 0)
 8001a46:	893b      	ldrh	r3, [r7, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1d8      	bne.n	80019fe <ucg_com_arduino_generic_SW_SPI+0x186>
      }
      break;
 8001a4c:	bf00      	nop
  }
  return 1;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	40020800 	.word	0x40020800

08001a64 <Ucglib4WireSWSPI_begin>:

void Ucglib4WireSWSPI_begin(ucg_t *ucg, uint8_t is_transparent)
{ 
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
  ucg_Init(ucg, ucg_dev_st7735_18x128x128, ucg_ext_st7735_18, ucg_com_arduino_generic_SW_SPI);
 8001a70:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <Ucglib4WireSWSPI_begin+0x2c>)
 8001a72:	4a08      	ldr	r2, [pc, #32]	@ (8001a94 <Ucglib4WireSWSPI_begin+0x30>)
 8001a74:	4908      	ldr	r1, [pc, #32]	@ (8001a98 <Ucglib4WireSWSPI_begin+0x34>)
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f002 f83a 	bl	8003af0 <ucg_Init>
  ucg_SetFontMode(ucg, is_transparent);
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f001 fe1e 	bl	80036c2 <ucg_SetFontMode>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08001879 	.word	0x08001879
 8001a94:	08002df1 	.word	0x08002df1
 8001a98:	08002f19 	.word	0x08002f19

08001a9c <ucg_DrawBox>:
*/

#include "ucg.h"

void ucg_DrawBox(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t w, ucg_int_t h)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	817b      	strh	r3, [r7, #10]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	813b      	strh	r3, [r7, #8]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	80fb      	strh	r3, [r7, #6]
  while( h > 0 )
 8001ab6:	e014      	b.n	8001ae2 <ucg_DrawBox+0x46>
  {
    ucg_DrawHLine(ucg, x, y, w);
 8001ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001abc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ac0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f002 f885 	bl	8003bd4 <ucg_DrawHLine>
    h--;
 8001aca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	833b      	strh	r3, [r7, #24]
    y++;
 8001ad6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3301      	adds	r3, #1
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	813b      	strh	r3, [r7, #8]
  while( h > 0 )
 8001ae2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	dce6      	bgt.n	8001ab8 <ucg_DrawBox+0x1c>
  }  
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <ucg_ClearScreen>:
  - clear the screen with black color
  - reset clip range to max
  - set draw color to white
*/
void ucg_ClearScreen(ucg_t *ucg)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	6078      	str	r0, [r7, #4]
  ucg_SetColor(ucg, 0, 0, 0, 0);
 8001afc:	2300      	movs	r3, #0
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2300      	movs	r3, #0
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f002 f8a0 	bl	8003c4c <ucg_SetColor>
  ucg_SetMaxClipRange(ucg);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f001 f9ca 	bl	8002ea6 <ucg_SetMaxClipRange>
  ucg_DrawBox(ucg, 0, 0, ucg_GetWidth(ucg), ucg_GetHeight(ucg));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffb8 	bl	8001a9c <ucg_DrawBox>
  ucg_SetColor(ucg, 0, 255, 255, 255);
 8001b2c:	23ff      	movs	r3, #255	@ 0xff
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	23ff      	movs	r3, #255	@ 0xff
 8001b32:	22ff      	movs	r2, #255	@ 0xff
 8001b34:	2100      	movs	r1, #0
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f002 f888 	bl	8003c4c <ucg_SetColor>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <ucg_DrawFrame>:
}


/* restrictions: w > 0 && h > 0 */
void ucg_DrawFrame(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t w, ucg_int_t h)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	4611      	mov	r1, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	4603      	mov	r3, r0
 8001b54:	817b      	strh	r3, [r7, #10]
 8001b56:	460b      	mov	r3, r1
 8001b58:	813b      	strh	r3, [r7, #8]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	80fb      	strh	r3, [r7, #6]
  ucg_int_t xtmp = x;
 8001b5e:	897b      	ldrh	r3, [r7, #10]
 8001b60:	82fb      	strh	r3, [r7, #22]
  
  ucg_DrawHLine(ucg, x, y, w);
 8001b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b66:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001b6a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f002 f830 	bl	8003bd4 <ucg_DrawHLine>
  ucg_DrawVLine(ucg, x, y, h);
 8001b74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b78:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001b7c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f002 f845 	bl	8003c10 <ucg_DrawVLine>
  x+=w;
 8001b86:	897a      	ldrh	r2, [r7, #10]
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	817b      	strh	r3, [r7, #10]
  x--;
 8001b90:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	817b      	strh	r3, [r7, #10]
  ucg_DrawVLine(ucg, x, y, h);
 8001b9c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ba0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ba4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f002 f831 	bl	8003c10 <ucg_DrawVLine>
  y+=h;
 8001bae:	893a      	ldrh	r2, [r7, #8]
 8001bb0:	8c3b      	ldrh	r3, [r7, #32]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	813b      	strh	r3, [r7, #8]
  y--;
 8001bb8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	813b      	strh	r3, [r7, #8]
  ucg_DrawHLine(ucg, xtmp, y, w);
 8001bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001bcc:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f001 ffff 	bl	8003bd4 <ucg_DrawHLine>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <ucg_ccs_init>:
/*
  Setup change from "start" to "end" with a specified amount of "steps".
  After calling this procedure, ccs->current will contain the "start" value.
*/
void ucg_ccs_init(ucg_ccs_t *ccs, uint8_t start, uint8_t end, ucg_int_t steps)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	4608      	mov	r0, r1
 8001be8:	4611      	mov	r1, r2
 8001bea:	461a      	mov	r2, r3
 8001bec:	4603      	mov	r3, r0
 8001bee:	70fb      	strb	r3, [r7, #3]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70bb      	strb	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	803b      	strh	r3, [r7, #0]
  ccs->start = start;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	705a      	strb	r2, [r3, #1]
  ccs->num = end-start;
 8001bfe:	78bb      	ldrb	r3, [r7, #2]
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	809a      	strh	r2, [r3, #4]
  ccs->den = steps-1;
 8001c10:	883b      	ldrh	r3, [r7, #0]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	b21a      	sxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	811a      	strh	r2, [r3, #8]
  ccs->dir = 1;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	805a      	strh	r2, [r3, #2]
  
  ccs->quot = ccs->num / ccs->den;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c30:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	80da      	strh	r2, [r3, #6]
  if ( ccs->num < 0 )
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	da0c      	bge.n	8001c5e <ucg_ccs_init+0x80>
  {
    ccs->num = -ccs->num;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	425b      	negs	r3, r3
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	809a      	strh	r2, [r3, #4]
    ccs->dir = -1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c5c:	805a      	strh	r2, [r3, #2]
  }
  ccs->rem = ccs->num % ccs->den;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001c6a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c6e:	fb01 f202 	mul.w	r2, r1, r2
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	815a      	strh	r2, [r3, #10]
  
  ccs->frac = ccs->den/2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c80:	0fda      	lsrs	r2, r3, #31
 8001c82:	4413      	add	r3, r2
 8001c84:	105b      	asrs	r3, r3, #1
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	819a      	strh	r2, [r3, #12]
  ccs->current = start;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	701a      	strb	r2, [r3, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <ucg_ccs_step>:
/*
  Make one step towards the "end" value. 
  ccs->curront will contain the updated value.
*/
void ucg_ccs_step(ucg_ccs_t *ccs)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  
  ccs->current += ccs->quot;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	781a      	ldrb	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	701a      	strb	r2, [r3, #0]
  ccs->frac += ccs->rem;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	4413      	add	r3, r2
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	819a      	strh	r2, [r3, #12]
  if ( ccs->frac >= ccs->den )
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	db16      	blt.n	8001d12 <ucg_ccs_step+0x74>
  {
    ccs->current += ccs->dir;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	781a      	ldrb	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	701a      	strb	r2, [r3, #0]
    ccs->frac -= ccs->den;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	b21a      	sxth	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	819a      	strh	r2, [r3, #12]
  }  
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <ucg_ccs_seek>:
  
  Seek to the specified "pos"ition.
  "pos" must be between 0 and "end"-1
*/
void ucg_ccs_seek(ucg_ccs_t *ccs, ucg_int_t pos)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	807b      	strh	r3, [r7, #2]
  ucg_int_t p;
  ccs->current = ccs->quot;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	701a      	strb	r2, [r3, #0]
  ccs->current *= pos;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	781a      	ldrb	r2, [r3, #0]
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	fb12 f303 	smulbb	r3, r2, r3
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	701a      	strb	r2, [r3, #0]
  p = ccs->rem * pos  + ccs->den/2;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	fb12 f303 	smulbb	r3, r2, r3
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d5e:	0fd9      	lsrs	r1, r3, #31
 8001d60:	440b      	add	r3, r1
 8001d62:	105b      	asrs	r3, r3, #1
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	81fb      	strh	r3, [r7, #14]
  if ( ccs->dir >= 0 )
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0e      	blt.n	8001d96 <ucg_ccs_seek+0x78>
    ccs->current += p / ccs->den;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	781a      	ldrb	r2, [r3, #0]
 8001d7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8001d86:	fb93 f3f1 	sdiv	r3, r3, r1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e00d      	b.n	8001db2 <ucg_ccs_seek+0x94>
  else
    ccs->current -= p / ccs->den;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8001da4:	fb93 f3f1 	sdiv	r3, r3, r1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	701a      	strb	r2, [r3, #0]
  ccs->frac = p % ccs->den;
 8001db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001dbc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001dc0:	fb01 f202 	mul.w	r2, r1, r2
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	819a      	strh	r2, [r3, #12]
  ccs->current += ccs->start;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	781a      	ldrb	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	785b      	ldrb	r3, [r3, #1]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	701a      	strb	r2, [r3, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <ucg_draw_disc_section>:
}

static void ucg_draw_disc_section(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t x0, ucg_int_t y0, uint8_t option) UCG_NOINLINE;

static void ucg_draw_disc_section(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t x0, ucg_int_t y0, uint8_t option)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	4608      	mov	r0, r1
 8001df2:	4611      	mov	r1, r2
 8001df4:	461a      	mov	r2, r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	817b      	strh	r3, [r7, #10]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	813b      	strh	r3, [r7, #8]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	80fb      	strh	r3, [r7, #6]
    /* upper right */
    if ( option & UCG_DRAW_UPPER_RIGHT )
 8001e02:	7f3b      	ldrb	r3, [r7, #28]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d021      	beq.n	8001e50 <ucg_draw_disc_section+0x68>
    {
      ucg_DrawVLine(ucg, x0+x, y0-y, y+1);
 8001e0c:	88fa      	ldrh	r2, [r7, #6]
 8001e0e:	897b      	ldrh	r3, [r7, #10]
 8001e10:	4413      	add	r3, r2
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	b219      	sxth	r1, r3
 8001e16:	8b3a      	ldrh	r2, [r7, #24]
 8001e18:	893b      	ldrh	r3, [r7, #8]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	b21a      	sxth	r2, r3
 8001e20:	893b      	ldrh	r3, [r7, #8]
 8001e22:	3301      	adds	r3, #1
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f001 fef1 	bl	8003c10 <ucg_DrawVLine>
      ucg_DrawVLine(ucg, x0+y, y0-x, x+1);
 8001e2e:	88fa      	ldrh	r2, [r7, #6]
 8001e30:	893b      	ldrh	r3, [r7, #8]
 8001e32:	4413      	add	r3, r2
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	b219      	sxth	r1, r3
 8001e38:	8b3a      	ldrh	r2, [r7, #24]
 8001e3a:	897b      	ldrh	r3, [r7, #10]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	b21a      	sxth	r2, r3
 8001e42:	897b      	ldrh	r3, [r7, #10]
 8001e44:	3301      	adds	r3, #1
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f001 fee0 	bl	8003c10 <ucg_DrawVLine>
    }
    
    /* upper left */
    if ( option & UCG_DRAW_UPPER_LEFT )
 8001e50:	7f3b      	ldrb	r3, [r7, #28]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d021      	beq.n	8001e9e <ucg_draw_disc_section+0xb6>
    {
      ucg_DrawVLine(ucg, x0-x, y0-y, y+1);
 8001e5a:	88fa      	ldrh	r2, [r7, #6]
 8001e5c:	897b      	ldrh	r3, [r7, #10]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	b219      	sxth	r1, r3
 8001e64:	8b3a      	ldrh	r2, [r7, #24]
 8001e66:	893b      	ldrh	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	893b      	ldrh	r3, [r7, #8]
 8001e70:	3301      	adds	r3, #1
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f001 feca 	bl	8003c10 <ucg_DrawVLine>
      ucg_DrawVLine(ucg, x0-y, y0-x, x+1);
 8001e7c:	88fa      	ldrh	r2, [r7, #6]
 8001e7e:	893b      	ldrh	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	b219      	sxth	r1, r3
 8001e86:	8b3a      	ldrh	r2, [r7, #24]
 8001e88:	897b      	ldrh	r3, [r7, #10]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	b21a      	sxth	r2, r3
 8001e90:	897b      	ldrh	r3, [r7, #10]
 8001e92:	3301      	adds	r3, #1
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b21b      	sxth	r3, r3
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f001 feb9 	bl	8003c10 <ucg_DrawVLine>
    }
    
    /* lower right */
    if ( option & UCG_DRAW_LOWER_RIGHT )
 8001e9e:	7f3b      	ldrb	r3, [r7, #28]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01b      	beq.n	8001ee0 <ucg_draw_disc_section+0xf8>
    {
      ucg_DrawVLine(ucg, x0+x, y0, y+1);
 8001ea8:	88fa      	ldrh	r2, [r7, #6]
 8001eaa:	897b      	ldrh	r3, [r7, #10]
 8001eac:	4413      	add	r3, r2
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b219      	sxth	r1, r3
 8001eb2:	893b      	ldrh	r3, [r7, #8]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f001 fea6 	bl	8003c10 <ucg_DrawVLine>
      ucg_DrawVLine(ucg, x0+y, y0, x+1);
 8001ec4:	88fa      	ldrh	r2, [r7, #6]
 8001ec6:	893b      	ldrh	r3, [r7, #8]
 8001ec8:	4413      	add	r3, r2
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	b219      	sxth	r1, r3
 8001ece:	897b      	ldrh	r3, [r7, #10]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f001 fe98 	bl	8003c10 <ucg_DrawVLine>
    }
    
    /* lower left */
    if ( option & UCG_DRAW_LOWER_LEFT )
 8001ee0:	7f3b      	ldrb	r3, [r7, #28]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d01b      	beq.n	8001f22 <ucg_draw_disc_section+0x13a>
    {
      ucg_DrawVLine(ucg, x0-x, y0, y+1);
 8001eea:	88fa      	ldrh	r2, [r7, #6]
 8001eec:	897b      	ldrh	r3, [r7, #10]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	b219      	sxth	r1, r3
 8001ef4:	893b      	ldrh	r3, [r7, #8]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f001 fe85 	bl	8003c10 <ucg_DrawVLine>
      ucg_DrawVLine(ucg, x0-y, y0, x+1);
 8001f06:	88fa      	ldrh	r2, [r7, #6]
 8001f08:	893b      	ldrh	r3, [r7, #8]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b219      	sxth	r1, r3
 8001f10:	897b      	ldrh	r3, [r7, #10]
 8001f12:	3301      	adds	r3, #1
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f001 fe77 	bl	8003c10 <ucg_DrawVLine>
    }
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <ucg_draw_disc>:

void ucg_draw_disc(ucg_t *ucg, ucg_int_t x0, ucg_int_t y0, ucg_int_t rad, uint8_t option)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b08a      	sub	sp, #40	@ 0x28
 8001f2e:	af02      	add	r7, sp, #8
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	4608      	mov	r0, r1
 8001f34:	4611      	mov	r1, r2
 8001f36:	461a      	mov	r2, r3
 8001f38:	4603      	mov	r3, r0
 8001f3a:	817b      	strh	r3, [r7, #10]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	813b      	strh	r3, [r7, #8]
 8001f40:	4613      	mov	r3, r2
 8001f42:	80fb      	strh	r3, [r7, #6]
  ucg_int_t ddF_x;
  ucg_int_t ddF_y;
  ucg_int_t x;
  ucg_int_t y;

  f = 1;
 8001f44:	2301      	movs	r3, #1
 8001f46:	83fb      	strh	r3, [r7, #30]
  f -= rad;
 8001f48:	8bfa      	ldrh	r2, [r7, #30]
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	83fb      	strh	r3, [r7, #30]
  ddF_x = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	83bb      	strh	r3, [r7, #28]
  ddF_y = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	837b      	strh	r3, [r7, #26]
  ddF_y -= rad;
 8001f5a:	8b7a      	ldrh	r2, [r7, #26]
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	837b      	strh	r3, [r7, #26]
  ddF_y *= 2;
 8001f64:	8b7b      	ldrh	r3, [r7, #26]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	837b      	strh	r3, [r7, #26]
  x = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	833b      	strh	r3, [r7, #24]
  y = rad;
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	82fb      	strh	r3, [r7, #22]

  ucg_draw_disc_section(ucg, x, y, x0, y0, option);
 8001f74:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8001f78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f7c:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8001f80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f7ff ff2a 	bl	8001de8 <ucg_draw_disc_section>
  
  while ( x < y )
 8001f94:	e031      	b.n	8001ffa <ucg_draw_disc+0xd0>
  {
    if (f >= 0) 
 8001f96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db0e      	blt.n	8001fbc <ucg_draw_disc+0x92>
    {
      y--;
 8001f9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 8001faa:	8b7b      	ldrh	r3, [r7, #26]
 8001fac:	3302      	adds	r3, #2
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 8001fb2:	8bfa      	ldrh	r2, [r7, #30]
 8001fb4:	8b7b      	ldrh	r3, [r7, #26]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 8001fbc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 8001fc8:	8bbb      	ldrh	r3, [r7, #28]
 8001fca:	3302      	adds	r3, #2
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 8001fd0:	8bfa      	ldrh	r2, [r7, #30]
 8001fd2:	8bbb      	ldrh	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	83fb      	strh	r3, [r7, #30]

    ucg_draw_disc_section(ucg, x, y, x0, y0, option);    
 8001fda:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8001fde:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001fe2:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8001fe6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f7ff fef7 	bl	8001de8 <ucg_draw_disc_section>
  while ( x < y )
 8001ffa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001ffe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002002:	429a      	cmp	r2, r3
 8002004:	dbc7      	blt.n	8001f96 <ucg_draw_disc+0x6c>
  }
}
 8002006:	bf00      	nop
 8002008:	bf00      	nop
 800200a:	3720      	adds	r7, #32
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <ucg_DrawDisc>:

void ucg_DrawDisc(ucg_t *ucg, ucg_int_t x0, ucg_int_t y0, ucg_int_t rad, uint8_t option)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af02      	add	r7, sp, #8
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	461a      	mov	r2, r3
 800201e:	4603      	mov	r3, r0
 8002020:	817b      	strh	r3, [r7, #10]
 8002022:	460b      	mov	r3, r1
 8002024:	813b      	strh	r3, [r7, #8]
 8002026:	4613      	mov	r3, r2
 8002028:	80fb      	strh	r3, [r7, #6]
      return;    
  }
  */
  
  /* draw disc */
  ucg_draw_disc(ucg, x0, y0, rad, option);
 800202a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800202e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002032:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002036:	7e3b      	ldrb	r3, [r7, #24]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	4603      	mov	r3, r0
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff ff74 	bl	8001f2a <ucg_draw_disc>
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <ucg_clip_is_x_visible>:

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg) UCG_NOINLINE;
static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg) UCG_NOINLINE;

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg)
{
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.x;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002056:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.x;
 8002058:	89fa      	ldrh	r2, [r7, #14]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	@ 0x70
 8002060:	b29b      	uxth	r3, r3
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 8002068:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800206c:	2b00      	cmp	r3, #0
 800206e:	da01      	bge.n	8002074 <ucg_clip_is_x_visible+0x2a>
    return 0;
 8002070:	2300      	movs	r3, #0
 8002072:	e009      	b.n	8002088 <ucg_clip_is_x_visible+0x3e>
  if ( t >= ucg->clip_box.size.w )
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 800207a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800207e:	429a      	cmp	r2, r3
 8002080:	db01      	blt.n	8002086 <ucg_clip_is_x_visible+0x3c>
    return 0;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <ucg_clip_is_x_visible+0x3e>
  
  return 1;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <ucg_clip_is_y_visible>:

static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.y;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020a0:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.y;
 80020a2:	89fa      	ldrh	r2, [r7, #14]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	@ 0x72
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 80020b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	da01      	bge.n	80020be <ucg_clip_is_y_visible+0x2a>
    return 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e009      	b.n	80020d2 <ucg_clip_is_y_visible+0x3e>
  if ( t >= ucg->clip_box.size.h )
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	@ 0x76
 80020c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	db01      	blt.n	80020d0 <ucg_clip_is_y_visible+0x3c>
    return 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e000      	b.n	80020d2 <ucg_clip_is_y_visible+0x3e>
  
  return 1;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <ucg_clip_intersection>:
  Assumptions:
    a <= b
    c <= d
*/
static ucg_int_t ucg_clip_intersection(ucg_int_t *ap, ucg_int_t *bp, ucg_int_t c, ucg_int_t d)
{
 80020de:	b480      	push	{r7}
 80020e0:	b087      	sub	sp, #28
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	4611      	mov	r1, r2
 80020ea:	461a      	mov	r2, r3
 80020ec:	460b      	mov	r3, r1
 80020ee:	80fb      	strh	r3, [r7, #6]
 80020f0:	4613      	mov	r3, r2
 80020f2:	80bb      	strh	r3, [r7, #4]
  ucg_int_t a = *ap;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	82fb      	strh	r3, [r7, #22]
  ucg_int_t b = *bp;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	82bb      	strh	r3, [r7, #20]
  
  if ( a >= d )
 8002100:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002104:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	db01      	blt.n	8002110 <ucg_clip_intersection+0x32>
    return 0;
 800210c:	2300      	movs	r3, #0
 800210e:	e01a      	b.n	8002146 <ucg_clip_intersection+0x68>
  if ( b <= c )
 8002110:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002118:	429a      	cmp	r2, r3
 800211a:	dc01      	bgt.n	8002120 <ucg_clip_intersection+0x42>
    return 0;
 800211c:	2300      	movs	r3, #0
 800211e:	e012      	b.n	8002146 <ucg_clip_intersection+0x68>
  if ( a < c )
 8002120:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002128:	429a      	cmp	r2, r3
 800212a:	da02      	bge.n	8002132 <ucg_clip_intersection+0x54>
    *ap = c;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	88fa      	ldrh	r2, [r7, #6]
 8002130:	801a      	strh	r2, [r3, #0]
  if ( b > d )
 8002132:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002136:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	dd02      	ble.n	8002144 <ucg_clip_intersection+0x66>
    *bp = d;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	88ba      	ldrh	r2, [r7, #4]
 8002142:	801a      	strh	r2, [r3, #0]
  return 1;
 8002144:	2301      	movs	r3, #1
}
 8002146:	4618      	mov	r0, r3
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <ucg_clip_is_pixel_visible>:

ucg_int_t ucg_clip_is_pixel_visible(ucg_t *ucg)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  if ( ucg_clip_is_x_visible(ucg) == 0 )
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ff75 	bl	800204a <ucg_clip_is_x_visible>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <ucg_clip_is_pixel_visible+0x18>
    return 0;
 8002166:	2300      	movs	r3, #0
 8002168:	e008      	b.n	800217c <ucg_clip_is_pixel_visible+0x2a>
  if ( ucg_clip_is_y_visible(ucg) == 0 )
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ff92 	bl	8002094 <ucg_clip_is_y_visible>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <ucg_clip_is_pixel_visible+0x28>
    return 0;
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <ucg_clip_is_pixel_visible+0x2a>
  return 1;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <ucg_clip_l90fx>:
/*
  assumes, that ucg->arg contains data for l90fx and does clipping 
  against ucg->clip_box
*/
ucg_int_t ucg_clip_l90fx(ucg_t *ucg)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  ucg_int_t a;
  ucg_int_t b;
  ucg->arg.offset = 0;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	861a      	strh	r2, [r3, #48]	@ 0x30
  switch(ucg->arg.dir)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8002198:	2b03      	cmp	r3, #3
 800219a:	f200 816d 	bhi.w	8002478 <ucg_clip_l90fx+0x2f4>
 800219e:	a201      	add	r2, pc, #4	@ (adr r2, 80021a4 <ucg_clip_l90fx+0x20>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b5 	.word	0x080021b5
 80021a8:	0800225b 	.word	0x0800225b
 80021ac:	08002301 	.word	0x08002301
 80021b0:	080023bd 	.word	0x080023bd
  {
    case 0:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff6d 	bl	8002094 <ucg_clip_is_y_visible>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <ucg_clip_l90fx+0x40>
	return 0; 
 80021c0:	2300      	movs	r3, #0
 80021c2:	e15a      	b.n	800247a <ucg_clip_l90fx+0x2f6>
      a = ucg->arg.pixel.pos.x;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80021ca:	81fb      	strh	r3, [r7, #14]
      b = a;
 80021cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021d0:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80021d8:	b29a      	uxth	r2, r3
 80021da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	@ 0x70
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	@ 0x70
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	4413      	add	r3, r2
 8002200:	b29b      	uxth	r3, r3
 8002202:	b21b      	sxth	r3, r3
 8002204:	f107 010c 	add.w	r1, r7, #12
 8002208:	f107 000e 	add.w	r0, r7, #14
 800220c:	4622      	mov	r2, r4
 800220e:	f7ff ff66 	bl	80020de <ucg_clip_intersection>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <ucg_clip_l90fx+0x98>
	return 0;
 8002218:	2300      	movs	r3, #0
 800221a:	e12e      	b.n	800247a <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.offset = a - ucg->arg.pixel.pos.x;
 800221c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002220:	b29a      	uxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002228:	b29b      	uxth	r3, r3
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	b29b      	uxth	r3, r3
 800222e:	b21a      	sxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	861a      	strh	r2, [r3, #48]	@ 0x30
      ucg->arg.pixel.pos.x = a;
 8002234:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	849a      	strh	r2, [r3, #36]	@ 0x24
      b -= a;
 800223c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002240:	b29a      	uxth	r2, r3
 8002242:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002246:	b29b      	uxth	r3, r3
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	b29b      	uxth	r3, r3
 800224c:	b21b      	sxth	r3, r3
 800224e:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 8002250:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	859a      	strh	r2, [r3, #44]	@ 0x2c
      
      break;
 8002258:	e10e      	b.n	8002478 <ucg_clip_l90fx+0x2f4>
    case 1:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fef5 	bl	800204a <ucg_clip_is_x_visible>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <ucg_clip_l90fx+0xe6>
	return 0;
 8002266:	2300      	movs	r3, #0
 8002268:	e107      	b.n	800247a <ucg_clip_l90fx+0x2f6>
      
      a = ucg->arg.pixel.pos.y;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8002270:	81fb      	strh	r3, [r7, #14]
      b = a;
 8002272:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002276:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800227e:	b29a      	uxth	r2, r3
 8002280:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002284:	b29b      	uxth	r3, r3
 8002286:	4413      	add	r3, r2
 8002288:	b29b      	uxth	r3, r3
 800228a:	b21b      	sxth	r3, r3
 800228c:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	@ 0x72
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	@ 0x72
 800229a:	b29a      	uxth	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	@ 0x76
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	f107 010c 	add.w	r1, r7, #12
 80022ae:	f107 000e 	add.w	r0, r7, #14
 80022b2:	4622      	mov	r2, r4
 80022b4:	f7ff ff13 	bl	80020de <ucg_clip_intersection>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <ucg_clip_l90fx+0x13e>
	return 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	e0db      	b.n	800247a <ucg_clip_l90fx+0x2f6>

      ucg->arg.offset = a - ucg->arg.pixel.pos.y;
 80022c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	861a      	strh	r2, [r3, #48]	@ 0x30
      ucg->arg.pixel.pos.y = a;
 80022da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	84da      	strh	r2, [r3, #38]	@ 0x26
      b -= a;
 80022e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 80022f6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	859a      	strh	r2, [r3, #44]	@ 0x2c
      
      break;
 80022fe:	e0bb      	b.n	8002478 <ucg_clip_l90fx+0x2f4>
    case 2:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff fec7 	bl	8002094 <ucg_clip_is_y_visible>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <ucg_clip_l90fx+0x18c>
	return 0;
 800230c:	2300      	movs	r3, #0
 800230e:	e0b4      	b.n	800247a <ucg_clip_l90fx+0x2f6>
      
      b = ucg->arg.pixel.pos.x;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002316:	81bb      	strh	r3, [r7, #12]
      b++;
 8002318:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800231c:	b29b      	uxth	r3, r3
 800231e:	3301      	adds	r3, #1
 8002320:	b29b      	uxth	r3, r3
 8002322:	b21b      	sxth	r3, r3
 8002324:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 8002326:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800232a:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 800232c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002330:	b29a      	uxth	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002338:	b29b      	uxth	r3, r3
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	b29b      	uxth	r3, r3
 800233e:	b21b      	sxth	r3, r3
 8002340:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	@ 0x70
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	@ 0x70
 800234e:	b29a      	uxth	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8002356:	b29b      	uxth	r3, r3
 8002358:	4413      	add	r3, r2
 800235a:	b29b      	uxth	r3, r3
 800235c:	b21b      	sxth	r3, r3
 800235e:	f107 010c 	add.w	r1, r7, #12
 8002362:	f107 000e 	add.w	r0, r7, #14
 8002366:	4622      	mov	r2, r4
 8002368:	f7ff feb9 	bl	80020de <ucg_clip_intersection>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <ucg_clip_l90fx+0x1f2>
	return 0;
 8002372:	2300      	movs	r3, #0
 8002374:	e081      	b.n	800247a <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 8002376:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800237a:	b29a      	uxth	r2, r3
 800237c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002380:	b29b      	uxth	r3, r3
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	b29b      	uxth	r3, r3
 8002386:	b21a      	sxth	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	859a      	strh	r2, [r3, #44]	@ 0x2c
      
      b--;
 800238c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29b      	uxth	r3, r3
 8002396:	b21b      	sxth	r3, r3
 8002398:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.x-b;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	b21a      	sxth	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	861a      	strh	r2, [r3, #48]	@ 0x30
      ucg->arg.pixel.pos.x = b;
 80023b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	849a      	strh	r2, [r3, #36]	@ 0x24
      
      break;
 80023ba:	e05d      	b.n	8002478 <ucg_clip_l90fx+0x2f4>
    case 3:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff fe44 	bl	800204a <ucg_clip_is_x_visible>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <ucg_clip_l90fx+0x248>
	return 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	e056      	b.n	800247a <ucg_clip_l90fx+0x2f6>

      b = ucg->arg.pixel.pos.y;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80023d2:	81bb      	strh	r3, [r7, #12]
      b++;
 80023d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	b29b      	uxth	r3, r3
 80023de:	b21b      	sxth	r3, r3
 80023e0:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 80023e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023e6:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 80023e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	@ 0x72
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	@ 0x72
 800240a:	b29a      	uxth	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	@ 0x76
 8002412:	b29b      	uxth	r3, r3
 8002414:	4413      	add	r3, r2
 8002416:	b29b      	uxth	r3, r3
 8002418:	b21b      	sxth	r3, r3
 800241a:	f107 010c 	add.w	r1, r7, #12
 800241e:	f107 000e 	add.w	r0, r7, #14
 8002422:	4622      	mov	r2, r4
 8002424:	f7ff fe5b 	bl	80020de <ucg_clip_intersection>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <ucg_clip_l90fx+0x2ae>
	return 0;
 800242e:	2300      	movs	r3, #0
 8002430:	e023      	b.n	800247a <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 8002432:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002436:	b29a      	uxth	r2, r3
 8002438:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800243c:	b29b      	uxth	r3, r3
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	b29b      	uxth	r3, r3
 8002442:	b21a      	sxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	859a      	strh	r2, [r3, #44]	@ 0x2c
      
      b--;
 8002448:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29b      	uxth	r3, r3
 8002452:	b21b      	sxth	r3, r3
 8002454:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.y-b;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800245c:	b29a      	uxth	r2, r3
 800245e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002462:	b29b      	uxth	r3, r3
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	b29b      	uxth	r3, r3
 8002468:	b21a      	sxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	861a      	strh	r2, [r3, #48]	@ 0x30
      ucg->arg.pixel.pos.y = b;
 800246e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	84da      	strh	r2, [r3, #38]	@ 0x26
      
      
      break;
 8002476:	bf00      	nop
  }

  return 1;
 8002478:	2301      	movs	r3, #1
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bd90      	pop	{r4, r7, pc}
 8002482:	bf00      	nop

08002484 <ucg_clip_l90se>:
  return 1;
}
*/

ucg_int_t ucg_clip_l90se(ucg_t *ucg)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  if ( ucg_clip_l90fx(ucg) == 0 )
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff fe79 	bl	8002184 <ucg_clip_l90fx>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <ucg_clip_l90se+0x18>
      return 0;
 8002498:	2300      	movs	r3, #0
 800249a:	e019      	b.n	80024d0 <ucg_clip_l90se+0x4c>
  for ( i = 0; i < 3; i++ )
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e012      	b.n	80024c8 <ucg_clip_l90se+0x44>
  {
    ucg_ccs_seek(ucg->arg.ccs_line+i, ucg->arg.offset);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f103 0146 	add.w	r1, r3, #70	@ 0x46
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	18ca      	adds	r2, r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80024ba:	4619      	mov	r1, r3
 80024bc:	4610      	mov	r0, r2
 80024be:	f7ff fc2e 	bl	8001d1e <ucg_ccs_seek>
  for ( i = 0; i < 3; i++ )
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	3301      	adds	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d9e9      	bls.n	80024a2 <ucg_clip_l90se+0x1e>
  }  
  return 1;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <ucg_com_PowerDown>:
  return 1;
}


void ucg_com_PowerDown(ucg_t *ucg)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ( (ucg->com_status & UCG_COM_STATUS_MASK_POWER) != 0 )
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <ucg_com_PowerDown+0x24>
    ucg->com_cb(ucg, UCG_COM_MSG_POWER_DOWN, 0, NULL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69dc      	ldr	r4, [r3, #28]
 80024f2:	2300      	movs	r3, #0
 80024f4:	2200      	movs	r2, #0
 80024f6:	210b      	movs	r1, #11
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	47a0      	blx	r4
  ucg->com_status &= ~UCG_COM_STATUS_MASK_POWER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8002502:	f023 0308 	bic.w	r3, r3, #8
 8002506:	b2da      	uxtb	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}

08002516 <ucg_com_PowerUp>:

/*
  clk_speed in nano-seconds, range: 0..4095
*/
int16_t ucg_com_PowerUp(ucg_t *ucg, uint16_t serial_clk_speed, uint16_t parallel_clk_speed)
{
 8002516:	b590      	push	{r4, r7, lr}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	807b      	strh	r3, [r7, #2]
 8002522:	4613      	mov	r3, r2
 8002524:	803b      	strh	r3, [r7, #0]
  int16_t r;
  ucg_com_info_t com_info;
  com_info.serial_clk_speed = serial_clk_speed;
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	813b      	strh	r3, [r7, #8]
  com_info.parallel_clk_speed = parallel_clk_speed;
 800252a:	883b      	ldrh	r3, [r7, #0]
 800252c:	817b      	strh	r3, [r7, #10]
  
  ucg_com_PowerDown(ucg);  
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ffd2 	bl	80024d8 <ucg_com_PowerDown>
  ucg->com_initial_change_sent = 0;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
  r = ucg->com_cb(ucg, UCG_COM_MSG_POWER_UP, 0UL, (uint8_t *)&com_info);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69dc      	ldr	r4, [r3, #28]
 8002540:	f107 0308 	add.w	r3, r7, #8
 8002544:	2200      	movs	r2, #0
 8002546:	210a      	movs	r1, #10
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	47a0      	blx	r4
 800254c:	4603      	mov	r3, r0
 800254e:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 8002550:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <ucg_com_PowerUp+0x54>
  {
    ucg->com_status |= UCG_COM_STATUS_MASK_POWER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 800255e:	f043 0308 	orr.w	r3, r3, #8
 8002562:	b2da      	uxtb	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
  }
  return r;
 800256a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bd90      	pop	{r4, r7, pc}

08002576 <ucg_com_SetLineStatus>:

void ucg_com_SetLineStatus(ucg_t *ucg, uint8_t level, uint8_t mask, uint8_t msg)
{
 8002576:	b590      	push	{r4, r7, lr}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	4608      	mov	r0, r1
 8002580:	4611      	mov	r1, r2
 8002582:	461a      	mov	r2, r3
 8002584:	4603      	mov	r3, r0
 8002586:	70fb      	strb	r3, [r7, #3]
 8002588:	460b      	mov	r3, r1
 800258a:	70bb      	strb	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  if ( level == 0 )
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d131      	bne.n	80025fa <ucg_com_SetLineStatus+0x84>
  {
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == mask )
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 800259c:	78bb      	ldrb	r3, [r7, #2]
 800259e:	4013      	ands	r3, r2
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <ucg_com_SetLineStatus+0x42>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 20af 	ldrb.w	r2, [r3, #175]	@ 0xaf
 80025ac:	78bb      	ldrb	r3, [r7, #2]
 80025ae:	4013      	ands	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	78ba      	ldrb	r2, [r7, #2]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d14b      	bne.n	8002650 <ucg_com_SetLineStatus+0xda>
    {
      ucg->com_cb(ucg, msg, level, NULL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69dc      	ldr	r4, [r3, #28]
 80025bc:	787b      	ldrb	r3, [r7, #1]
 80025be:	b219      	sxth	r1, r3
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	2300      	movs	r3, #0
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	47a0      	blx	r4
      ucg->com_status &= ~mask;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80025d0:	b25a      	sxtb	r2, r3
 80025d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	4013      	ands	r3, r2
 80025dc:	b25b      	sxtb	r3, r3
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
      ucg->com_initial_change_sent |= mask;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 80025ec:	78bb      	ldrb	r3, [r7, #2]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
      ucg->com_cb(ucg, msg, level, NULL);
      ucg->com_status |= mask;
      ucg->com_initial_change_sent |= mask;
    }
  }
}
 80025f8:	e02a      	b.n	8002650 <ucg_com_SetLineStatus+0xda>
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == 0 )
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 8002600:	78bb      	ldrb	r3, [r7, #2]
 8002602:	4013      	ands	r3, r2
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <ucg_com_SetLineStatus+0xa4>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 20af 	ldrb.w	r2, [r3, #175]	@ 0xaf
 8002610:	78bb      	ldrb	r3, [r7, #2]
 8002612:	4013      	ands	r3, r2
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d11a      	bne.n	8002650 <ucg_com_SetLineStatus+0xda>
      ucg->com_cb(ucg, msg, level, NULL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69dc      	ldr	r4, [r3, #28]
 800261e:	787b      	ldrb	r3, [r7, #1]
 8002620:	b219      	sxth	r1, r3
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	b29a      	uxth	r2, r3
 8002626:	2300      	movs	r3, #0
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	47a0      	blx	r4
      ucg->com_status |= mask;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 20af 	ldrb.w	r2, [r3, #175]	@ 0xaf
 8002632:	78bb      	ldrb	r3, [r7, #2]
 8002634:	4313      	orrs	r3, r2
 8002636:	b2da      	uxtb	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
      ucg->com_initial_change_sent |= mask;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 8002644:	78bb      	ldrb	r3, [r7, #2]
 8002646:	4313      	orrs	r3, r2
 8002648:	b2da      	uxtb	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bd90      	pop	{r4, r7, pc}

08002658 <ucg_com_SetResetLineStatus>:

void ucg_com_SetResetLineStatus(ucg_t *ucg, uint8_t level)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_RESET, UCG_COM_MSG_CHANGE_RESET_LINE);
 8002664:	78f9      	ldrb	r1, [r7, #3]
 8002666:	230d      	movs	r3, #13
 8002668:	2204      	movs	r2, #4
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ff83 	bl	8002576 <ucg_com_SetLineStatus>
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <ucg_com_SetCSLineStatus>:

void ucg_com_SetCSLineStatus(ucg_t *ucg, uint8_t level)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CS, UCG_COM_MSG_CHANGE_CS_LINE);
 8002684:	78f9      	ldrb	r1, [r7, #3]
 8002686:	230e      	movs	r3, #14
 8002688:	2202      	movs	r2, #2
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ff73 	bl	8002576 <ucg_com_SetLineStatus>
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <ucg_com_SetCDLineStatus>:

void ucg_com_SetCDLineStatus(ucg_t *ucg, uint8_t level)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CD, UCG_COM_MSG_CHANGE_CD_LINE);
 80026a4:	78f9      	ldrb	r1, [r7, #3]
 80026a6:	230f      	movs	r3, #15
 80026a8:	2201      	movs	r2, #1
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ff63 	bl	8002576 <ucg_com_SetLineStatus>
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <ucg_com_DelayMicroseconds>:

/* delay in microseconds */
void ucg_com_DelayMicroseconds(ucg_t *ucg, uint16_t delay)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
  ucg->com_cb(ucg, UCG_COM_MSG_DELAY, delay, NULL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69dc      	ldr	r4, [r3, #28]
 80026c8:	887a      	ldrh	r2, [r7, #2]
 80026ca:	2300      	movs	r3, #0
 80026cc:	210c      	movs	r1, #12
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	47a0      	blx	r4
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}

080026da <ucg_com_DelayMilliseconds>:

/* delay in milliseconds */
void ucg_com_DelayMilliseconds(ucg_t *ucg, uint16_t delay)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 80026e6:	e007      	b.n	80026f8 <ucg_com_DelayMilliseconds+0x1e>
  {
    ucg_com_DelayMicroseconds(ucg, 1000);
 80026e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ffe3 	bl	80026b8 <ucg_com_DelayMicroseconds>
    delay--;
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f4      	bne.n	80026e8 <ucg_com_DelayMilliseconds+0xe>
  }
}
 80026fe:	bf00      	nop
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <ucg_com_SendByte>:


#ifndef ucg_com_SendByte
void ucg_com_SendByte(ucg_t *ucg, uint8_t byte)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, byte, NULL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69dc      	ldr	r4, [r3, #28]
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	b29a      	uxth	r2, r3
 800271c:	2300      	movs	r3, #0
 800271e:	2110      	movs	r1, #16
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	47a0      	blx	r4
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bd90      	pop	{r4, r7, pc}

0800272c <ucg_com_SendStringP>:
{
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_STR, cnt, (uint8_t *)byte_ptr);
}

void ucg_com_SendStringP(ucg_t *ucg, uint16_t cnt, const ucg_pgm_uint8_t *byte_ptr)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	460b      	mov	r3, r1
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	817b      	strh	r3, [r7, #10]
  uint8_t b;
  while( cnt > 0 )
 800273a:	e010      	b.n	800275e <ucg_com_SendStringP+0x32>
  {
    b = ucg_pgm_read(byte_ptr);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	75fb      	strb	r3, [r7, #23]
    //b = *byte_ptr;
    ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, b, NULL);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	69dc      	ldr	r4, [r3, #28]
 8002746:	7dfb      	ldrb	r3, [r7, #23]
 8002748:	b29a      	uxth	r2, r3
 800274a:	2300      	movs	r3, #0
 800274c:	2110      	movs	r1, #16
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	47a0      	blx	r4
    byte_ptr++;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3301      	adds	r3, #1
 8002756:	607b      	str	r3, [r7, #4]
    cnt--;
 8002758:	897b      	ldrh	r3, [r7, #10]
 800275a:	3b01      	subs	r3, #1
 800275c:	817b      	strh	r3, [r7, #10]
  while( cnt > 0 )
 800275e:	897b      	ldrh	r3, [r7, #10]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1eb      	bne.n	800273c <ucg_com_SendStringP+0x10>
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}

0800276e <ucg_com_SendCmdArg>:
#define END()					0x00

*/

static void ucg_com_SendCmdArg(ucg_t *ucg, const ucg_pgm_uint8_t *data, uint8_t cmd_cnt, uint8_t arg_cnt)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	4611      	mov	r1, r2
 800277a:	461a      	mov	r2, r3
 800277c:	460b      	mov	r3, r1
 800277e:	71fb      	strb	r3, [r7, #7]
 8002780:	4613      	mov	r3, r2
 8002782:	71bb      	strb	r3, [r7, #6]
  ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd>>1)&1 );
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4619      	mov	r1, r3
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff ff7e 	bl	8002698 <ucg_com_SetCDLineStatus>
  ucg_com_SendStringP(ucg, cmd_cnt, data);
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	4619      	mov	r1, r3
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f7ff ffc1 	bl	800272c <ucg_com_SendStringP>
  if ( arg_cnt > 0 )
 80027aa:	79bb      	ldrb	r3, [r7, #6]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d014      	beq.n	80027da <ucg_com_SendCmdArg+0x6c>
  {
    data += cmd_cnt;
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	4413      	add	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
    ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	4619      	mov	r1, r3
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7ff ff66 	bl	8002698 <ucg_com_SetCDLineStatus>
    ucg_com_SendStringP(ucg, arg_cnt, data);
 80027cc:	79bb      	ldrb	r3, [r7, #6]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	4619      	mov	r1, r3
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff ffa9 	bl	800272c <ucg_com_SendStringP>
  }
}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <ucg_com_SendCmdSeq>:


//void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint8_t hi;
  uint8_t lo;

  for(;;)
  {
    b = ucg_pgm_read(data);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	73fb      	strb	r3, [r7, #15]
    //b = *data;
    hi = (b) >> 4;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	73bb      	strb	r3, [r7, #14]
    lo = (b) & 0x0f;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	737b      	strb	r3, [r7, #13]
    switch( hi )
 8002802:	7bbb      	ldrb	r3, [r7, #14]
 8002804:	2b0f      	cmp	r3, #15
 8002806:	f200 8127 	bhi.w	8002a58 <ucg_com_SendCmdSeq+0x274>
 800280a:	a201      	add	r2, pc, #4	@ (adr r2, 8002810 <ucg_com_SendCmdSeq+0x2c>)
 800280c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002810:	08002a59 	.word	0x08002a59
 8002814:	08002851 	.word	0x08002851
 8002818:	08002851 	.word	0x08002851
 800281c:	08002851 	.word	0x08002851
 8002820:	08002a59 	.word	0x08002a59
 8002824:	08002a59 	.word	0x08002a59
 8002828:	08002871 	.word	0x08002871
 800282c:	080028a3 	.word	0x080028a3
 8002830:	080028e7 	.word	0x080028e7
 8002834:	08002913 	.word	0x08002913
 8002838:	0800293f 	.word	0x0800293f
 800283c:	0800299f 	.word	0x0800299f
 8002840:	08002a59 	.word	0x08002a59
 8002844:	08002a59 	.word	0x08002a59
 8002848:	08002a59 	.word	0x08002a59
 800284c:	080029ff 	.word	0x080029ff
      case 0:
	return;		/* end marker */
      case 1:
      case 2:
      case 3:
	ucg_com_SendCmdArg(ucg, data+1, hi, lo);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	1c59      	adds	r1, r3, #1
 8002854:	7b7b      	ldrb	r3, [r7, #13]
 8002856:	7bba      	ldrb	r2, [r7, #14]
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff88 	bl	800276e <ucg_com_SendCmdArg>
	data+=1+hi+lo;
 800285e:	7bbb      	ldrb	r3, [r7, #14]
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	7b7b      	ldrb	r3, [r7, #13]
 8002864:	4413      	add	r3, r2
 8002866:	461a      	mov	r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4413      	add	r3, r2
 800286c:	603b      	str	r3, [r7, #0]
	break;
 800286e:	e0f2      	b.n	8002a56 <ucg_com_SendCmdSeq+0x272>
      case 6:
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	b2db      	uxtb	r3, r3
 800287c:	4619      	mov	r1, r3
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ff0a 	bl	8002698 <ucg_com_SetCDLineStatus>
	ucg_com_SendStringP(ucg, lo, data+1);
 8002884:	7b7b      	ldrb	r3, [r7, #13]
 8002886:	b299      	uxth	r1, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	461a      	mov	r2, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ff4c 	bl	800272c <ucg_com_SendStringP>
	data+=1+lo;      
 8002894:	7b7b      	ldrb	r3, [r7, #13]
 8002896:	3301      	adds	r3, #1
 8002898:	461a      	mov	r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	4413      	add	r3, r2
 800289e:	603b      	str	r3, [r7, #0]
	break;
 80028a0:	e0d9      	b.n	8002a56 <ucg_com_SendCmdSeq+0x272>
      case 7:	/* note: 0x070 is used to set data line status */
	ucg_com_SetCDLineStatus(ucg, ((ucg->com_cfg_cd>>1)&1)^1 );
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf0c      	ite	eq
 80028b4:	2301      	moveq	r3, #1
 80028b6:	2300      	movne	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	4619      	mov	r1, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff feeb 	bl	8002698 <ucg_com_SetCDLineStatus>
	if ( lo > 0 )
 80028c2:	7b7b      	ldrb	r3, [r7, #13]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <ucg_com_SendCmdSeq+0xf4>
	  ucg_com_SendStringP(ucg, lo, data+1);
 80028c8:	7b7b      	ldrb	r3, [r7, #13]
 80028ca:	b299      	uxth	r1, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	3301      	adds	r3, #1
 80028d0:	461a      	mov	r2, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff2a 	bl	800272c <ucg_com_SendStringP>
	data+=1+lo;      
 80028d8:	7b7b      	ldrb	r3, [r7, #13]
 80028da:	3301      	adds	r3, #1
 80028dc:	461a      	mov	r2, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	603b      	str	r3, [r7, #0]
	break;
 80028e4:	e0b7      	b.n	8002a56 <ucg_com_SendCmdSeq+0x272>
      case 8:
	data++;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	3301      	adds	r3, #1
 80028ea:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMilliseconds(ucg, (((uint16_t)lo)<<8) + b );
 80028f2:	7b7b      	ldrb	r3, [r7, #13]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	4413      	add	r3, r2
 8002900:	b29b      	uxth	r3, r3
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fee8 	bl	80026da <ucg_com_DelayMilliseconds>
	data++;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	603b      	str	r3, [r7, #0]
	break;
 8002910:	e0a1      	b.n	8002a56 <ucg_com_SendCmdSeq+0x272>
      case 9:
	data++;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMicroseconds(ucg, (((uint16_t)lo)<<8) + b );
 800291e:	7b7b      	ldrb	r3, [r7, #13]
 8002920:	b29b      	uxth	r3, r3
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	b29a      	uxth	r2, r3
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	b29b      	uxth	r3, r3
 800292a:	4413      	add	r3, r2
 800292c:	b29b      	uxth	r3, r3
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fec1 	bl	80026b8 <ucg_com_DelayMicroseconds>
	data++;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	603b      	str	r3, [r7, #0]
	break;
 800293c:	e08b      	b.n	8002a56 <ucg_com_SendCmdSeq+0x272>
      case 10:
	data++;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	3301      	adds	r3, #1
 8002942:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	73fb      	strb	r3, [r7, #15]
	data++;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	733b      	strb	r3, [r7, #12]
	data++;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff fe94 	bl	8002698 <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.x+ucg->display_offset.x)>>lo)))&b)|bb );
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800297e:	441a      	add	r2, r3
 8002980:	7b7b      	ldrb	r3, [r7, #13]
 8002982:	fa42 f303 	asr.w	r3, r2, r3
 8002986:	b2da      	uxtb	r2, r3
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	4013      	ands	r3, r2
 800298c:	b2da      	uxtb	r2, r3
 800298e:	7b3b      	ldrb	r3, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	b2db      	uxtb	r3, r3
 8002994:	4619      	mov	r1, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff feb6 	bl	8002708 <ucg_com_SendByte>
	//data+=2;
	break;
 800299c:	e05b      	b.n	8002a56 <ucg_com_SendCmdSeq+0x272>
      case 11:
	data++;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	73fb      	strb	r3, [r7, #15]
	data++;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	733b      	strb	r3, [r7, #12]
	data++;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4619      	mov	r1, r3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fe64 	bl	8002698 <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.y+ucg->display_offset.y)>>lo)))&b)|bb );
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80029d6:	461a      	mov	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80029de:	441a      	add	r2, r3
 80029e0:	7b7b      	ldrb	r3, [r7, #13]
 80029e2:	fa42 f303 	asr.w	r3, r2, r3
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	4013      	ands	r3, r2
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	7b3b      	ldrb	r3, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fe86 	bl	8002708 <ucg_com_SendByte>
	//data+=2;
	break;
 80029fc:	e02b      	b.n	8002a56 <ucg_com_SendCmdSeq+0x272>
      case 15:
	hi = lo >> 2;
 80029fe:	7b7b      	ldrb	r3, [r7, #13]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	73bb      	strb	r3, [r7, #14]
	lo &= 3;
 8002a04:	7b7b      	ldrb	r3, [r7, #13]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	737b      	strb	r3, [r7, #13]
	switch(hi)
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d018      	beq.n	8002a44 <ucg_com_SendCmdSeq+0x260>
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	dc1b      	bgt.n	8002a4e <ucg_com_SendCmdSeq+0x26a>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <ucg_com_SendCmdSeq+0x23c>
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d009      	beq.n	8002a32 <ucg_com_SendCmdSeq+0x24e>
 8002a1e:	e016      	b.n	8002a4e <ucg_com_SendCmdSeq+0x26a>
	{
	  case 0:
	    ucg_com_SetResetLineStatus(ucg, lo&1);
 8002a20:	7b7b      	ldrb	r3, [r7, #13]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fe14 	bl	8002658 <ucg_com_SetResetLineStatus>
	    break;
 8002a30:	e00d      	b.n	8002a4e <ucg_com_SendCmdSeq+0x26a>
	  case 1:
	    ucg_com_SetCSLineStatus(ucg, lo&1);
 8002a32:	7b7b      	ldrb	r3, [r7, #13]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff fe1b 	bl	8002678 <ucg_com_SetCSLineStatus>
	    break;
 8002a42:	e004      	b.n	8002a4e <ucg_com_SendCmdSeq+0x26a>
	  case 3:
	    ucg->com_cfg_cd = lo;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7b7a      	ldrb	r2, [r7, #13]
 8002a48:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
	    break;
 8002a4c:	bf00      	nop
	}
	data++;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	603b      	str	r3, [r7, #0]
	break;
 8002a54:	bf00      	nop
    b = ucg_pgm_read(data);
 8002a56:	e6ca      	b.n	80027ee <ucg_com_SendCmdSeq+0xa>
      default:
	return;
 8002a58:	bf00      	nop
    }  
  }
}
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <ucg_dev_default_cb>:
  this should be (finally) called by any other device callback to handle
  messages, which are not yet handled.
*/

ucg_int_t ucg_dev_default_cb(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8002a6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d00a      	beq.n	8002a8c <ucg_dev_default_cb+0x2c>
 8002a76:	2b17      	cmp	r3, #23
 8002a78:	d10f      	bne.n	8002a9a <ucg_dev_default_cb+0x3a>
  {
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	4798      	blx	r3
 8002a88:	4603      	mov	r3, r0
 8002a8a:	e007      	b.n	8002a9c <ucg_dev_default_cb+0x3c>
    case UCG_MSG_SET_CLIP_BOX:
      ucg->clip_box = *(ucg_box_t *)data;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	3370      	adds	r3, #112	@ 0x70
 8002a92:	6810      	ldr	r0, [r2, #0]
 8002a94:	6851      	ldr	r1, [r2, #4]
 8002a96:	c303      	stmia	r3!, {r0, r1}
      break;
 8002a98:	bf00      	nop
  }
  return 1;	/* all ok */
 8002a9a:	2301      	movs	r3, #1
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <ucg_ext_none>:

/*
  will be used as default cb if no extentions callback is provided
*/
ucg_int_t ucg_ext_none(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	460b      	mov	r3, r1
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	817b      	strh	r3, [r7, #10]
  return 1;	/* all ok */  
 8002ab2:	2301      	movs	r3, #1
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <ucg_handle_st7735_l90fx>:
  UCG_DATA(),								/* change to data mode */
  UCG_END()
};

ucg_int_t ucg_handle_st7735_l90fx(ucg_t *ucg)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  if ( ucg_clip_l90fx(ucg) != 0 )
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fb5b 	bl	8002184 <ucg_clip_l90fx>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d056      	beq.n	8002b82 <ucg_handle_st7735_l90fx+0xc2>
  {
    switch(ucg->arg.dir)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d010      	beq.n	8002b00 <ucg_handle_st7735_l90fx+0x40>
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	dc20      	bgt.n	8002b24 <ucg_handle_st7735_l90fx+0x64>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <ucg_handle_st7735_l90fx+0x2c>
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d005      	beq.n	8002af6 <ucg_handle_st7735_l90fx+0x36>
 8002aea:	e01b      	b.n	8002b24 <ucg_handle_st7735_l90fx+0x64>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 8002aec:	4927      	ldr	r1, [pc, #156]	@ (8002b8c <ucg_handle_st7735_l90fx+0xcc>)
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fe78 	bl	80027e4 <ucg_com_SendCmdSeq>
	break;
 8002af4:	e028      	b.n	8002b48 <ucg_handle_st7735_l90fx+0x88>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 8002af6:	4926      	ldr	r1, [pc, #152]	@ (8002b90 <ucg_handle_st7735_l90fx+0xd0>)
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fe73 	bl	80027e4 <ucg_com_SendCmdSeq>
	break;
 8002afe:	e023      	b.n	8002b48 <ucg_handle_st7735_l90fx+0x88>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002b04:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.x = 127-tmp;
 8002b06:	89fb      	ldrh	r3, [r7, #14]
 8002b08:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	b21a      	sxth	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	849a      	strh	r2, [r3, #36]	@ 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 8002b14:	491f      	ldr	r1, [pc, #124]	@ (8002b94 <ucg_handle_st7735_l90fx+0xd4>)
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff fe64 	bl	80027e4 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	89fa      	ldrh	r2, [r7, #14]
 8002b20:	849a      	strh	r2, [r3, #36]	@ 0x24
	break;
 8002b22:	e011      	b.n	8002b48 <ucg_handle_st7735_l90fx+0x88>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b28:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.y = 127-tmp;
 8002b2a:	89fb      	ldrh	r3, [r7, #14]
 8002b2c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	b21a      	sxth	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	84da      	strh	r2, [r3, #38]	@ 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 8002b38:	4917      	ldr	r1, [pc, #92]	@ (8002b98 <ucg_handle_st7735_l90fx+0xd8>)
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff fe52 	bl	80027e4 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	89fa      	ldrh	r2, [r7, #14]
 8002b44:	84da      	strh	r2, [r3, #38]	@ 0x26
	break;
 8002b46:	bf00      	nop
    }
    c[0] = ucg->arg.pixel.rgb.color[0];
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b4e:	723b      	strb	r3, [r7, #8]
    c[1] = ucg->arg.pixel.rgb.color[1];
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002b56:	727b      	strb	r3, [r7, #9]
    c[2] = ucg->arg.pixel.rgb.color[2];
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002b5e:	72bb      	strb	r3, [r7, #10]
    ucg_com_SendRepeat3Bytes(ucg, ucg->arg.len, c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69dc      	ldr	r4, [r3, #28]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	f107 0308 	add.w	r3, r7, #8
 8002b70:	2113      	movs	r1, #19
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	47a0      	blx	r4
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8002b76:	2101      	movs	r1, #1
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff fd7d 	bl	8002678 <ucg_com_SetCSLineStatus>
    return 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <ucg_handle_st7735_l90fx+0xc4>
  }
  return 0;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd90      	pop	{r4, r7, pc}
 8002b8c:	0800554c 	.word	0x0800554c
 8002b90:	0800556c 	.word	0x0800556c
 8002b94:	08005590 	.word	0x08005590
 8002b98:	080055b4 	.word	0x080055b4

08002b9c <ucg_handle_st7735_l90se>:
  return 0;
}


ucg_int_t ucg_handle_st7735_l90se(ucg_t *ucg)
{
 8002b9c:	b590      	push	{r4, r7, lr}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  
  /* Setup ccs for l90se. This will be updated by ucg_clip_l90se if required */
  
  for ( i = 0; i < 3; i++ )
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	75fb      	strb	r3, [r7, #23]
 8002ba8:	e01a      	b.n	8002be0 <ucg_handle_st7735_l90se+0x44>
  {
    ucg_ccs_init(ucg->arg.ccs_line+i, ucg->arg.rgb[0].color[i], ucg->arg.rgb[1].color[i], ucg->arg.len);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f103 0146 	add.w	r1, r3, #70	@ 0x46
 8002bb0:	7dfa      	ldrb	r2, [r7, #23]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	18c8      	adds	r0, r1, r3
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f893 103a 	ldrb.w	r1, [r3, #58]	@ 0x3a
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002bd6:	f7ff f802 	bl	8001bde <ucg_ccs_init>
  for ( i = 0; i < 3; i++ )
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	75fb      	strb	r3, [r7, #23]
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d9e1      	bls.n	8002baa <ucg_handle_st7735_l90se+0xe>
  }
  
  /* check if the line is visible */
  
  if ( ucg_clip_l90se(ucg) != 0 )
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fc4c 	bl	8002484 <ucg_clip_l90se>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d074      	beq.n	8002cdc <ucg_handle_st7735_l90se+0x140>
  {
    ucg_int_t i;
    switch(ucg->arg.dir)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d010      	beq.n	8002c1e <ucg_handle_st7735_l90se+0x82>
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	dc20      	bgt.n	8002c42 <ucg_handle_st7735_l90se+0xa6>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <ucg_handle_st7735_l90se+0x6e>
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d005      	beq.n	8002c14 <ucg_handle_st7735_l90se+0x78>
 8002c08:	e01b      	b.n	8002c42 <ucg_handle_st7735_l90se+0xa6>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 8002c0a:	4937      	ldr	r1, [pc, #220]	@ (8002ce8 <ucg_handle_st7735_l90se+0x14c>)
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff fde9 	bl	80027e4 <ucg_com_SendCmdSeq>
	break;
 8002c12:	e028      	b.n	8002c66 <ucg_handle_st7735_l90se+0xca>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 8002c14:	4935      	ldr	r1, [pc, #212]	@ (8002cec <ucg_handle_st7735_l90se+0x150>)
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fde4 	bl	80027e4 <ucg_com_SendCmdSeq>
	break;
 8002c1c:	e023      	b.n	8002c66 <ucg_handle_st7735_l90se+0xca>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002c22:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.x = 127-tmp;
 8002c24:	8a7b      	ldrh	r3, [r7, #18]
 8002c26:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	b21a      	sxth	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	849a      	strh	r2, [r3, #36]	@ 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 8002c32:	492f      	ldr	r1, [pc, #188]	@ (8002cf0 <ucg_handle_st7735_l90se+0x154>)
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff fdd5 	bl	80027e4 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	8a7a      	ldrh	r2, [r7, #18]
 8002c3e:	849a      	strh	r2, [r3, #36]	@ 0x24
	break;
 8002c40:	e011      	b.n	8002c66 <ucg_handle_st7735_l90se+0xca>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c46:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.y = 127-tmp;
 8002c48:	8a7b      	ldrh	r3, [r7, #18]
 8002c4a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	b21a      	sxth	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	84da      	strh	r2, [r3, #38]	@ 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 8002c56:	4927      	ldr	r1, [pc, #156]	@ (8002cf4 <ucg_handle_st7735_l90se+0x158>)
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff fdc3 	bl	80027e4 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	8a7a      	ldrh	r2, [r7, #18]
 8002c62:	84da      	strh	r2, [r3, #38]	@ 0x26
	break;
 8002c64:	bf00      	nop
    }
    
    for( i = 0; i < ucg->arg.len; i++ )
 8002c66:	2300      	movs	r3, #0
 8002c68:	82bb      	strh	r3, [r7, #20]
 8002c6a:	e02a      	b.n	8002cc2 <ucg_handle_st7735_l90se+0x126>
    {
      c[0] = ucg->arg.ccs_line[0].current;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002c72:	733b      	strb	r3, [r7, #12]
      c[1] = ucg->arg.ccs_line[1].current; 
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c7a:	737b      	strb	r3, [r7, #13]
      c[2] = ucg->arg.ccs_line[2].current;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002c82:	73bb      	strb	r3, [r7, #14]
      ucg_com_SendRepeat3Bytes(ucg, 1, c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69dc      	ldr	r4, [r3, #28]
 8002c88:	f107 030c 	add.w	r3, r7, #12
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	2113      	movs	r1, #19
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	47a0      	blx	r4
      ucg_ccs_step(ucg->arg.ccs_line+0);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3346      	adds	r3, #70	@ 0x46
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff f800 	bl	8001c9e <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3346      	adds	r3, #70	@ 0x46
 8002ca2:	330e      	adds	r3, #14
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe fffa 	bl	8001c9e <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+2);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3346      	adds	r3, #70	@ 0x46
 8002cae:	331c      	adds	r3, #28
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe fff4 	bl	8001c9e <ucg_ccs_step>
    for( i = 0; i < ucg->arg.len; i++ )
 8002cb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	82bb      	strh	r3, [r7, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002cc8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	dbcd      	blt.n	8002c6c <ucg_handle_st7735_l90se+0xd0>
    }
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fcd0 	bl	8002678 <ucg_com_SetCSLineStatus>
    return 1;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <ucg_handle_st7735_l90se+0x142>
  }
  return 0;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	0800554c 	.word	0x0800554c
 8002cec:	0800556c 	.word	0x0800556c
 8002cf0:	08005590 	.word	0x08005590
 8002cf4:	080055b4 	.word	0x080055b4

08002cf8 <ucg_dev_ic_st7735_18>:
	UCG_CS(1),					/* disable chip */
	UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_ic_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	460b      	mov	r3, r1
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8002d06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d0a:	3b0a      	subs	r3, #10
 8002d0c:	2b0b      	cmp	r3, #11
 8002d0e:	d85f      	bhi.n	8002dd0 <ucg_dev_ic_st7735_18+0xd8>
 8002d10:	a201      	add	r2, pc, #4	@ (adr r2, 8002d18 <ucg_dev_ic_st7735_18+0x20>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d49 	.word	0x08002d49
 8002d1c:	08002d63 	.word	0x08002d63
 8002d20:	08002dd1 	.word	0x08002dd1
 8002d24:	08002dd1 	.word	0x08002dd1
 8002d28:	08002dd1 	.word	0x08002dd1
 8002d2c:	08002d6f 	.word	0x08002d6f
 8002d30:	08002dd1 	.word	0x08002dd1
 8002d34:	08002dd1 	.word	0x08002dd1
 8002d38:	08002dd1 	.word	0x08002dd1
 8002d3c:	08002dd1 	.word	0x08002dd1
 8002d40:	08002d7f 	.word	0x08002d7f
 8002d44:	08002dc7 	.word	0x08002dc7
  {
    case UCG_MSG_DEV_POWER_UP:
      /* setup com interface and provide information on the clock speed */
      /* of the serial and parallel interface. Values are nanoseconds. */
	  ucg->display_offset.x = 2;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	841a      	strh	r2, [r3, #32]
	  ucg->display_offset.y = 1;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	845a      	strh	r2, [r3, #34]	@ 0x22
      return ucg_com_PowerUp(ucg, 100, 66);
 8002d54:	2242      	movs	r2, #66	@ 0x42
 8002d56:	2164      	movs	r1, #100	@ 0x64
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff fbdc 	bl	8002516 <ucg_com_PowerUp>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	e03e      	b.n	8002de0 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DEV_POWER_DOWN:
      ucg_com_SendCmdSeq(ucg, ucg_st7735_power_down_seq);
 8002d62:	4921      	ldr	r1, [pc, #132]	@ (8002de8 <ucg_dev_ic_st7735_18+0xf0>)
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff fd3d 	bl	80027e4 <ucg_com_SendCmdSeq>
      return 1;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e038      	b.n	8002de0 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2280      	movs	r2, #128	@ 0x80
 8002d72:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2280      	movs	r2, #128	@ 0x80
 8002d78:	805a      	strh	r2, [r3, #2]
      return 1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e030      	b.n	8002de0 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_PIXEL:
      if ( ucg_clip_is_pixel_visible(ucg) !=0 )
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7ff f9e7 	bl	8002152 <ucg_clip_is_pixel_visible>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01b      	beq.n	8002dc2 <ucg_dev_ic_st7735_18+0xca>
      {
	uint8_t c[3];
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_seq);	
 8002d8a:	4918      	ldr	r1, [pc, #96]	@ (8002dec <ucg_dev_ic_st7735_18+0xf4>)
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f7ff fd29 	bl	80027e4 <ucg_com_SendCmdSeq>
	c[0] = ucg->arg.pixel.rgb.color[0];
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d98:	753b      	strb	r3, [r7, #20]
	c[1] = ucg->arg.pixel.rgb.color[1];
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002da0:	757b      	strb	r3, [r7, #21]
	c[2] = ucg->arg.pixel.rgb.color[2];
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002da8:	75bb      	strb	r3, [r7, #22]
	ucg_com_SendRepeat3Bytes(ucg, 1, c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	69dc      	ldr	r4, [r3, #28]
 8002dae:	f107 0314 	add.w	r3, r7, #20
 8002db2:	2201      	movs	r2, #1
 8002db4:	2113      	movs	r1, #19
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	47a0      	blx	r4
	ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8002dba:	2101      	movs	r1, #1
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f7ff fc5b 	bl	8002678 <ucg_com_SetCSLineStatus>
      }
      return 1;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00c      	b.n	8002de0 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_L90FX:
      //ucg_handle_l90fx(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90fx(ucg);
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f7ff fe7a 	bl	8002ac0 <ucg_handle_st7735_l90fx>
      return 1;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <ucg_dev_ic_st7735_18+0xe8>
    /*
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
    */
  }
  return ucg_dev_default_cb(ucg, msg, data);  
 8002dd0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff fe41 	bl	8002a60 <ucg_dev_default_cb>
 8002dde:	4603      	mov	r3, r0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}
 8002de8:	080055d8 	.word	0x080055d8
 8002dec:	0800552c 	.word	0x0800552c

08002df0 <ucg_ext_st7735_18>:

ucg_int_t ucg_ext_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8002dfe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e02:	2b17      	cmp	r3, #23
 8002e04:	d103      	bne.n	8002e0e <ucg_ext_st7735_18+0x1e>
  {
    case UCG_MSG_DRAW_L90SE:
      //ucg_handle_l90se(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90se(ucg);
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff fec8 	bl	8002b9c <ucg_handle_st7735_l90se>
      break;
 8002e0c:	bf00      	nop
  }
  return 1;
 8002e0e:	2301      	movs	r3, #1
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <ucg_PowerDown>:

#include "ucg.h"
#include <stddef.h>

void ucg_PowerDown(ucg_t *ucg)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if ( ucg->is_power_up != 0 )
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <ucg_PowerDown+0x2c>
  {
    ucg->device_cb(ucg, UCG_MSG_DEV_POWER_DOWN, NULL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2200      	movs	r2, #0
 8002e34:	210b      	movs	r1, #11
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	4798      	blx	r3
    ucg->is_power_up = 0;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	7813      	ldrb	r3, [r2, #0]
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	7013      	strb	r3, [r2, #0]
  }
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <ucg_PowerUp>:

ucg_int_t ucg_PowerUp(ucg_t *ucg)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  ucg_int_t r;
  /* power down first. will do nothing if power is already down */
  ucg_PowerDown(ucg);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ffdf 	bl	8002e18 <ucg_PowerDown>
  /* now try to power up the display */
  r = ucg->device_cb(ucg, UCG_MSG_DEV_POWER_UP, NULL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	210a      	movs	r1, #10
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 8002e6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d004      	beq.n	8002e7c <ucg_PowerUp+0x30>
  {
    ucg->is_power_up = 1;
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	7813      	ldrb	r3, [r2, #0]
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	7013      	strb	r3, [r2, #0]
  }
  return r;
 8002e7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <ucg_SetClipBox>:

void ucg_SetClipBox(ucg_t *ucg, ucg_box_t *clip_box)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  ucg->device_cb(ucg, UCG_MSG_SET_CLIP_BOX, (void *)(clip_box));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	210c      	movs	r1, #12
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	4798      	blx	r3
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <ucg_SetMaxClipRange>:
  clip_box.size.h = h;
  ucg_SetClipBox(ucg, &clip_box);
}

void ucg_SetMaxClipRange(ucg_t *ucg)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  ucg_box_t new_clip_box;
  new_clip_box.size = ucg->dimension;
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	f107 030c 	add.w	r3, r7, #12
 8002eb4:	3202      	adds	r2, #2
 8002eb6:	6810      	ldr	r0, [r2, #0]
 8002eb8:	6018      	str	r0, [r3, #0]
  new_clip_box.ul.x = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	813b      	strh	r3, [r7, #8]
  new_clip_box.ul.y = 0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	817b      	strh	r3, [r7, #10]
  ucg_SetClipBox(ucg, &new_clip_box);
 8002ec2:	f107 0308 	add.w	r3, r7, #8
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ffdd 	bl	8002e88 <ucg_SetClipBox>
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <ucg_GetDimension>:
/* 
  Query the display dimension from the driver, reset clip window to maximum 
  new dimension
*/
void ucg_GetDimension(ucg_t *ucg)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_GET_DIMENSION, &(ucg->dimension));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	3202      	adds	r2, #2
 8002ee6:	210f      	movs	r1, #15
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
  ucg_SetMaxClipRange(ucg);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ffda 	bl	8002ea6 <ucg_SetMaxClipRange>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <ucg_DrawL90FXWithArg>:
{
  ucg->device_cb(ucg, UCG_MSG_DRAW_PIXEL, NULL);
}

void ucg_DrawL90FXWithArg(ucg_t *ucg)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_DRAW_L90FX, &(ucg->arg));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	3224      	adds	r2, #36	@ 0x24
 8002f0a:	2115      	movs	r1, #21
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <ucg_dev_st7735_18x128x128>:
  UCG_CS(1),					/* disable chip */
  UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_st7735_18x128x128(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	460b      	mov	r3, r1
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8002f26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f2a:	2b0f      	cmp	r3, #15
 8002f2c:	d021      	beq.n	8002f72 <ucg_dev_st7735_18x128x128+0x5a>
 8002f2e:	2b0f      	cmp	r3, #15
 8002f30:	dc27      	bgt.n	8002f82 <ucg_dev_st7735_18x128x128+0x6a>
 8002f32:	2b0a      	cmp	r3, #10
 8002f34:	d002      	beq.n	8002f3c <ucg_dev_st7735_18x128x128+0x24>
 8002f36:	2b0b      	cmp	r3, #11
 8002f38:	d012      	beq.n	8002f60 <ucg_dev_st7735_18x128x128+0x48>
 8002f3a:	e022      	b.n	8002f82 <ucg_dev_st7735_18x128x128+0x6a>
  {
    case UCG_MSG_DEV_POWER_UP:
      /* 1. Call to the controller procedures to setup the com interface */
      if ( ucg_dev_ic_st7735_18(ucg, msg, data) == 0 )
 8002f3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4619      	mov	r1, r3
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f7ff fed7 	bl	8002cf8 <ucg_dev_ic_st7735_18>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <ucg_dev_st7735_18x128x128+0x3c>
	return 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e01e      	b.n	8002f92 <ucg_dev_st7735_18x128x128+0x7a>

      /* 2. Send specific init sequence for this display module */
      ucg_com_SendCmdSeq(ucg, ucg_tft_128x160_st7735_init_seq);
 8002f54:	4911      	ldr	r1, [pc, #68]	@ (8002f9c <ucg_dev_st7735_18x128x128+0x84>)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff fc44 	bl	80027e4 <ucg_com_SendCmdSeq>
      
      return 1;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e018      	b.n	8002f92 <ucg_dev_st7735_18x128x128+0x7a>
      
    case UCG_MSG_DEV_POWER_DOWN:
      /* let do power down by the conroller procedures */
      return ucg_dev_ic_st7735_18(ucg, msg, data);  
 8002f60:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4619      	mov	r1, r3
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7ff fec5 	bl	8002cf8 <ucg_dev_ic_st7735_18>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	e00f      	b.n	8002f92 <ucg_dev_st7735_18x128x128+0x7a>
    
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2280      	movs	r2, #128	@ 0x80
 8002f76:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	805a      	strh	r2, [r3, #2]
      return 1;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e007      	b.n	8002f92 <ucg_dev_st7735_18x128x128+0x7a>
  }
  
  /* all other messages are handled by the controller procedures */
  return ucg_dev_ic_st7735_18(ucg, msg, data);  
 8002f82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f7ff feb4 	bl	8002cf8 <ucg_dev_ic_st7735_18>
 8002f90:	4603      	mov	r3, r0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	080055e0 	.word	0x080055e0

08002fa0 <ucg_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE;
static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	607b      	str	r3, [r7, #4]
  return ucg_pgm_read( (ucg_pgm_uint8_t *)font );  
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <ucg_font_get_word>:

static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE; 
static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	607b      	str	r3, [r7, #4]
    pos = ucg_pgm_read( (ucg_pgm_uint8_t *)font );
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	81fb      	strh	r3, [r7, #14]
    font++;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8002fe4:	89fb      	ldrh	r3, [r7, #14]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	81fb      	strh	r3, [r7, #14]
    pos += ucg_pgm_read( (ucg_pgm_uint8_t *)font);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	89fb      	ldrh	r3, [r7, #14]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	81fb      	strh	r3, [r7, #14]
    return pos;
 8002ff6:	89fb      	ldrh	r3, [r7, #14]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <ucg_read_font_info>:

/*========================================================================*/
/* new font format */
void ucg_read_font_info(ucg_font_info_t *font_info, const ucg_fntpgm_uint8_t *font)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = ucg_font_get_byte(font, 0);
 800300e:	2100      	movs	r1, #0
 8003010:	6838      	ldr	r0, [r7, #0]
 8003012:	f7ff ffc5 	bl	8002fa0 <ucg_font_get_byte>
 8003016:	4603      	mov	r3, r0
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = ucg_font_get_byte(font, 1);
 800301e:	2101      	movs	r1, #1
 8003020:	6838      	ldr	r0, [r7, #0]
 8003022:	f7ff ffbd 	bl	8002fa0 <ucg_font_get_byte>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = ucg_font_get_byte(font, 2);
 800302e:	2102      	movs	r1, #2
 8003030:	6838      	ldr	r0, [r7, #0]
 8003032:	f7ff ffb5 	bl	8002fa0 <ucg_font_get_byte>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = ucg_font_get_byte(font, 3);
 800303e:	2103      	movs	r1, #3
 8003040:	6838      	ldr	r0, [r7, #0]
 8003042:	f7ff ffad 	bl	8002fa0 <ucg_font_get_byte>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = ucg_font_get_byte(font, 4);
 800304e:	2104      	movs	r1, #4
 8003050:	6838      	ldr	r0, [r7, #0]
 8003052:	f7ff ffa5 	bl	8002fa0 <ucg_font_get_byte>
 8003056:	4603      	mov	r3, r0
 8003058:	461a      	mov	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = ucg_font_get_byte(font, 5);
 800305e:	2105      	movs	r1, #5
 8003060:	6838      	ldr	r0, [r7, #0]
 8003062:	f7ff ff9d 	bl	8002fa0 <ucg_font_get_byte>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = ucg_font_get_byte(font, 6);
 800306e:	2106      	movs	r1, #6
 8003070:	6838      	ldr	r0, [r7, #0]
 8003072:	f7ff ff95 	bl	8002fa0 <ucg_font_get_byte>
 8003076:	4603      	mov	r3, r0
 8003078:	461a      	mov	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = ucg_font_get_byte(font, 7);
 800307e:	2107      	movs	r1, #7
 8003080:	6838      	ldr	r0, [r7, #0]
 8003082:	f7ff ff8d 	bl	8002fa0 <ucg_font_get_byte>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = ucg_font_get_byte(font, 8);
 800308e:	2108      	movs	r1, #8
 8003090:	6838      	ldr	r0, [r7, #0]
 8003092:	f7ff ff85 	bl	8002fa0 <ucg_font_get_byte>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = ucg_font_get_byte(font, 9);
 800309e:	2109      	movs	r1, #9
 80030a0:	6838      	ldr	r0, [r7, #0]
 80030a2:	f7ff ff7d 	bl	8002fa0 <ucg_font_get_byte>
 80030a6:	4603      	mov	r3, r0
 80030a8:	b25a      	sxtb	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = ucg_font_get_byte(font, 10);
 80030ae:	210a      	movs	r1, #10
 80030b0:	6838      	ldr	r0, [r7, #0]
 80030b2:	f7ff ff75 	bl	8002fa0 <ucg_font_get_byte>
 80030b6:	4603      	mov	r3, r0
 80030b8:	b25a      	sxtb	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = ucg_font_get_byte(font, 11);
 80030be:	210b      	movs	r1, #11
 80030c0:	6838      	ldr	r0, [r7, #0]
 80030c2:	f7ff ff6d 	bl	8002fa0 <ucg_font_get_byte>
 80030c6:	4603      	mov	r3, r0
 80030c8:	b25a      	sxtb	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = ucg_font_get_byte(font, 12);
 80030ce:	210c      	movs	r1, #12
 80030d0:	6838      	ldr	r0, [r7, #0]
 80030d2:	f7ff ff65 	bl	8002fa0 <ucg_font_get_byte>
 80030d6:	4603      	mov	r3, r0
 80030d8:	b25a      	sxtb	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = ucg_font_get_byte(font, 13);
 80030de:	210d      	movs	r1, #13
 80030e0:	6838      	ldr	r0, [r7, #0]
 80030e2:	f7ff ff5d 	bl	8002fa0 <ucg_font_get_byte>
 80030e6:	4603      	mov	r3, r0
 80030e8:	b25a      	sxtb	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = ucg_font_get_byte(font, 14);
 80030ee:	210e      	movs	r1, #14
 80030f0:	6838      	ldr	r0, [r7, #0]
 80030f2:	f7ff ff55 	bl	8002fa0 <ucg_font_get_byte>
 80030f6:	4603      	mov	r3, r0
 80030f8:	b25a      	sxtb	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = ucg_font_get_byte(font, 15);
 80030fe:	210f      	movs	r1, #15
 8003100:	6838      	ldr	r0, [r7, #0]
 8003102:	f7ff ff4d 	bl	8002fa0 <ucg_font_get_byte>
 8003106:	4603      	mov	r3, r0
 8003108:	b25a      	sxtb	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = ucg_font_get_byte(font, 16);
 800310e:	2110      	movs	r1, #16
 8003110:	6838      	ldr	r0, [r7, #0]
 8003112:	f7ff ff45 	bl	8002fa0 <ucg_font_get_byte>
 8003116:	4603      	mov	r3, r0
 8003118:	b25a      	sxtb	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = ucg_font_get_word(font, 17);
 800311e:	2111      	movs	r1, #17
 8003120:	6838      	ldr	r0, [r7, #0]
 8003122:	f7ff ff4f 	bl	8002fc4 <ucg_font_get_word>
 8003126:	4603      	mov	r3, r0
 8003128:	461a      	mov	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = ucg_font_get_word(font, 19);  
 800312e:	2113      	movs	r1, #19
 8003130:	6838      	ldr	r0, [r7, #0]
 8003132:	f7ff ff47 	bl	8002fc4 <ucg_font_get_word>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	829a      	strh	r2, [r3, #20]
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <ucg_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t ucg_font_decode_get_unsigned_bits(ucg_font_decode_t *f, uint8_t cnt) 
{
 8003146:	b480      	push	{r7}
 8003148:	b085      	sub	sp, #20
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	460b      	mov	r3, r1
 8003150:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7b1b      	ldrb	r3, [r3, #12]
 8003156:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) );  
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	7b7b      	ldrb	r3, [r7, #13]
 8003164:	fa42 f303 	asr.w	r3, r2, r3
 8003168:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800316a:	7b7b      	ldrb	r3, [r7, #13]
 800316c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800316e:	7bba      	ldrb	r2, [r7, #14]
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	4413      	add	r3, r2
 8003174:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003176:	7bbb      	ldrb	r3, [r7, #14]
 8003178:	2b07      	cmp	r3, #7
 800317a:	d91a      	bls.n	80031b2 <ucg_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800317c:	2308      	movs	r3, #8
 800317e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003180:	7b3a      	ldrb	r2, [r7, #12]
 8003182:	7b7b      	ldrb	r3, [r7, #13]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) ) << (s);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	7b3b      	ldrb	r3, [r7, #12]
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	b25a      	sxtb	r2, r3
 80031a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b25b      	sxtb	r3, r3
 80031aa:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80031ac:	7bbb      	ldrb	r3, [r7, #14]
 80031ae:	3b08      	subs	r3, #8
 80031b0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f04f 32ff 	mov.w	r2, #4294967295
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	4013      	ands	r3, r2
 80031c6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7bba      	ldrb	r2, [r7, #14]
 80031cc:	731a      	strb	r2, [r3, #12]
  return val;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <ucg_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t ucg_font_decode_get_signed_bits(ucg_font_decode_t *f, uint8_t cnt)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt);
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	4619      	mov	r1, r3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff ffaa 	bl	8003146 <ucg_font_decode_get_unsigned_bits>
 80031f2:	4603      	mov	r3, r0
 80031f4:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8003200:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	7bbb      	ldrb	r3, [r7, #14]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	73fb      	strb	r3, [r7, #15]
  return v;
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <ucg_add_vector_y>:
}
*/

static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8003222:	b490      	push	{r4, r7}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	4604      	mov	r4, r0
 800322a:	4608      	mov	r0, r1
 800322c:	4611      	mov	r1, r2
 800322e:	461a      	mov	r2, r3
 8003230:	4623      	mov	r3, r4
 8003232:	80fb      	strh	r3, [r7, #6]
 8003234:	4603      	mov	r3, r0
 8003236:	717b      	strb	r3, [r7, #5]
 8003238:	460b      	mov	r3, r1
 800323a:	713b      	strb	r3, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d016      	beq.n	8003274 <ucg_add_vector_y+0x52>
 8003246:	2b02      	cmp	r3, #2
 8003248:	dc1c      	bgt.n	8003284 <ucg_add_vector_y+0x62>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <ucg_add_vector_y+0x32>
 800324e:	2b01      	cmp	r3, #1
 8003250:	d008      	beq.n	8003264 <ucg_add_vector_y+0x42>
 8003252:	e017      	b.n	8003284 <ucg_add_vector_y+0x62>
  {
    case 0:
      dy += y;
 8003254:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003258:	b29a      	uxth	r2, r3
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	4413      	add	r3, r2
 800325e:	b29b      	uxth	r3, r3
 8003260:	80fb      	strh	r3, [r7, #6]
      break;
 8003262:	e017      	b.n	8003294 <ucg_add_vector_y+0x72>
    case 1:
      dy += x;
 8003264:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003268:	b29a      	uxth	r2, r3
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	4413      	add	r3, r2
 800326e:	b29b      	uxth	r3, r3
 8003270:	80fb      	strh	r3, [r7, #6]
      break;
 8003272:	e00f      	b.n	8003294 <ucg_add_vector_y+0x72>
    case 2:
      dy -= y;
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800327a:	b29b      	uxth	r3, r3
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	b29b      	uxth	r3, r3
 8003280:	80fb      	strh	r3, [r7, #6]
      break;
 8003282:	e007      	b.n	8003294 <ucg_add_vector_y+0x72>
    default:
      dy -= x;
 8003284:	88fa      	ldrh	r2, [r7, #6]
 8003286:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800328a:	b29b      	uxth	r3, r3
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	b29b      	uxth	r3, r3
 8003290:	80fb      	strh	r3, [r7, #6]
      break;      
 8003292:	bf00      	nop
  }
  return dy;
 8003294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bc90      	pop	{r4, r7}
 80032a0:	4770      	bx	lr

080032a2 <ucg_add_vector_x>:

static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80032a2:	b490      	push	{r4, r7}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4604      	mov	r4, r0
 80032aa:	4608      	mov	r0, r1
 80032ac:	4611      	mov	r1, r2
 80032ae:	461a      	mov	r2, r3
 80032b0:	4623      	mov	r3, r4
 80032b2:	80fb      	strh	r3, [r7, #6]
 80032b4:	4603      	mov	r3, r0
 80032b6:	717b      	strb	r3, [r7, #5]
 80032b8:	460b      	mov	r3, r1
 80032ba:	713b      	strb	r3, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d016      	beq.n	80032f4 <ucg_add_vector_x+0x52>
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	dc1c      	bgt.n	8003304 <ucg_add_vector_x+0x62>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <ucg_add_vector_x+0x32>
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d008      	beq.n	80032e4 <ucg_add_vector_x+0x42>
 80032d2:	e017      	b.n	8003304 <ucg_add_vector_x+0x62>
  {
    case 0:
      dx += x;
 80032d4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032d8:	b29a      	uxth	r2, r3
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	4413      	add	r3, r2
 80032de:	b29b      	uxth	r3, r3
 80032e0:	80fb      	strh	r3, [r7, #6]
      break;
 80032e2:	e017      	b.n	8003314 <ucg_add_vector_x+0x72>
    case 1:
      dx -= y;
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	80fb      	strh	r3, [r7, #6]
      break;
 80032f2:	e00f      	b.n	8003314 <ucg_add_vector_x+0x72>
    case 2:
      dx -= x;
 80032f4:	88fa      	ldrh	r2, [r7, #6]
 80032f6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	b29b      	uxth	r3, r3
 8003300:	80fb      	strh	r3, [r7, #6]
      break;
 8003302:	e007      	b.n	8003314 <ucg_add_vector_x+0x72>
    default:
      dx += y;
 8003304:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003308:	b29a      	uxth	r2, r3
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	4413      	add	r3, r2
 800330e:	b29b      	uxth	r3, r3
 8003310:	80fb      	strh	r3, [r7, #6]
      break;      
 8003312:	bf00      	nop
  }
  return dx;
 8003314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bc90      	pop	{r4, r7}
 8003320:	4770      	bx	lr

08003322 <ucg_font_decode_len>:
  Called by:
    ucg_font_decode_glyph()
*/
/* optimized */
void ucg_font_decode_len(ucg_t *ucg, uint8_t len, uint8_t is_foreground)
{
 8003322:	b590      	push	{r4, r7, lr}
 8003324:	b089      	sub	sp, #36	@ 0x24
 8003326:	af02      	add	r7, sp, #8
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	460b      	mov	r3, r1
 800332c:	70fb      	strb	r3, [r7, #3]
 800332e:	4613      	mov	r3, r2
 8003330:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  ucg_int_t x, y;
  
  ucg_font_decode_t *decode = &(ucg->font_decode);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3380      	adds	r3, #128	@ 0x80
 8003336:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003342:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800334a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003352:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	7d7b      	ldrb	r3, [r7, #21]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003360:	7dfa      	ldrb	r2, [r7, #23]
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	429a      	cmp	r2, r3
 8003366:	d201      	bcs.n	800336c <ucg_font_decode_len+0x4a>
      current = cnt;
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //ucg_font_decode_draw_pixel(ucg, lx, ly, current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	889b      	ldrh	r3, [r3, #4]
 8003370:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	88db      	ldrh	r3, [r3, #6]
 8003376:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
    x = ucg_add_vector_x(x, lx, ly, decode->dir);
 8003378:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800337c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	7b9b      	ldrb	r3, [r3, #14]
 8003384:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8003388:	f7ff ff8b 	bl	80032a2 <ucg_add_vector_x>
 800338c:	4603      	mov	r3, r0
 800338e:	81bb      	strh	r3, [r7, #12]
    y = ucg_add_vector_y(y, lx, ly, decode->dir);
 8003390:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003394:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	7b9b      	ldrb	r3, [r3, #14]
 800339c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80033a0:	f7ff ff3f 	bl	8003222 <ucg_add_vector_y>
 80033a4:	4603      	mov	r3, r0
 80033a6:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80033a8:	78bb      	ldrb	r3, [r7, #2]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d010      	beq.n	80033d0 <ucg_font_decode_len+0xae>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 0);
 80033ae:	7dbb      	ldrb	r3, [r7, #22]
 80033b0:	b218      	sxth	r0, r3
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	7b9b      	ldrb	r3, [r3, #14]
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80033bc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80033c0:	2400      	movs	r4, #0
 80033c2:	9401      	str	r4, [sp, #4]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	4603      	mov	r3, r0
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fbbf 	bl	8003b4c <ucg_Draw90Line>
 80033ce:	e013      	b.n	80033f8 <ucg_font_decode_len+0xd6>
    }
    else if ( decode->is_transparent == 0 )    
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	7b5b      	ldrb	r3, [r3, #13]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10f      	bne.n	80033f8 <ucg_font_decode_len+0xd6>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 1);
 80033d8:	7dbb      	ldrb	r3, [r7, #22]
 80033da:	b218      	sxth	r0, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	7b9b      	ldrb	r3, [r3, #14]
 80033e0:	b21b      	sxth	r3, r3
 80033e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80033e6:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80033ea:	2401      	movs	r4, #1
 80033ec:	9401      	str	r4, [sp, #4]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	4603      	mov	r3, r0
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fbaa 	bl	8003b4c <ucg_Draw90Line>
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80033f8:	7dfa      	ldrb	r2, [r7, #23]
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d309      	bcc.n	8003414 <ucg_font_decode_len+0xf2>
      break;
    cnt -= rem;
 8003400:	7dfa      	ldrb	r2, [r7, #23]
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	757b      	strb	r3, [r7, #21]
    ly++;
 800340c:	7d3b      	ldrb	r3, [r7, #20]
 800340e:	3301      	adds	r3, #1
 8003410:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003412:	e79b      	b.n	800334c <ucg_font_decode_len+0x2a>
      break;
 8003414:	bf00      	nop
  }
  //ucg_font_decode_draw_pixel(ucg, x,y, cnt, is_foreground);
  lx += cnt;
 8003416:	7d7a      	ldrb	r2, [r7, #21]
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	4413      	add	r3, r2
 800341c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800341e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8003426:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	725a      	strb	r2, [r3, #9]
  
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	bd90      	pop	{r4, r7, pc}

08003436 <ucg_font_setup_decode>:

static void ucg_font_setup_decode(ucg_t *ucg, const uint8_t *glyph_data)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  ucg_font_decode_t *decode = &(ucg->font_decode);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3380      	adds	r3, #128	@ 0x80
 8003444:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	731a      	strb	r2, [r3, #12]
  
  decode->decode_ptr += 1;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	601a      	str	r2, [r3, #0]
  decode->decode_ptr += 1;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	601a      	str	r2, [r3, #0]
  
  decode->glyph_width = ucg_font_decode_get_unsigned_bits(decode, ucg->font_info.bits_per_char_width);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800346c:	4619      	mov	r1, r3
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f7ff fe69 	bl	8003146 <ucg_font_decode_get_unsigned_bits>
 8003474:	4603      	mov	r3, r0
 8003476:	b25a      	sxtb	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = ucg_font_decode_get_unsigned_bits(decode,ucg->font_info.bits_per_char_height);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8003482:	4619      	mov	r1, r3
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff fe5e 	bl	8003146 <ucg_font_decode_get_unsigned_bits>
 800348a:	4603      	mov	r3, r0
 800348c:	b25a      	sxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	72da      	strb	r2, [r3, #11]
}
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <ucg_font_decode_glyph>:
    ucg_font_decode_len()
*/
/* optimized */

int8_t ucg_font_decode_glyph(ucg_t *ucg, const uint8_t *glyph_data)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
  int8_t d;
  int8_t h;
//  ucg_scan = ucg;
//  decode = &(ucg_scan->font_decode);
    
  ucg_font_setup_decode(ucg, glyph_data);
 80034a4:	6839      	ldr	r1, [r7, #0]
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ffc5 	bl	8003436 <ucg_font_setup_decode>
  h = ucg->font_decode.glyph_height;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80034b2:	73fb      	strb	r3, [r7, #15]
  
  x = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_x);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 80034c0:	4619      	mov	r1, r3
 80034c2:	4610      	mov	r0, r2
 80034c4:	f7ff fe8a 	bl	80031dc <ucg_font_decode_get_signed_bits>
 80034c8:	4603      	mov	r3, r0
 80034ca:	73bb      	strb	r3, [r7, #14]
  y = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_y);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f7ff fe7e 	bl	80031dc <ucg_font_decode_get_signed_bits>
 80034e0:	4603      	mov	r3, r0
 80034e2:	737b      	strb	r3, [r7, #13]
  d = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_delta_x);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f7ff fe72 	bl	80031dc <ucg_font_decode_get_signed_bits>
 80034f8:	4603      	mov	r3, r0
 80034fa:	733b      	strb	r3, [r7, #12]
  
  if ( ucg->font_decode.glyph_width > 0 )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f993 308a 	ldrsb.w	r3, [r3, #138]	@ 0x8a
 8003502:	2b00      	cmp	r3, #0
 8003504:	dd69      	ble.n	80035da <ucg_font_decode_glyph+0x140>
  {
	ucg->font_decode.target_x = ucg_add_vector_x(ucg->font_decode.target_x, x, -(h+y), ucg->font_decode.dir);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	@ 0x84
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	7b7b      	ldrb	r3, [r7, #13]
 8003510:	4413      	add	r3, r2
 8003512:	b2db      	uxtb	r3, r3
 8003514:	425b      	negs	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	b25a      	sxtb	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8003520:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003524:	f7ff febd 	bl	80032a2 <ucg_add_vector_x>
 8003528:	4603      	mov	r3, r0
 800352a:	461a      	mov	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
	ucg->font_decode.target_y = ucg_add_vector_y(ucg->font_decode.target_y, x, -(h+y), ucg->font_decode.dir);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	@ 0x86
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	7b7b      	ldrb	r3, [r7, #13]
 800353c:	4413      	add	r3, r2
 800353e:	b2db      	uxtb	r3, r3
 8003540:	425b      	negs	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	b25a      	sxtb	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 800354c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003550:	f7ff fe67 	bl	8003222 <ucg_add_vector_y>
 8003554:	4603      	mov	r3, r0
 8003556:	461a      	mov	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    //ucg_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

    /* reset local x/y position */
	ucg->font_decode.x = 0;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	ucg->font_decode.y = 0;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    for(;;)
    {
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f7ff fde2 	bl	8003146 <ucg_font_decode_get_unsigned_bits>
 8003582:	4603      	mov	r3, r0
 8003584:	72fb      	strb	r3, [r7, #11]
      b = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_1);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f7ff fdd6 	bl	8003146 <ucg_font_decode_get_unsigned_bits>
 800359a:	4603      	mov	r3, r0
 800359c:	72bb      	strb	r3, [r7, #10]
      do
      {
		ucg_font_decode_len(ucg, a, 0);
 800359e:	7afb      	ldrb	r3, [r7, #11]
 80035a0:	2200      	movs	r2, #0
 80035a2:	4619      	mov	r1, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff febc 	bl	8003322 <ucg_font_decode_len>
		ucg_font_decode_len(ucg, b, 1);
 80035aa:	7abb      	ldrb	r3, [r7, #10]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4619      	mov	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff feb6 	bl	8003322 <ucg_font_decode_len>
      } while( ucg_font_decode_get_unsigned_bits(&ucg->font_decode, 1) != 0 );
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3380      	adds	r3, #128	@ 0x80
 80035ba:	2101      	movs	r1, #1
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fdc2 	bl	8003146 <ucg_font_decode_get_unsigned_bits>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ea      	bne.n	800359e <ucg_font_decode_glyph+0x104>

      if ( ucg->font_decode.y >= h )
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f993 3089 	ldrsb.w	r3, [r3, #137]	@ 0x89
 80035ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	dd00      	ble.n	80035d8 <ucg_font_decode_glyph+0x13e>
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 80035d6:	e7ca      	b.n	800356e <ucg_font_decode_glyph+0xd4>
	    break;
 80035d8:	bf00      	nop
    }
  }
  return d;
 80035da:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <ucg_font_get_glyph_data>:
    encoding: Encoding (ASCII code) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *ucg_font_get_glyph_data(ucg_t *ucg, uint8_t encoding)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b085      	sub	sp, #20
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	70fb      	strb	r3, [r7, #3]
  const uint8_t *font = ucg->font;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035f6:	60fb      	str	r3, [r7, #12]
  font += UCG_FONT_DATA_STRUCT_SIZE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3315      	adds	r3, #21
 80035fc:	60fb      	str	r3, [r7, #12]
  
  if ( encoding >= 'a' )
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	2b60      	cmp	r3, #96	@ 0x60
 8003602:	d907      	bls.n	8003614 <ucg_font_get_glyph_data+0x2e>
  {
    font += ucg->font_info.start_pos_lower_a;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800360a:	461a      	mov	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	e009      	b.n	8003628 <ucg_font_get_glyph_data+0x42>
  }
  else if ( encoding >= 'A' )
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	2b40      	cmp	r3, #64	@ 0x40
 8003618:	d906      	bls.n	8003628 <ucg_font_get_glyph_data+0x42>
  {
    font += ucg->font_info.start_pos_upper_A;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 8003620:	461a      	mov	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4413      	add	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  }
  
  for(;;)
  {
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3301      	adds	r3, #1
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00e      	beq.n	8003650 <ucg_font_get_glyph_data+0x6a>
      break;
    if ( ucg_pgm_read( (ucg_pgm_uint8_t *)font ) == encoding )
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	78fa      	ldrb	r2, [r7, #3]
 8003638:	429a      	cmp	r2, r3
 800363a:	d101      	bne.n	8003640 <ucg_font_get_glyph_data+0x5a>
    {
      return font;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	e009      	b.n	8003654 <ucg_font_get_glyph_data+0x6e>
    }
    font += ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 );
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3301      	adds	r3, #1
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 800364e:	e7eb      	b.n	8003628 <ucg_font_get_glyph_data+0x42>
      break;
 8003650:	bf00      	nop
  }
  return NULL;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <ucg_font_draw_glyph>:

ucg_int_t ucg_font_draw_glyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	4608      	mov	r0, r1
 800366a:	4611      	mov	r1, r2
 800366c:	461a      	mov	r2, r3
 800366e:	4603      	mov	r3, r0
 8003670:	817b      	strh	r3, [r7, #10]
 8003672:	460b      	mov	r3, r1
 8003674:	813b      	strh	r3, [r7, #8]
 8003676:	4613      	mov	r3, r2
 8003678:	71fb      	strb	r3, [r7, #7]
  ucg_int_t dx = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	82fb      	strh	r3, [r7, #22]
  ucg->font_decode.target_x = x;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	897a      	ldrh	r2, [r7, #10]
 8003682:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
  ucg->font_decode.target_y = y;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	893a      	ldrh	r2, [r7, #8]
 800368a:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
  //ucg->font_decode.is_transparent = is_transparent; this is already set
  ucg->font_decode.dir = dir;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	79fa      	ldrb	r2, [r7, #7]
 8003692:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  const uint8_t *glyph_data = ucg_font_get_glyph_data(ucg, encoding);
 8003696:	f897 3020 	ldrb.w	r3, [r7, #32]
 800369a:	4619      	mov	r1, r3
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f7ff ffa2 	bl	80035e6 <ucg_font_get_glyph_data>
 80036a2:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <ucg_font_draw_glyph+0x56>
  {
    dx = ucg_font_decode_glyph(ucg, glyph_data);
 80036aa:	6939      	ldr	r1, [r7, #16]
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7ff fef4 	bl	800349a <ucg_font_decode_glyph>
 80036b2:	4603      	mov	r3, r0
 80036b4:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80036b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <ucg_SetFontMode>:
    UCG_FONT_MODE_SOLID
    UCG_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void ucg_SetFontMode(ucg_t *ucg, uint8_t is_transparent)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	70fb      	strb	r3, [r7, #3]
  ucg->font_decode.is_transparent = is_transparent;		// new font procedures
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	78fa      	ldrb	r2, [r7, #3]
 80036d2:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <ucg_DrawGlyph>:

ucg_int_t ucg_DrawGlyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	4608      	mov	r0, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	461a      	mov	r2, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	817b      	strh	r3, [r7, #10]
 80036f6:	460b      	mov	r3, r1
 80036f8:	813b      	strh	r3, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	71fb      	strb	r3, [r7, #7]
  switch(dir)
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	2b03      	cmp	r3, #3
 8003702:	d837      	bhi.n	8003774 <ucg_DrawGlyph+0x90>
 8003704:	a201      	add	r2, pc, #4	@ (adr r2, 800370c <ucg_DrawGlyph+0x28>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	0800371d 	.word	0x0800371d
 8003710:	08003733 	.word	0x08003733
 8003714:	08003749 	.word	0x08003749
 8003718:	0800375f 	.word	0x0800375f
  {
    case 0:
      y += ucg->font_calc_vref(ucg);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	4798      	blx	r3
 8003724:	4603      	mov	r3, r0
 8003726:	b29a      	uxth	r2, r3
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	4413      	add	r3, r2
 800372c:	b29b      	uxth	r3, r3
 800372e:	813b      	strh	r3, [r7, #8]
      break;
 8003730:	e020      	b.n	8003774 <ucg_DrawGlyph+0x90>
    case 1:
      x -= ucg->font_calc_vref(ucg);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	4798      	blx	r3
 800373a:	4603      	mov	r3, r0
 800373c:	897a      	ldrh	r2, [r7, #10]
 800373e:	b29b      	uxth	r3, r3
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	b29b      	uxth	r3, r3
 8003744:	817b      	strh	r3, [r7, #10]
      break;
 8003746:	e015      	b.n	8003774 <ucg_DrawGlyph+0x90>
    case 2:
      y -= ucg->font_calc_vref(ucg);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	4798      	blx	r3
 8003750:	4603      	mov	r3, r0
 8003752:	893a      	ldrh	r2, [r7, #8]
 8003754:	b29b      	uxth	r3, r3
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	b29b      	uxth	r3, r3
 800375a:	813b      	strh	r3, [r7, #8]
      break;
 800375c:	e00a      	b.n	8003774 <ucg_DrawGlyph+0x90>
    case 3:
      x += ucg->font_calc_vref(ucg);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	4798      	blx	r3
 8003766:	4603      	mov	r3, r0
 8003768:	b29a      	uxth	r2, r3
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	4413      	add	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	817b      	strh	r3, [r7, #10]
      break;
 8003772:	bf00      	nop
  }
  return ucg_font_draw_glyph(ucg, x, y, dir, encoding);
 8003774:	79f8      	ldrb	r0, [r7, #7]
 8003776:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800377a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800377e:	7e3b      	ldrb	r3, [r7, #24]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	4603      	mov	r3, r0
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7ff ff6b 	bl	8003660 <ucg_font_draw_glyph>
 800378a:	4603      	mov	r3, r0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <task_drawString>:

ucg_draw_string_t ucg_draw_str;

void task_drawString(void *arg)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
	ucg_int_t delta = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	81fb      	strh	r3, [r7, #14]
	ucg_t *ucg = (ucg_t *)arg;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	60bb      	str	r3, [r7, #8]

	static uint8_t next = 0;
	switch (next)
 80037a4:	4b45      	ldr	r3, [pc, #276]	@ (80038bc <task_drawString+0x128>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <task_drawString+0x1e>
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d01e      	beq.n	80037ee <task_drawString+0x5a>
 80037b0:	e07b      	b.n	80038aa <task_drawString+0x116>
	{
		case 0:
			if (bufNumItems(&fontQueue) != 0)
 80037b2:	4843      	ldr	r0, [pc, #268]	@ (80038c0 <task_drawString+0x12c>)
 80037b4:	f000 fb79 	bl	8003eaa <bufNumItems>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d007      	beq.n	80037ce <task_drawString+0x3a>
			{
				bufDeDat(&fontQueue, (uint8_t *)&ucg_draw_str);
 80037be:	4941      	ldr	r1, [pc, #260]	@ (80038c4 <task_drawString+0x130>)
 80037c0:	483f      	ldr	r0, [pc, #252]	@ (80038c0 <task_drawString+0x12c>)
 80037c2:	f000 fc0c 	bl	8003fde <bufDeDat>
				next = 1;
 80037c6:	4b3d      	ldr	r3, [pc, #244]	@ (80038bc <task_drawString+0x128>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
					TimerStop(idTaskScanDecodeLen);
					idTaskScanDecodeLen = NO_TIMER;
				}
				next = 0;
			}
			break;
 80037cc:	e071      	b.n	80038b2 <task_drawString+0x11e>
				if (idTaskScanDecodeLen != NO_TIMER)
 80037ce:	4b3e      	ldr	r3, [pc, #248]	@ (80038c8 <task_drawString+0x134>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2bff      	cmp	r3, #255	@ 0xff
 80037d4:	d007      	beq.n	80037e6 <task_drawString+0x52>
					TimerStop(idTaskScanDecodeLen);
 80037d6:	4b3c      	ldr	r3, [pc, #240]	@ (80038c8 <task_drawString+0x134>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fd fe60 	bl	80014a0 <TimerStop>
					idTaskScanDecodeLen = NO_TIMER;
 80037e0:	4b39      	ldr	r3, [pc, #228]	@ (80038c8 <task_drawString+0x134>)
 80037e2:	22ff      	movs	r2, #255	@ 0xff
 80037e4:	701a      	strb	r2, [r3, #0]
				next = 0;
 80037e6:	4b35      	ldr	r3, [pc, #212]	@ (80038bc <task_drawString+0x128>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
			break;
 80037ec:	e061      	b.n	80038b2 <task_drawString+0x11e>

		case 1:
			if ( *ucg_draw_str.str != '\0' )
 80037ee:	4b35      	ldr	r3, [pc, #212]	@ (80038c4 <task_drawString+0x130>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d054      	beq.n	80038a2 <task_drawString+0x10e>
			{
				delta = ucg_DrawGlyph(ucg, ucg_draw_str.x, ucg_draw_str.y, ucg_draw_str.dir, (uint8_t)*ucg_draw_str.str);
 80037f8:	4b32      	ldr	r3, [pc, #200]	@ (80038c4 <task_drawString+0x130>)
 80037fa:	f9b3 1000 	ldrsh.w	r1, [r3]
 80037fe:	4b31      	ldr	r3, [pc, #196]	@ (80038c4 <task_drawString+0x130>)
 8003800:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003804:	4b2f      	ldr	r3, [pc, #188]	@ (80038c4 <task_drawString+0x130>)
 8003806:	7918      	ldrb	r0, [r3, #4]
 8003808:	4b2e      	ldr	r3, [pc, #184]	@ (80038c4 <task_drawString+0x130>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	4603      	mov	r3, r0
 8003812:	68b8      	ldr	r0, [r7, #8]
 8003814:	f7ff ff66 	bl	80036e4 <ucg_DrawGlyph>
 8003818:	4603      	mov	r3, r0
 800381a:	81fb      	strh	r3, [r7, #14]

				switch (ucg_draw_str.dir)
 800381c:	4b29      	ldr	r3, [pc, #164]	@ (80038c4 <task_drawString+0x130>)
 800381e:	791b      	ldrb	r3, [r3, #4]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d837      	bhi.n	8003894 <task_drawString+0x100>
 8003824:	a201      	add	r2, pc, #4	@ (adr r2, 800382c <task_drawString+0x98>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	0800383d 	.word	0x0800383d
 8003830:	08003853 	.word	0x08003853
 8003834:	08003869 	.word	0x08003869
 8003838:	0800387f 	.word	0x0800387f
				{
					case 0:
						ucg_draw_str.x += delta;
 800383c:	4b21      	ldr	r3, [pc, #132]	@ (80038c4 <task_drawString+0x130>)
 800383e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003842:	b29a      	uxth	r2, r3
 8003844:	89fb      	ldrh	r3, [r7, #14]
 8003846:	4413      	add	r3, r2
 8003848:	b29b      	uxth	r3, r3
 800384a:	b21a      	sxth	r2, r3
 800384c:	4b1d      	ldr	r3, [pc, #116]	@ (80038c4 <task_drawString+0x130>)
 800384e:	801a      	strh	r2, [r3, #0]
						break;
 8003850:	e021      	b.n	8003896 <task_drawString+0x102>

					case 1:
						ucg_draw_str.y += delta;
 8003852:	4b1c      	ldr	r3, [pc, #112]	@ (80038c4 <task_drawString+0x130>)
 8003854:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003858:	b29a      	uxth	r2, r3
 800385a:	89fb      	ldrh	r3, [r7, #14]
 800385c:	4413      	add	r3, r2
 800385e:	b29b      	uxth	r3, r3
 8003860:	b21a      	sxth	r2, r3
 8003862:	4b18      	ldr	r3, [pc, #96]	@ (80038c4 <task_drawString+0x130>)
 8003864:	805a      	strh	r2, [r3, #2]
						break;
 8003866:	e016      	b.n	8003896 <task_drawString+0x102>

					case 2:
						ucg_draw_str.x -= delta;
 8003868:	4b16      	ldr	r3, [pc, #88]	@ (80038c4 <task_drawString+0x130>)
 800386a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800386e:	b29a      	uxth	r2, r3
 8003870:	89fb      	ldrh	r3, [r7, #14]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	b29b      	uxth	r3, r3
 8003876:	b21a      	sxth	r2, r3
 8003878:	4b12      	ldr	r3, [pc, #72]	@ (80038c4 <task_drawString+0x130>)
 800387a:	801a      	strh	r2, [r3, #0]
						break;
 800387c:	e00b      	b.n	8003896 <task_drawString+0x102>

					case 3:
						ucg_draw_str.y -= delta;
 800387e:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <task_drawString+0x130>)
 8003880:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003884:	b29a      	uxth	r2, r3
 8003886:	89fb      	ldrh	r3, [r7, #14]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	b29b      	uxth	r3, r3
 800388c:	b21a      	sxth	r2, r3
 800388e:	4b0d      	ldr	r3, [pc, #52]	@ (80038c4 <task_drawString+0x130>)
 8003890:	805a      	strh	r2, [r3, #2]
						break;
 8003892:	e000      	b.n	8003896 <task_drawString+0x102>

					default:
						break;
 8003894:	bf00      	nop
				}

				ucg_draw_str.str++;
 8003896:	4b0b      	ldr	r3, [pc, #44]	@ (80038c4 <task_drawString+0x130>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	3301      	adds	r3, #1
 800389c:	4a09      	ldr	r2, [pc, #36]	@ (80038c4 <task_drawString+0x130>)
 800389e:	6093      	str	r3, [r2, #8]
			}
			else
			{
				next = 0;
			}
			break;
 80038a0:	e007      	b.n	80038b2 <task_drawString+0x11e>
				next = 0;
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <task_drawString+0x128>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
			break;
 80038a8:	e003      	b.n	80038b2 <task_drawString+0x11e>

		default:
			next = 0;
 80038aa:	4b04      	ldr	r3, [pc, #16]	@ (80038bc <task_drawString+0x128>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
			break;
 80038b0:	bf00      	nop
	}
}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200012f0 	.word	0x200012f0
 80038c0:	200002d4 	.word	0x200002d4
 80038c4:	200012e4 	.word	0x200012e4
 80038c8:	20000010 	.word	0x20000010

080038cc <ucg_DrawString>:

ucg_int_t ucg_DrawString(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, const char *str)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	@ 0x28
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	4608      	mov	r0, r1
 80038d6:	4611      	mov	r1, r2
 80038d8:	461a      	mov	r2, r3
 80038da:	4603      	mov	r3, r0
 80038dc:	817b      	strh	r3, [r7, #10]
 80038de:	460b      	mov	r3, r1
 80038e0:	813b      	strh	r3, [r7, #8]
 80038e2:	4613      	mov	r3, r2
 80038e4:	71fb      	strb	r3, [r7, #7]
	ucg_int_t sum = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	83fb      	strh	r3, [r7, #30]
	ucg_draw_string_t drawStr;

	drawStr.x = x;
 80038ea:	897b      	ldrh	r3, [r7, #10]
 80038ec:	823b      	strh	r3, [r7, #16]
	drawStr.y = y;
 80038ee:	893b      	ldrh	r3, [r7, #8]
 80038f0:	827b      	strh	r3, [r7, #18]
	drawStr.dir = dir;
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	753b      	strb	r3, [r7, #20]
    drawStr.str = (char *)str;
 80038f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f8:	61bb      	str	r3, [r7, #24]

	bufEnDat(&fontQueue, (uint8_t *)&drawStr);
 80038fa:	f107 0310 	add.w	r3, r7, #16
 80038fe:	4619      	mov	r1, r3
 8003900:	480c      	ldr	r0, [pc, #48]	@ (8003934 <ucg_DrawString+0x68>)
 8003902:	f000 fb1d 	bl	8003f40 <bufEnDat>

	/* decode glyph */
	if (idTaskScanDecodeLen == NO_TIMER)
 8003906:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <ucg_DrawString+0x6c>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2bff      	cmp	r3, #255	@ 0xff
 800390c:	d10b      	bne.n	8003926 <ucg_DrawString+0x5a>
	{
		idTaskScanDecodeLen = TimerStart("ucg_DrawString", 30, TIMER_REPEAT_FOREVER, task_drawString, ucg);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <ucg_DrawString+0x70>)
 8003914:	22ff      	movs	r2, #255	@ 0xff
 8003916:	211e      	movs	r1, #30
 8003918:	4809      	ldr	r0, [pc, #36]	@ (8003940 <ucg_DrawString+0x74>)
 800391a:	f7fd fd5f 	bl	80013dc <TimerStart>
 800391e:	4603      	mov	r3, r0
 8003920:	461a      	mov	r2, r3
 8003922:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <ucg_DrawString+0x6c>)
 8003924:	701a      	strb	r2, [r3, #0]
	}

	return sum;
 8003926:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3720      	adds	r7, #32
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	200002d4 	.word	0x200002d4
 8003938:	20000010 	.word	0x20000010
 800393c:	08003795 	.word	0x08003795
 8003940:	080054fc 	.word	0x080054fc

08003944 <ucg_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void ucg_UpdateRefHeight(ucg_t *ucg)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if ( ucg->font == NULL )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003950:	2b00      	cmp	r3, #0
 8003952:	d05d      	beq.n	8003a10 <ucg_UpdateRefHeight+0xcc>
    return;
  ucg->font_ref_ascent = ucg->font_info.ascent_A;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f993 209d 	ldrsb.w	r2, [r3, #157]	@ 0x9d
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
  ucg->font_ref_descent = ucg->font_info.descent_g;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f993 209e 	ldrsb.w	r2, [r3, #158]	@ 0x9e
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
  if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_TEXT )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 8003972:	2b00      	cmp	r3, #0
 8003974:	d04d      	beq.n	8003a12 <ucg_UpdateRefHeight+0xce>
  {
  }
  else if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_XTEXT )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 800397c:	2b01      	cmp	r3, #1
 800397e:	d11c      	bne.n	80039ba <ucg_UpdateRefHeight+0x76>
  {
    if ( ucg->font_ref_ascent < ucg->font_info.ascent_para )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f993 20ac 	ldrsb.w	r2, [r3, #172]	@ 0xac
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f993 309f 	ldrsb.w	r3, [r3, #159]	@ 0x9f
 800398c:	429a      	cmp	r2, r3
 800398e:	da05      	bge.n	800399c <ucg_UpdateRefHeight+0x58>
      ucg->font_ref_ascent = ucg->font_info.ascent_para;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f993 209f 	ldrsb.w	r2, [r3, #159]	@ 0x9f
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    if ( ucg->font_ref_descent > ucg->font_info.descent_para )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f993 20ad 	ldrsb.w	r2, [r3, #173]	@ 0xad
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f993 30a0 	ldrsb.w	r3, [r3, #160]	@ 0xa0
 80039a8:	429a      	cmp	r2, r3
 80039aa:	dd32      	ble.n	8003a12 <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.descent_para;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f993 20a0 	ldrsb.w	r2, [r3, #160]	@ 0xa0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
 80039b8:	e02b      	b.n	8003a12 <ucg_UpdateRefHeight+0xce>
  }
  else
  {
    if ( ucg->font_ref_ascent < ucg->font_info.max_char_height+ucg->font_info.y_offset )
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f993 30ac 	ldrsb.w	r3, [r3, #172]	@ 0xac
 80039c0:	461a      	mov	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f993 309a 	ldrsb.w	r3, [r3, #154]	@ 0x9a
 80039c8:	4619      	mov	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f993 309c 	ldrsb.w	r3, [r3, #156]	@ 0x9c
 80039d0:	440b      	add	r3, r1
 80039d2:	429a      	cmp	r2, r3
 80039d4:	da0d      	bge.n	80039f2 <ucg_UpdateRefHeight+0xae>
      ucg->font_ref_ascent = ucg->font_info.max_char_height+ucg->font_info.y_offset;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f993 309a 	ldrsb.w	r3, [r3, #154]	@ 0x9a
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f993 309c 	ldrsb.w	r3, [r3, #156]	@ 0x9c
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	b25a      	sxtb	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    if ( ucg->font_ref_descent > ucg->font_info.y_offset )
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f993 20ad 	ldrsb.w	r2, [r3, #173]	@ 0xad
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f993 309c 	ldrsb.w	r3, [r3, #156]	@ 0x9c
 80039fe:	429a      	cmp	r2, r3
 8003a00:	dd07      	ble.n	8003a12 <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.y_offset;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f993 209c 	ldrsb.w	r2, [r3, #156]	@ 0x9c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
 8003a0e:	e000      	b.n	8003a12 <ucg_UpdateRefHeight+0xce>
    return;
 8003a10:	bf00      	nop
  }  
}
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <ucg_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

ucg_int_t ucg_font_calc_vref_font(ucg_t *ucg)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  return 0;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <ucg_SetFontPosBaseline>:

void ucg_SetFontPosBaseline(ucg_t *ucg)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  ucg->font_calc_vref = ucg_font_calc_vref_font;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a04      	ldr	r2, [pc, #16]	@ (8003a50 <ucg_SetFontPosBaseline+0x1c>)
 8003a40:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	08003a1d 	.word	0x08003a1d

08003a54 <ucg_SetFont>:
}

/*===============================================*/

void ucg_SetFont(ucg_t *ucg, const ucg_fntpgm_uint8_t  *font)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  if ( ucg->font != font )
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d012      	beq.n	8003a8e <ucg_SetFont+0x3a>
  {
    ucg->font = font;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	679a      	str	r2, [r3, #120]	@ 0x78
    ucg_read_font_info(&(ucg->font_info), font);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3390      	adds	r3, #144	@ 0x90
 8003a72:	6839      	ldr	r1, [r7, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fac5 	bl	8003004 <ucg_read_font_info>
    ucg_UpdateRefHeight(ucg);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff ff62 	bl	8003944 <ucg_UpdateRefHeight>
    //ucg_SetFontPosBaseline(ucg);

    // Init queue font
    bufInit(pQueueFont, &fontQueue, sizeof(ucg_draw_string_t), SIZE_QUEUE_DATA_FONT);
 8003a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a84:	220c      	movs	r2, #12
 8003a86:	4904      	ldr	r1, [pc, #16]	@ (8003a98 <ucg_SetFont+0x44>)
 8003a88:	4804      	ldr	r0, [pc, #16]	@ (8003a9c <ucg_SetFont+0x48>)
 8003a8a:	f000 f9f3 	bl	8003e74 <bufInit>
  }
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	200002d4 	.word	0x200002d4
 8003a9c:	200002e4 	.word	0x200002e4

08003aa0 <ucg_init_struct>:
uint8_t global_SREG_backup;		// used by the atomic macros
#endif


void ucg_init_struct(ucg_t *ucg)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  //memset(ucg, 0, sizeof(ucg_t));
  ucg->is_power_up = 0;
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	7813      	ldrb	r3, [r2, #0]
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	7013      	strb	r3, [r2, #0]
  ucg->rotate_chain_device_cb = 0;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	611a      	str	r2, [r3, #16]
  ucg->arg.scale = 1;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	865a      	strh	r2, [r3, #50]	@ 0x32
  //ucg->display_offset.x = 0;
  //ucg->display_offset.y = 0;
  ucg->font = 0;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	679a      	str	r2, [r3, #120]	@ 0x78
  //ucg->font_mode = UCG_FONT_MODE_NONE;   Old font procedures
  ucg->font_decode.is_transparent = 1;  // new font procedures
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  
  ucg->com_initial_change_sent = 0;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
  ucg->com_status = 0;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
  ucg->com_cfg_cd = 0;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <ucg_Init>:


ucg_int_t ucg_Init(ucg_t *ucg, ucg_dev_fnptr device_cb, ucg_dev_fnptr ext_cb, ucg_com_fnptr com_cb)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  ucg_int_t r;
  ucg_init_struct(ucg);
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f7ff ffce 	bl	8003aa0 <ucg_init_struct>
  if ( ext_cb == (ucg_dev_fnptr)0 )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <ucg_Init+0x22>
    ucg->ext_cb = ucg_ext_none;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8003b48 <ucg_Init+0x58>)
 8003b0e:	60da      	str	r2, [r3, #12]
 8003b10:	e002      	b.n	8003b18 <ucg_Init+0x28>
 else 
    ucg->ext_cb = ext_cb;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	60da      	str	r2, [r3, #12]
  ucg->device_cb = device_cb;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	609a      	str	r2, [r3, #8]
  ucg->com_cb = com_cb;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	61da      	str	r2, [r3, #28]
  ucg_SetFontPosBaseline(ucg);
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f7ff ff85 	bl	8003a34 <ucg_SetFontPosBaseline>
  r = ucg_PowerUp(ucg);
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff f98e 	bl	8002e4c <ucg_PowerUp>
 8003b30:	4603      	mov	r3, r0
 8003b32:	82fb      	strh	r3, [r7, #22]
  ucg_GetDimension(ucg);
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff f9ce 	bl	8002ed6 <ucg_GetDimension>
  return r;
 8003b3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	08002aa5 	.word	0x08002aa5

08003b4c <ucg_Draw90Line>:
*/

#include "ucg.h"

void ucg_Draw90Line(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len, ucg_int_t dir, ucg_int_t col_idx)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	817b      	strh	r3, [r7, #10]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	813b      	strh	r3, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  ucg->arg.pixel.rgb.color[0] = ucg->arg.rgb[col_idx].color[0];
 8003b66:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	440b      	add	r3, r1
 8003b74:	333a      	adds	r3, #58	@ 0x3a
 8003b76:	781a      	ldrb	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  ucg->arg.pixel.rgb.color[1] = ucg->arg.rgb[col_idx].color[1];
 8003b7e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003b82:	68f9      	ldr	r1, [r7, #12]
 8003b84:	4613      	mov	r3, r2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	4413      	add	r3, r2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	333b      	adds	r3, #59	@ 0x3b
 8003b8e:	781a      	ldrb	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  ucg->arg.pixel.rgb.color[2] = ucg->arg.rgb[col_idx].color[2];
 8003b96:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003b9a:	68f9      	ldr	r1, [r7, #12]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4413      	add	r3, r2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	333c      	adds	r3, #60	@ 0x3c
 8003ba6:	781a      	ldrb	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  ucg->arg.pixel.pos.x = x;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	897a      	ldrh	r2, [r7, #10]
 8003bb2:	849a      	strh	r2, [r3, #36]	@ 0x24
  ucg->arg.pixel.pos.y = y;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	893a      	ldrh	r2, [r7, #8]
 8003bb8:	84da      	strh	r2, [r3, #38]	@ 0x26
  ucg->arg.len = len;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  ucg->arg.dir = dir;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8b3a      	ldrh	r2, [r7, #24]
 8003bc4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  ucg_DrawL90FXWithArg(ucg);
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f7ff f997 	bl	8002efa <ucg_DrawL90FXWithArg>
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ucg_DrawHLine>:

void ucg_DrawHLine(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	817b      	strh	r3, [r7, #10]
 8003be6:	460b      	mov	r3, r1
 8003be8:	813b      	strh	r3, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  ucg_Draw90Line(ucg, x, y, len, 0, 0);
 8003bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bf2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003bf6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	9001      	str	r0, [sp, #4]
 8003bfe:	2000      	movs	r0, #0
 8003c00:	9000      	str	r0, [sp, #0]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f7ff ffa2 	bl	8003b4c <ucg_Draw90Line>
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <ucg_DrawVLine>:

void ucg_DrawVLine(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	4608      	mov	r0, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4603      	mov	r3, r0
 8003c20:	817b      	strh	r3, [r7, #10]
 8003c22:	460b      	mov	r3, r1
 8003c24:	813b      	strh	r3, [r7, #8]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  ucg_Draw90Line(ucg, x, y, len, 1, 0);
 8003c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c2e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003c32:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003c36:	2000      	movs	r0, #0
 8003c38:	9001      	str	r0, [sp, #4]
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	9000      	str	r0, [sp, #0]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f7ff ff84 	bl	8003b4c <ucg_Draw90Line>
}
 8003c44:	bf00      	nop
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <ucg_SetColor>:
*/

#include "ucg.h"

void ucg_SetColor(ucg_t *ucg, uint8_t idx, uint8_t r, uint8_t g, uint8_t b)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	4608      	mov	r0, r1
 8003c56:	4611      	mov	r1, r2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	70fb      	strb	r3, [r7, #3]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	70bb      	strb	r3, [r7, #2]
 8003c62:	4613      	mov	r3, r2
 8003c64:	707b      	strb	r3, [r7, #1]
  //ucg->arg.pixel.rgb.color[0] = r;
  //ucg->arg.pixel.rgb.color[1] = g;
  //ucg->arg.pixel.rgb.color[2] = b;
  ucg->arg.rgb[idx].color[0] = r;
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4413      	add	r3, r2
 8003c70:	440b      	add	r3, r1
 8003c72:	333a      	adds	r3, #58	@ 0x3a
 8003c74:	78ba      	ldrb	r2, [r7, #2]
 8003c76:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[1] = g;
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	4413      	add	r3, r2
 8003c82:	440b      	add	r3, r1
 8003c84:	333b      	adds	r3, #59	@ 0x3b
 8003c86:	787a      	ldrb	r2, [r7, #1]
 8003c88:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[2] = b;
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4413      	add	r3, r2
 8003c94:	440b      	add	r3, r1
 8003c96:	333c      	adds	r3, #60	@ 0x3c
 8003c98:	7c3a      	ldrb	r2, [r7, #16]
 8003c9a:	701a      	strb	r2, [r3, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <ucg_UndoRotate>:
#include "ucg.h"
#include <assert.h>

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_UndoRotate(ucg_t *ucg)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  if ( ucg->rotate_chain_device_cb != NULL )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d006      	beq.n	8003cc6 <ucg_UndoRotate+0x1e>
  {
    ucg->device_cb = ucg->rotate_chain_device_cb;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
    ucg->rotate_chain_device_cb = NULL;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
  }
  ucg_GetDimension(ucg);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff f905 	bl	8002ed6 <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff f8ea 	bl	8002ea6 <ucg_SetMaxClipRange>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <ucg_rotate_180_xy>:

/*================================================*/
/* 180 degree */

static void ucg_rotate_180_xy(ucg_t *ucg, ucg_xy_t *xy)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
    ucg_int_t x, y;
    y = ucg->rotate_dimension.h;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8adb      	ldrh	r3, [r3, #22]
 8003ce8:	81fb      	strh	r3, [r7, #14]
    y -= xy->y;
 8003cea:	89fa      	ldrh	r2, [r7, #14]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	81fb      	strh	r3, [r7, #14]
    y--;
 8003cfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	81fb      	strh	r3, [r7, #14]
    xy->y = y;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	89fa      	ldrh	r2, [r7, #14]
 8003d0a:	805a      	strh	r2, [r3, #2]
  
    x = ucg->rotate_dimension.w;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	8a9b      	ldrh	r3, [r3, #20]
 8003d10:	81bb      	strh	r3, [r7, #12]
    x -= xy->x;
 8003d12:	89ba      	ldrh	r2, [r7, #12]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	81bb      	strh	r3, [r7, #12]
    x--;
 8003d22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	81bb      	strh	r3, [r7, #12]
    xy->x = x;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	89ba      	ldrh	r2, [r7, #12]
 8003d32:	801a      	strh	r2, [r3, #0]
  
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <ucg_dev_rotate180>:

ucg_int_t ucg_dev_rotate180(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8003d4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003d52:	3b0c      	subs	r3, #12
 8003d54:	2b0b      	cmp	r3, #11
 8003d56:	d866      	bhi.n	8003e26 <ucg_dev_rotate180+0xe6>
 8003d58:	a201      	add	r2, pc, #4	@ (adr r2, 8003d60 <ucg_dev_rotate180+0x20>)
 8003d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5e:	bf00      	nop
 8003d60:	08003daf 	.word	0x08003daf
 8003d64:	08003e27 	.word	0x08003e27
 8003d68:	08003e27 	.word	0x08003e27
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	08003e27 	.word	0x08003e27
 8003d74:	08003e27 	.word	0x08003e27
 8003d78:	08003e27 	.word	0x08003e27
 8003d7c:	08003e27 	.word	0x08003e27
 8003d80:	08003df7 	.word	0x08003df7
 8003d84:	08003df7 	.word	0x08003df7
 8003d88:	08003e27 	.word	0x08003e27
 8003d8c:	08003df7 	.word	0x08003df7
  {
    case UCG_MSG_GET_DIMENSION:
      ucg->rotate_chain_device_cb(ucg, msg, &(ucg->rotate_dimension)); 
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	3214      	adds	r2, #20
 8003d98:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	4798      	blx	r3
      *((ucg_wh_t *)data) = (ucg->rotate_dimension);
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3314      	adds	r3, #20
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	6010      	str	r0, [r2, #0]
      return 1;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e043      	b.n	8003e36 <ucg_dev_rotate180+0xf6>
    case UCG_MSG_SET_CLIP_BOX:
      /* calculate and rotate lower right point of the clip box */
      ((ucg_box_t * )data)->ul.y += ((ucg_box_t * )data)->size.h-1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	b21a      	sxth	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	805a      	strh	r2, [r3, #2]
      ((ucg_box_t * )data)->ul.x += ((ucg_box_t * )data)->size.w-1;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	4413      	add	r3, r2
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	b21a      	sxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	801a      	strh	r2, [r3, #0]
      ucg_rotate_180_xy(ucg, &(((ucg_box_t * )data)->ul)); 
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4619      	mov	r1, r3
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7ff ff73 	bl	8003cda <ucg_rotate_180_xy>
      /* box dimensions are the same */
      break;
 8003df4:	e017      	b.n	8003e26 <ucg_dev_rotate180+0xe6>
#ifdef UCG_MSG_DRAW_L90BF
    case UCG_MSG_DRAW_L90BF:
#endif /* UCG_MSG_DRAW_L90BF */
    case UCG_MSG_DRAW_L90SE:
    //case UCG_MSG_DRAW_L90RL:
      ucg->arg.dir+=2;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3302      	adds	r3, #2
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	b21a      	sxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	85da      	strh	r2, [r3, #46]	@ 0x2e
      ucg->arg.dir&=3;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	b21a      	sxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	85da      	strh	r2, [r3, #46]	@ 0x2e
      ucg_rotate_180_xy(ucg, &(ucg->arg.pixel.pos)); 
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3324      	adds	r3, #36	@ 0x24
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f7ff ff5b 	bl	8003cda <ucg_rotate_180_xy>
      break;
 8003e24:	bf00      	nop
  }
  return ucg->rotate_chain_device_cb(ucg, msg, data);  
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	4798      	blx	r3
 8003e34:	4603      	mov	r3, r0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop

08003e40 <ucg_SetRotate180>:

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_SetRotate180(ucg_t *ucg)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  ucg_UndoRotate(ucg);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff2d 	bl	8003ca8 <ucg_UndoRotate>
  ucg->rotate_chain_device_cb = ucg->device_cb;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	611a      	str	r2, [r3, #16]
  ucg->device_cb = ucg_dev_rotate180;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a05      	ldr	r2, [pc, #20]	@ (8003e70 <ucg_SetRotate180+0x30>)
 8003e5a:	609a      	str	r2, [r3, #8]
  ucg_GetDimension(ucg);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff f83a 	bl	8002ed6 <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff f81f 	bl	8002ea6 <ucg_SetMaxClipRange>
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	08003d41 	.word	0x08003d41

08003e74 <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	460b      	mov	r3, r1
 8003e84:	71fb      	strb	r3, [r7, #7]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80bb      	strh	r3, [r7, #4]
    pQueue->wSize = numberOfElement;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	88ba      	ldrh	r2, [r7, #4]
 8003e8e:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	79fa      	ldrb	r2, [r7, #7]
 8003e94:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 8003e9c:	68b8      	ldr	r0, [r7, #8]
 8003e9e:	f000 f836 	bl	8003f0e <bufFlush>
}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <bufNumItems>:
 * @return The number of items in the ring buffer
 */
uint16_t
bufNumItems(
	buffqueue_p pQueue
) {
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
    return pQueue->wCountEle;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	885b      	ldrh	r3, [r3, #2]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	885a      	ldrh	r2, [r3, #2]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	bf2c      	ite	cs
 8003ed6:	2301      	movcs	r3, #1
 8003ed8:	2300      	movcc	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	88da      	ldrh	r2, [r3, #6]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	891b      	ldrh	r3, [r3, #8]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68d8      	ldr	r0, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	2100      	movs	r1, #0
 8003f34:	f000 f898 	bl	8004068 <memsetl>
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f4a:	b672      	cpsid	i
}
 8003f4c:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
 8003f52:	e021      	b.n	8003f98 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	88c9      	ldrh	r1, [r1, #6]
 8003f62:	440b      	add	r3, r1
 8003f64:	7812      	ldrb	r2, [r2, #0]
 8003f66:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	88db      	ldrh	r3, [r3, #6]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	b21a      	sxth	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	b21b      	sxth	r3, r3
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b21b      	sxth	r3, r3
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	885b      	ldrh	r3, [r3, #2]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	3301      	adds	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	791b      	ldrb	r3, [r3, #4]
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3d8      	bcc.n	8003f54 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff ff8d 	bl	8003ec2 <bufIsFull>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d010      	beq.n	8003fd0 <bufEnDat+0x90>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	891b      	ldrh	r3, [r3, #8]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	7912      	ldrb	r2, [r2, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	b21a      	sxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	b21b      	sxth	r3, r3
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	b21b      	sxth	r3, r3
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fd0:	b662      	cpsie	i
}
 8003fd2:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fe8:	b672      	cpsid	i
}
 8003fea:	bf00      	nop
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ff7b 	bl	8003ee8 <bufIsEmpty>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d006      	beq.n	8004006 <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ffe:	b662      	cpsie	i
}
 8004000:	bf00      	nop
        __enable_irq();
        return ERR_BUF_EMPTY;
 8004002:	2302      	movs	r3, #2
 8004004:	e02c      	b.n	8004060 <bufDeDat+0x82>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8004006:	2300      	movs	r3, #0
 8004008:	73fb      	strb	r3, [r7, #15]
 800400a:	e021      	b.n	8004050 <bufDeDat+0x72>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	8912      	ldrh	r2, [r2, #8]
 8004014:	441a      	add	r2, r3
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	440b      	add	r3, r1
 800401c:	7812      	ldrb	r2, [r2, #0]
 800401e:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	891b      	ldrh	r3, [r3, #8]
 8004024:	3301      	adds	r3, #1
 8004026:	b29b      	uxth	r3, r3
 8004028:	b21a      	sxth	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	3b01      	subs	r3, #1
 8004030:	b29b      	uxth	r3, r3
 8004032:	b21b      	sxth	r3, r3
 8004034:	4013      	ands	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	885b      	ldrh	r3, [r3, #2]
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	3301      	adds	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	791b      	ldrb	r3, [r3, #4]
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	429a      	cmp	r2, r3
 8004058:	d3d8      	bcc.n	800400c <bufDeDat+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 800405a:	b662      	cpsie	i
}
 800405c:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	70fb      	strb	r3, [r7, #3]
 8004074:	4613      	mov	r3, r2
 8004076:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8004078:	e004      	b.n	8004084 <memsetl+0x1c>
        *dst++ = value;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8004084:	883b      	ldrh	r3, [r7, #0]
 8004086:	1e5a      	subs	r2, r3, #1
 8004088:	803a      	strh	r2, [r7, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f5      	bne.n	800407a <memsetl+0x12>
    }    
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <srand>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4b10      	ldr	r3, [pc, #64]	@ (80040e0 <srand+0x44>)
 80040a0:	681d      	ldr	r5, [r3, #0]
 80040a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80040a4:	4604      	mov	r4, r0
 80040a6:	b9b3      	cbnz	r3, 80040d6 <srand+0x3a>
 80040a8:	2018      	movs	r0, #24
 80040aa:	f000 fa83 	bl	80045b4 <malloc>
 80040ae:	4602      	mov	r2, r0
 80040b0:	6328      	str	r0, [r5, #48]	@ 0x30
 80040b2:	b920      	cbnz	r0, 80040be <srand+0x22>
 80040b4:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <srand+0x48>)
 80040b6:	480c      	ldr	r0, [pc, #48]	@ (80040e8 <srand+0x4c>)
 80040b8:	2146      	movs	r1, #70	@ 0x46
 80040ba:	f000 fa13 	bl	80044e4 <__assert_func>
 80040be:	490b      	ldr	r1, [pc, #44]	@ (80040ec <srand+0x50>)
 80040c0:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <srand+0x54>)
 80040c2:	e9c0 1300 	strd	r1, r3, [r0]
 80040c6:	4b0b      	ldr	r3, [pc, #44]	@ (80040f4 <srand+0x58>)
 80040c8:	6083      	str	r3, [r0, #8]
 80040ca:	230b      	movs	r3, #11
 80040cc:	8183      	strh	r3, [r0, #12]
 80040ce:	2100      	movs	r1, #0
 80040d0:	2001      	movs	r0, #1
 80040d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80040d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80040d8:	2200      	movs	r2, #0
 80040da:	611c      	str	r4, [r3, #16]
 80040dc:	615a      	str	r2, [r3, #20]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	20000020 	.word	0x20000020
 80040e4:	080076b0 	.word	0x080076b0
 80040e8:	080076c7 	.word	0x080076c7
 80040ec:	abcd330e 	.word	0xabcd330e
 80040f0:	e66d1234 	.word	0xe66d1234
 80040f4:	0005deec 	.word	0x0005deec

080040f8 <rand>:
 80040f8:	4b16      	ldr	r3, [pc, #88]	@ (8004154 <rand+0x5c>)
 80040fa:	b510      	push	{r4, lr}
 80040fc:	681c      	ldr	r4, [r3, #0]
 80040fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004100:	b9b3      	cbnz	r3, 8004130 <rand+0x38>
 8004102:	2018      	movs	r0, #24
 8004104:	f000 fa56 	bl	80045b4 <malloc>
 8004108:	4602      	mov	r2, r0
 800410a:	6320      	str	r0, [r4, #48]	@ 0x30
 800410c:	b920      	cbnz	r0, 8004118 <rand+0x20>
 800410e:	4b12      	ldr	r3, [pc, #72]	@ (8004158 <rand+0x60>)
 8004110:	4812      	ldr	r0, [pc, #72]	@ (800415c <rand+0x64>)
 8004112:	2152      	movs	r1, #82	@ 0x52
 8004114:	f000 f9e6 	bl	80044e4 <__assert_func>
 8004118:	4911      	ldr	r1, [pc, #68]	@ (8004160 <rand+0x68>)
 800411a:	4b12      	ldr	r3, [pc, #72]	@ (8004164 <rand+0x6c>)
 800411c:	e9c0 1300 	strd	r1, r3, [r0]
 8004120:	4b11      	ldr	r3, [pc, #68]	@ (8004168 <rand+0x70>)
 8004122:	6083      	str	r3, [r0, #8]
 8004124:	230b      	movs	r3, #11
 8004126:	8183      	strh	r3, [r0, #12]
 8004128:	2100      	movs	r1, #0
 800412a:	2001      	movs	r0, #1
 800412c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004130:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004132:	480e      	ldr	r0, [pc, #56]	@ (800416c <rand+0x74>)
 8004134:	690b      	ldr	r3, [r1, #16]
 8004136:	694c      	ldr	r4, [r1, #20]
 8004138:	4a0d      	ldr	r2, [pc, #52]	@ (8004170 <rand+0x78>)
 800413a:	4358      	muls	r0, r3
 800413c:	fb02 0004 	mla	r0, r2, r4, r0
 8004140:	fba3 3202 	umull	r3, r2, r3, r2
 8004144:	3301      	adds	r3, #1
 8004146:	eb40 0002 	adc.w	r0, r0, r2
 800414a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800414e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004152:	bd10      	pop	{r4, pc}
 8004154:	20000020 	.word	0x20000020
 8004158:	080076b0 	.word	0x080076b0
 800415c:	080076c7 	.word	0x080076c7
 8004160:	abcd330e 	.word	0xabcd330e
 8004164:	e66d1234 	.word	0xe66d1234
 8004168:	0005deec 	.word	0x0005deec
 800416c:	5851f42d 	.word	0x5851f42d
 8004170:	4c957f2d 	.word	0x4c957f2d

08004174 <std>:
 8004174:	2300      	movs	r3, #0
 8004176:	b510      	push	{r4, lr}
 8004178:	4604      	mov	r4, r0
 800417a:	e9c0 3300 	strd	r3, r3, [r0]
 800417e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004182:	6083      	str	r3, [r0, #8]
 8004184:	8181      	strh	r1, [r0, #12]
 8004186:	6643      	str	r3, [r0, #100]	@ 0x64
 8004188:	81c2      	strh	r2, [r0, #14]
 800418a:	6183      	str	r3, [r0, #24]
 800418c:	4619      	mov	r1, r3
 800418e:	2208      	movs	r2, #8
 8004190:	305c      	adds	r0, #92	@ 0x5c
 8004192:	f000 f92a 	bl	80043ea <memset>
 8004196:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <std+0x58>)
 8004198:	6263      	str	r3, [r4, #36]	@ 0x24
 800419a:	4b0d      	ldr	r3, [pc, #52]	@ (80041d0 <std+0x5c>)
 800419c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800419e:	4b0d      	ldr	r3, [pc, #52]	@ (80041d4 <std+0x60>)
 80041a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041a2:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <std+0x64>)
 80041a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <std+0x68>)
 80041a8:	6224      	str	r4, [r4, #32]
 80041aa:	429c      	cmp	r4, r3
 80041ac:	d006      	beq.n	80041bc <std+0x48>
 80041ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041b2:	4294      	cmp	r4, r2
 80041b4:	d002      	beq.n	80041bc <std+0x48>
 80041b6:	33d0      	adds	r3, #208	@ 0xd0
 80041b8:	429c      	cmp	r4, r3
 80041ba:	d105      	bne.n	80041c8 <std+0x54>
 80041bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041c4:	f000 b98a 	b.w	80044dc <__retarget_lock_init_recursive>
 80041c8:	bd10      	pop	{r4, pc}
 80041ca:	bf00      	nop
 80041cc:	08004365 	.word	0x08004365
 80041d0:	08004387 	.word	0x08004387
 80041d4:	080043bf 	.word	0x080043bf
 80041d8:	080043e3 	.word	0x080043e3
 80041dc:	200012f4 	.word	0x200012f4

080041e0 <stdio_exit_handler>:
 80041e0:	4a02      	ldr	r2, [pc, #8]	@ (80041ec <stdio_exit_handler+0xc>)
 80041e2:	4903      	ldr	r1, [pc, #12]	@ (80041f0 <stdio_exit_handler+0x10>)
 80041e4:	4803      	ldr	r0, [pc, #12]	@ (80041f4 <stdio_exit_handler+0x14>)
 80041e6:	f000 b869 	b.w	80042bc <_fwalk_sglue>
 80041ea:	bf00      	nop
 80041ec:	20000014 	.word	0x20000014
 80041f0:	08004df1 	.word	0x08004df1
 80041f4:	20000024 	.word	0x20000024

080041f8 <cleanup_stdio>:
 80041f8:	6841      	ldr	r1, [r0, #4]
 80041fa:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <cleanup_stdio+0x34>)
 80041fc:	4299      	cmp	r1, r3
 80041fe:	b510      	push	{r4, lr}
 8004200:	4604      	mov	r4, r0
 8004202:	d001      	beq.n	8004208 <cleanup_stdio+0x10>
 8004204:	f000 fdf4 	bl	8004df0 <_fflush_r>
 8004208:	68a1      	ldr	r1, [r4, #8]
 800420a:	4b09      	ldr	r3, [pc, #36]	@ (8004230 <cleanup_stdio+0x38>)
 800420c:	4299      	cmp	r1, r3
 800420e:	d002      	beq.n	8004216 <cleanup_stdio+0x1e>
 8004210:	4620      	mov	r0, r4
 8004212:	f000 fded 	bl	8004df0 <_fflush_r>
 8004216:	68e1      	ldr	r1, [r4, #12]
 8004218:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <cleanup_stdio+0x3c>)
 800421a:	4299      	cmp	r1, r3
 800421c:	d004      	beq.n	8004228 <cleanup_stdio+0x30>
 800421e:	4620      	mov	r0, r4
 8004220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004224:	f000 bde4 	b.w	8004df0 <_fflush_r>
 8004228:	bd10      	pop	{r4, pc}
 800422a:	bf00      	nop
 800422c:	200012f4 	.word	0x200012f4
 8004230:	2000135c 	.word	0x2000135c
 8004234:	200013c4 	.word	0x200013c4

08004238 <global_stdio_init.part.0>:
 8004238:	b510      	push	{r4, lr}
 800423a:	4b0b      	ldr	r3, [pc, #44]	@ (8004268 <global_stdio_init.part.0+0x30>)
 800423c:	4c0b      	ldr	r4, [pc, #44]	@ (800426c <global_stdio_init.part.0+0x34>)
 800423e:	4a0c      	ldr	r2, [pc, #48]	@ (8004270 <global_stdio_init.part.0+0x38>)
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	4620      	mov	r0, r4
 8004244:	2200      	movs	r2, #0
 8004246:	2104      	movs	r1, #4
 8004248:	f7ff ff94 	bl	8004174 <std>
 800424c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004250:	2201      	movs	r2, #1
 8004252:	2109      	movs	r1, #9
 8004254:	f7ff ff8e 	bl	8004174 <std>
 8004258:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800425c:	2202      	movs	r2, #2
 800425e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004262:	2112      	movs	r1, #18
 8004264:	f7ff bf86 	b.w	8004174 <std>
 8004268:	2000142c 	.word	0x2000142c
 800426c:	200012f4 	.word	0x200012f4
 8004270:	080041e1 	.word	0x080041e1

08004274 <__sfp_lock_acquire>:
 8004274:	4801      	ldr	r0, [pc, #4]	@ (800427c <__sfp_lock_acquire+0x8>)
 8004276:	f000 b932 	b.w	80044de <__retarget_lock_acquire_recursive>
 800427a:	bf00      	nop
 800427c:	20001435 	.word	0x20001435

08004280 <__sfp_lock_release>:
 8004280:	4801      	ldr	r0, [pc, #4]	@ (8004288 <__sfp_lock_release+0x8>)
 8004282:	f000 b92d 	b.w	80044e0 <__retarget_lock_release_recursive>
 8004286:	bf00      	nop
 8004288:	20001435 	.word	0x20001435

0800428c <__sinit>:
 800428c:	b510      	push	{r4, lr}
 800428e:	4604      	mov	r4, r0
 8004290:	f7ff fff0 	bl	8004274 <__sfp_lock_acquire>
 8004294:	6a23      	ldr	r3, [r4, #32]
 8004296:	b11b      	cbz	r3, 80042a0 <__sinit+0x14>
 8004298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800429c:	f7ff bff0 	b.w	8004280 <__sfp_lock_release>
 80042a0:	4b04      	ldr	r3, [pc, #16]	@ (80042b4 <__sinit+0x28>)
 80042a2:	6223      	str	r3, [r4, #32]
 80042a4:	4b04      	ldr	r3, [pc, #16]	@ (80042b8 <__sinit+0x2c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f5      	bne.n	8004298 <__sinit+0xc>
 80042ac:	f7ff ffc4 	bl	8004238 <global_stdio_init.part.0>
 80042b0:	e7f2      	b.n	8004298 <__sinit+0xc>
 80042b2:	bf00      	nop
 80042b4:	080041f9 	.word	0x080041f9
 80042b8:	2000142c 	.word	0x2000142c

080042bc <_fwalk_sglue>:
 80042bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c0:	4607      	mov	r7, r0
 80042c2:	4688      	mov	r8, r1
 80042c4:	4614      	mov	r4, r2
 80042c6:	2600      	movs	r6, #0
 80042c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042cc:	f1b9 0901 	subs.w	r9, r9, #1
 80042d0:	d505      	bpl.n	80042de <_fwalk_sglue+0x22>
 80042d2:	6824      	ldr	r4, [r4, #0]
 80042d4:	2c00      	cmp	r4, #0
 80042d6:	d1f7      	bne.n	80042c8 <_fwalk_sglue+0xc>
 80042d8:	4630      	mov	r0, r6
 80042da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042de:	89ab      	ldrh	r3, [r5, #12]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d907      	bls.n	80042f4 <_fwalk_sglue+0x38>
 80042e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042e8:	3301      	adds	r3, #1
 80042ea:	d003      	beq.n	80042f4 <_fwalk_sglue+0x38>
 80042ec:	4629      	mov	r1, r5
 80042ee:	4638      	mov	r0, r7
 80042f0:	47c0      	blx	r8
 80042f2:	4306      	orrs	r6, r0
 80042f4:	3568      	adds	r5, #104	@ 0x68
 80042f6:	e7e9      	b.n	80042cc <_fwalk_sglue+0x10>

080042f8 <sniprintf>:
 80042f8:	b40c      	push	{r2, r3}
 80042fa:	b530      	push	{r4, r5, lr}
 80042fc:	4b18      	ldr	r3, [pc, #96]	@ (8004360 <sniprintf+0x68>)
 80042fe:	1e0c      	subs	r4, r1, #0
 8004300:	681d      	ldr	r5, [r3, #0]
 8004302:	b09d      	sub	sp, #116	@ 0x74
 8004304:	da08      	bge.n	8004318 <sniprintf+0x20>
 8004306:	238b      	movs	r3, #139	@ 0x8b
 8004308:	602b      	str	r3, [r5, #0]
 800430a:	f04f 30ff 	mov.w	r0, #4294967295
 800430e:	b01d      	add	sp, #116	@ 0x74
 8004310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004314:	b002      	add	sp, #8
 8004316:	4770      	bx	lr
 8004318:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800431c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004326:	bf14      	ite	ne
 8004328:	f104 33ff 	addne.w	r3, r4, #4294967295
 800432c:	4623      	moveq	r3, r4
 800432e:	9304      	str	r3, [sp, #16]
 8004330:	9307      	str	r3, [sp, #28]
 8004332:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004336:	9002      	str	r0, [sp, #8]
 8004338:	9006      	str	r0, [sp, #24]
 800433a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800433e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004340:	ab21      	add	r3, sp, #132	@ 0x84
 8004342:	a902      	add	r1, sp, #8
 8004344:	4628      	mov	r0, r5
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	f000 fa46 	bl	80047d8 <_svfiprintf_r>
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	bfbc      	itt	lt
 8004350:	238b      	movlt	r3, #139	@ 0x8b
 8004352:	602b      	strlt	r3, [r5, #0]
 8004354:	2c00      	cmp	r4, #0
 8004356:	d0da      	beq.n	800430e <sniprintf+0x16>
 8004358:	9b02      	ldr	r3, [sp, #8]
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	e7d6      	b.n	800430e <sniprintf+0x16>
 8004360:	20000020 	.word	0x20000020

08004364 <__sread>:
 8004364:	b510      	push	{r4, lr}
 8004366:	460c      	mov	r4, r1
 8004368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800436c:	f000 f868 	bl	8004440 <_read_r>
 8004370:	2800      	cmp	r0, #0
 8004372:	bfab      	itete	ge
 8004374:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004376:	89a3      	ldrhlt	r3, [r4, #12]
 8004378:	181b      	addge	r3, r3, r0
 800437a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800437e:	bfac      	ite	ge
 8004380:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004382:	81a3      	strhlt	r3, [r4, #12]
 8004384:	bd10      	pop	{r4, pc}

08004386 <__swrite>:
 8004386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800438a:	461f      	mov	r7, r3
 800438c:	898b      	ldrh	r3, [r1, #12]
 800438e:	05db      	lsls	r3, r3, #23
 8004390:	4605      	mov	r5, r0
 8004392:	460c      	mov	r4, r1
 8004394:	4616      	mov	r6, r2
 8004396:	d505      	bpl.n	80043a4 <__swrite+0x1e>
 8004398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800439c:	2302      	movs	r3, #2
 800439e:	2200      	movs	r2, #0
 80043a0:	f000 f83c 	bl	800441c <_lseek_r>
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043ae:	81a3      	strh	r3, [r4, #12]
 80043b0:	4632      	mov	r2, r6
 80043b2:	463b      	mov	r3, r7
 80043b4:	4628      	mov	r0, r5
 80043b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ba:	f000 b853 	b.w	8004464 <_write_r>

080043be <__sseek>:
 80043be:	b510      	push	{r4, lr}
 80043c0:	460c      	mov	r4, r1
 80043c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c6:	f000 f829 	bl	800441c <_lseek_r>
 80043ca:	1c43      	adds	r3, r0, #1
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	bf15      	itete	ne
 80043d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043da:	81a3      	strheq	r3, [r4, #12]
 80043dc:	bf18      	it	ne
 80043de:	81a3      	strhne	r3, [r4, #12]
 80043e0:	bd10      	pop	{r4, pc}

080043e2 <__sclose>:
 80043e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e6:	f000 b809 	b.w	80043fc <_close_r>

080043ea <memset>:
 80043ea:	4402      	add	r2, r0
 80043ec:	4603      	mov	r3, r0
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d100      	bne.n	80043f4 <memset+0xa>
 80043f2:	4770      	bx	lr
 80043f4:	f803 1b01 	strb.w	r1, [r3], #1
 80043f8:	e7f9      	b.n	80043ee <memset+0x4>
	...

080043fc <_close_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4d06      	ldr	r5, [pc, #24]	@ (8004418 <_close_r+0x1c>)
 8004400:	2300      	movs	r3, #0
 8004402:	4604      	mov	r4, r0
 8004404:	4608      	mov	r0, r1
 8004406:	602b      	str	r3, [r5, #0]
 8004408:	f7fc fb94 	bl	8000b34 <_close>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d102      	bne.n	8004416 <_close_r+0x1a>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	b103      	cbz	r3, 8004416 <_close_r+0x1a>
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	bd38      	pop	{r3, r4, r5, pc}
 8004418:	20001430 	.word	0x20001430

0800441c <_lseek_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	4d07      	ldr	r5, [pc, #28]	@ (800443c <_lseek_r+0x20>)
 8004420:	4604      	mov	r4, r0
 8004422:	4608      	mov	r0, r1
 8004424:	4611      	mov	r1, r2
 8004426:	2200      	movs	r2, #0
 8004428:	602a      	str	r2, [r5, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	f7fc fba9 	bl	8000b82 <_lseek>
 8004430:	1c43      	adds	r3, r0, #1
 8004432:	d102      	bne.n	800443a <_lseek_r+0x1e>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	b103      	cbz	r3, 800443a <_lseek_r+0x1e>
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	20001430 	.word	0x20001430

08004440 <_read_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	4d07      	ldr	r5, [pc, #28]	@ (8004460 <_read_r+0x20>)
 8004444:	4604      	mov	r4, r0
 8004446:	4608      	mov	r0, r1
 8004448:	4611      	mov	r1, r2
 800444a:	2200      	movs	r2, #0
 800444c:	602a      	str	r2, [r5, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	f7fc fb37 	bl	8000ac2 <_read>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	d102      	bne.n	800445e <_read_r+0x1e>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	b103      	cbz	r3, 800445e <_read_r+0x1e>
 800445c:	6023      	str	r3, [r4, #0]
 800445e:	bd38      	pop	{r3, r4, r5, pc}
 8004460:	20001430 	.word	0x20001430

08004464 <_write_r>:
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	4d07      	ldr	r5, [pc, #28]	@ (8004484 <_write_r+0x20>)
 8004468:	4604      	mov	r4, r0
 800446a:	4608      	mov	r0, r1
 800446c:	4611      	mov	r1, r2
 800446e:	2200      	movs	r2, #0
 8004470:	602a      	str	r2, [r5, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	f7fc fb42 	bl	8000afc <_write>
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	d102      	bne.n	8004482 <_write_r+0x1e>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	b103      	cbz	r3, 8004482 <_write_r+0x1e>
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	bd38      	pop	{r3, r4, r5, pc}
 8004484:	20001430 	.word	0x20001430

08004488 <__errno>:
 8004488:	4b01      	ldr	r3, [pc, #4]	@ (8004490 <__errno+0x8>)
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20000020 	.word	0x20000020

08004494 <__libc_init_array>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	4d0d      	ldr	r5, [pc, #52]	@ (80044cc <__libc_init_array+0x38>)
 8004498:	4c0d      	ldr	r4, [pc, #52]	@ (80044d0 <__libc_init_array+0x3c>)
 800449a:	1b64      	subs	r4, r4, r5
 800449c:	10a4      	asrs	r4, r4, #2
 800449e:	2600      	movs	r6, #0
 80044a0:	42a6      	cmp	r6, r4
 80044a2:	d109      	bne.n	80044b8 <__libc_init_array+0x24>
 80044a4:	4d0b      	ldr	r5, [pc, #44]	@ (80044d4 <__libc_init_array+0x40>)
 80044a6:	4c0c      	ldr	r4, [pc, #48]	@ (80044d8 <__libc_init_array+0x44>)
 80044a8:	f000 ffee 	bl	8005488 <_init>
 80044ac:	1b64      	subs	r4, r4, r5
 80044ae:	10a4      	asrs	r4, r4, #2
 80044b0:	2600      	movs	r6, #0
 80044b2:	42a6      	cmp	r6, r4
 80044b4:	d105      	bne.n	80044c2 <__libc_init_array+0x2e>
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044bc:	4798      	blx	r3
 80044be:	3601      	adds	r6, #1
 80044c0:	e7ee      	b.n	80044a0 <__libc_init_array+0xc>
 80044c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c6:	4798      	blx	r3
 80044c8:	3601      	adds	r6, #1
 80044ca:	e7f2      	b.n	80044b2 <__libc_init_array+0x1e>
 80044cc:	08007798 	.word	0x08007798
 80044d0:	08007798 	.word	0x08007798
 80044d4:	08007798 	.word	0x08007798
 80044d8:	0800779c 	.word	0x0800779c

080044dc <__retarget_lock_init_recursive>:
 80044dc:	4770      	bx	lr

080044de <__retarget_lock_acquire_recursive>:
 80044de:	4770      	bx	lr

080044e0 <__retarget_lock_release_recursive>:
 80044e0:	4770      	bx	lr
	...

080044e4 <__assert_func>:
 80044e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80044e6:	4614      	mov	r4, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b09      	ldr	r3, [pc, #36]	@ (8004510 <__assert_func+0x2c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4605      	mov	r5, r0
 80044f0:	68d8      	ldr	r0, [r3, #12]
 80044f2:	b14c      	cbz	r4, 8004508 <__assert_func+0x24>
 80044f4:	4b07      	ldr	r3, [pc, #28]	@ (8004514 <__assert_func+0x30>)
 80044f6:	9100      	str	r1, [sp, #0]
 80044f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80044fc:	4906      	ldr	r1, [pc, #24]	@ (8004518 <__assert_func+0x34>)
 80044fe:	462b      	mov	r3, r5
 8004500:	f000 fc9e 	bl	8004e40 <fiprintf>
 8004504:	f000 fce6 	bl	8004ed4 <abort>
 8004508:	4b04      	ldr	r3, [pc, #16]	@ (800451c <__assert_func+0x38>)
 800450a:	461c      	mov	r4, r3
 800450c:	e7f3      	b.n	80044f6 <__assert_func+0x12>
 800450e:	bf00      	nop
 8004510:	20000020 	.word	0x20000020
 8004514:	0800771f 	.word	0x0800771f
 8004518:	0800772c 	.word	0x0800772c
 800451c:	0800775a 	.word	0x0800775a

08004520 <_free_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4605      	mov	r5, r0
 8004524:	2900      	cmp	r1, #0
 8004526:	d041      	beq.n	80045ac <_free_r+0x8c>
 8004528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800452c:	1f0c      	subs	r4, r1, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	bfb8      	it	lt
 8004532:	18e4      	addlt	r4, r4, r3
 8004534:	f000 f8e8 	bl	8004708 <__malloc_lock>
 8004538:	4a1d      	ldr	r2, [pc, #116]	@ (80045b0 <_free_r+0x90>)
 800453a:	6813      	ldr	r3, [r2, #0]
 800453c:	b933      	cbnz	r3, 800454c <_free_r+0x2c>
 800453e:	6063      	str	r3, [r4, #4]
 8004540:	6014      	str	r4, [r2, #0]
 8004542:	4628      	mov	r0, r5
 8004544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004548:	f000 b8e4 	b.w	8004714 <__malloc_unlock>
 800454c:	42a3      	cmp	r3, r4
 800454e:	d908      	bls.n	8004562 <_free_r+0x42>
 8004550:	6820      	ldr	r0, [r4, #0]
 8004552:	1821      	adds	r1, r4, r0
 8004554:	428b      	cmp	r3, r1
 8004556:	bf01      	itttt	eq
 8004558:	6819      	ldreq	r1, [r3, #0]
 800455a:	685b      	ldreq	r3, [r3, #4]
 800455c:	1809      	addeq	r1, r1, r0
 800455e:	6021      	streq	r1, [r4, #0]
 8004560:	e7ed      	b.n	800453e <_free_r+0x1e>
 8004562:	461a      	mov	r2, r3
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	b10b      	cbz	r3, 800456c <_free_r+0x4c>
 8004568:	42a3      	cmp	r3, r4
 800456a:	d9fa      	bls.n	8004562 <_free_r+0x42>
 800456c:	6811      	ldr	r1, [r2, #0]
 800456e:	1850      	adds	r0, r2, r1
 8004570:	42a0      	cmp	r0, r4
 8004572:	d10b      	bne.n	800458c <_free_r+0x6c>
 8004574:	6820      	ldr	r0, [r4, #0]
 8004576:	4401      	add	r1, r0
 8004578:	1850      	adds	r0, r2, r1
 800457a:	4283      	cmp	r3, r0
 800457c:	6011      	str	r1, [r2, #0]
 800457e:	d1e0      	bne.n	8004542 <_free_r+0x22>
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	6053      	str	r3, [r2, #4]
 8004586:	4408      	add	r0, r1
 8004588:	6010      	str	r0, [r2, #0]
 800458a:	e7da      	b.n	8004542 <_free_r+0x22>
 800458c:	d902      	bls.n	8004594 <_free_r+0x74>
 800458e:	230c      	movs	r3, #12
 8004590:	602b      	str	r3, [r5, #0]
 8004592:	e7d6      	b.n	8004542 <_free_r+0x22>
 8004594:	6820      	ldr	r0, [r4, #0]
 8004596:	1821      	adds	r1, r4, r0
 8004598:	428b      	cmp	r3, r1
 800459a:	bf04      	itt	eq
 800459c:	6819      	ldreq	r1, [r3, #0]
 800459e:	685b      	ldreq	r3, [r3, #4]
 80045a0:	6063      	str	r3, [r4, #4]
 80045a2:	bf04      	itt	eq
 80045a4:	1809      	addeq	r1, r1, r0
 80045a6:	6021      	streq	r1, [r4, #0]
 80045a8:	6054      	str	r4, [r2, #4]
 80045aa:	e7ca      	b.n	8004542 <_free_r+0x22>
 80045ac:	bd38      	pop	{r3, r4, r5, pc}
 80045ae:	bf00      	nop
 80045b0:	2000143c 	.word	0x2000143c

080045b4 <malloc>:
 80045b4:	4b02      	ldr	r3, [pc, #8]	@ (80045c0 <malloc+0xc>)
 80045b6:	4601      	mov	r1, r0
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	f000 b825 	b.w	8004608 <_malloc_r>
 80045be:	bf00      	nop
 80045c0:	20000020 	.word	0x20000020

080045c4 <sbrk_aligned>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	4e0f      	ldr	r6, [pc, #60]	@ (8004604 <sbrk_aligned+0x40>)
 80045c8:	460c      	mov	r4, r1
 80045ca:	6831      	ldr	r1, [r6, #0]
 80045cc:	4605      	mov	r5, r0
 80045ce:	b911      	cbnz	r1, 80045d6 <sbrk_aligned+0x12>
 80045d0:	f000 fc62 	bl	8004e98 <_sbrk_r>
 80045d4:	6030      	str	r0, [r6, #0]
 80045d6:	4621      	mov	r1, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 fc5d 	bl	8004e98 <_sbrk_r>
 80045de:	1c43      	adds	r3, r0, #1
 80045e0:	d103      	bne.n	80045ea <sbrk_aligned+0x26>
 80045e2:	f04f 34ff 	mov.w	r4, #4294967295
 80045e6:	4620      	mov	r0, r4
 80045e8:	bd70      	pop	{r4, r5, r6, pc}
 80045ea:	1cc4      	adds	r4, r0, #3
 80045ec:	f024 0403 	bic.w	r4, r4, #3
 80045f0:	42a0      	cmp	r0, r4
 80045f2:	d0f8      	beq.n	80045e6 <sbrk_aligned+0x22>
 80045f4:	1a21      	subs	r1, r4, r0
 80045f6:	4628      	mov	r0, r5
 80045f8:	f000 fc4e 	bl	8004e98 <_sbrk_r>
 80045fc:	3001      	adds	r0, #1
 80045fe:	d1f2      	bne.n	80045e6 <sbrk_aligned+0x22>
 8004600:	e7ef      	b.n	80045e2 <sbrk_aligned+0x1e>
 8004602:	bf00      	nop
 8004604:	20001438 	.word	0x20001438

08004608 <_malloc_r>:
 8004608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800460c:	1ccd      	adds	r5, r1, #3
 800460e:	f025 0503 	bic.w	r5, r5, #3
 8004612:	3508      	adds	r5, #8
 8004614:	2d0c      	cmp	r5, #12
 8004616:	bf38      	it	cc
 8004618:	250c      	movcc	r5, #12
 800461a:	2d00      	cmp	r5, #0
 800461c:	4606      	mov	r6, r0
 800461e:	db01      	blt.n	8004624 <_malloc_r+0x1c>
 8004620:	42a9      	cmp	r1, r5
 8004622:	d904      	bls.n	800462e <_malloc_r+0x26>
 8004624:	230c      	movs	r3, #12
 8004626:	6033      	str	r3, [r6, #0]
 8004628:	2000      	movs	r0, #0
 800462a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800462e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004704 <_malloc_r+0xfc>
 8004632:	f000 f869 	bl	8004708 <__malloc_lock>
 8004636:	f8d8 3000 	ldr.w	r3, [r8]
 800463a:	461c      	mov	r4, r3
 800463c:	bb44      	cbnz	r4, 8004690 <_malloc_r+0x88>
 800463e:	4629      	mov	r1, r5
 8004640:	4630      	mov	r0, r6
 8004642:	f7ff ffbf 	bl	80045c4 <sbrk_aligned>
 8004646:	1c43      	adds	r3, r0, #1
 8004648:	4604      	mov	r4, r0
 800464a:	d158      	bne.n	80046fe <_malloc_r+0xf6>
 800464c:	f8d8 4000 	ldr.w	r4, [r8]
 8004650:	4627      	mov	r7, r4
 8004652:	2f00      	cmp	r7, #0
 8004654:	d143      	bne.n	80046de <_malloc_r+0xd6>
 8004656:	2c00      	cmp	r4, #0
 8004658:	d04b      	beq.n	80046f2 <_malloc_r+0xea>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	4639      	mov	r1, r7
 800465e:	4630      	mov	r0, r6
 8004660:	eb04 0903 	add.w	r9, r4, r3
 8004664:	f000 fc18 	bl	8004e98 <_sbrk_r>
 8004668:	4581      	cmp	r9, r0
 800466a:	d142      	bne.n	80046f2 <_malloc_r+0xea>
 800466c:	6821      	ldr	r1, [r4, #0]
 800466e:	1a6d      	subs	r5, r5, r1
 8004670:	4629      	mov	r1, r5
 8004672:	4630      	mov	r0, r6
 8004674:	f7ff ffa6 	bl	80045c4 <sbrk_aligned>
 8004678:	3001      	adds	r0, #1
 800467a:	d03a      	beq.n	80046f2 <_malloc_r+0xea>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	442b      	add	r3, r5
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	f8d8 3000 	ldr.w	r3, [r8]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	bb62      	cbnz	r2, 80046e4 <_malloc_r+0xdc>
 800468a:	f8c8 7000 	str.w	r7, [r8]
 800468e:	e00f      	b.n	80046b0 <_malloc_r+0xa8>
 8004690:	6822      	ldr	r2, [r4, #0]
 8004692:	1b52      	subs	r2, r2, r5
 8004694:	d420      	bmi.n	80046d8 <_malloc_r+0xd0>
 8004696:	2a0b      	cmp	r2, #11
 8004698:	d917      	bls.n	80046ca <_malloc_r+0xc2>
 800469a:	1961      	adds	r1, r4, r5
 800469c:	42a3      	cmp	r3, r4
 800469e:	6025      	str	r5, [r4, #0]
 80046a0:	bf18      	it	ne
 80046a2:	6059      	strne	r1, [r3, #4]
 80046a4:	6863      	ldr	r3, [r4, #4]
 80046a6:	bf08      	it	eq
 80046a8:	f8c8 1000 	streq.w	r1, [r8]
 80046ac:	5162      	str	r2, [r4, r5]
 80046ae:	604b      	str	r3, [r1, #4]
 80046b0:	4630      	mov	r0, r6
 80046b2:	f000 f82f 	bl	8004714 <__malloc_unlock>
 80046b6:	f104 000b 	add.w	r0, r4, #11
 80046ba:	1d23      	adds	r3, r4, #4
 80046bc:	f020 0007 	bic.w	r0, r0, #7
 80046c0:	1ac2      	subs	r2, r0, r3
 80046c2:	bf1c      	itt	ne
 80046c4:	1a1b      	subne	r3, r3, r0
 80046c6:	50a3      	strne	r3, [r4, r2]
 80046c8:	e7af      	b.n	800462a <_malloc_r+0x22>
 80046ca:	6862      	ldr	r2, [r4, #4]
 80046cc:	42a3      	cmp	r3, r4
 80046ce:	bf0c      	ite	eq
 80046d0:	f8c8 2000 	streq.w	r2, [r8]
 80046d4:	605a      	strne	r2, [r3, #4]
 80046d6:	e7eb      	b.n	80046b0 <_malloc_r+0xa8>
 80046d8:	4623      	mov	r3, r4
 80046da:	6864      	ldr	r4, [r4, #4]
 80046dc:	e7ae      	b.n	800463c <_malloc_r+0x34>
 80046de:	463c      	mov	r4, r7
 80046e0:	687f      	ldr	r7, [r7, #4]
 80046e2:	e7b6      	b.n	8004652 <_malloc_r+0x4a>
 80046e4:	461a      	mov	r2, r3
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	42a3      	cmp	r3, r4
 80046ea:	d1fb      	bne.n	80046e4 <_malloc_r+0xdc>
 80046ec:	2300      	movs	r3, #0
 80046ee:	6053      	str	r3, [r2, #4]
 80046f0:	e7de      	b.n	80046b0 <_malloc_r+0xa8>
 80046f2:	230c      	movs	r3, #12
 80046f4:	6033      	str	r3, [r6, #0]
 80046f6:	4630      	mov	r0, r6
 80046f8:	f000 f80c 	bl	8004714 <__malloc_unlock>
 80046fc:	e794      	b.n	8004628 <_malloc_r+0x20>
 80046fe:	6005      	str	r5, [r0, #0]
 8004700:	e7d6      	b.n	80046b0 <_malloc_r+0xa8>
 8004702:	bf00      	nop
 8004704:	2000143c 	.word	0x2000143c

08004708 <__malloc_lock>:
 8004708:	4801      	ldr	r0, [pc, #4]	@ (8004710 <__malloc_lock+0x8>)
 800470a:	f7ff bee8 	b.w	80044de <__retarget_lock_acquire_recursive>
 800470e:	bf00      	nop
 8004710:	20001434 	.word	0x20001434

08004714 <__malloc_unlock>:
 8004714:	4801      	ldr	r0, [pc, #4]	@ (800471c <__malloc_unlock+0x8>)
 8004716:	f7ff bee3 	b.w	80044e0 <__retarget_lock_release_recursive>
 800471a:	bf00      	nop
 800471c:	20001434 	.word	0x20001434

08004720 <__ssputs_r>:
 8004720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004724:	688e      	ldr	r6, [r1, #8]
 8004726:	461f      	mov	r7, r3
 8004728:	42be      	cmp	r6, r7
 800472a:	680b      	ldr	r3, [r1, #0]
 800472c:	4682      	mov	sl, r0
 800472e:	460c      	mov	r4, r1
 8004730:	4690      	mov	r8, r2
 8004732:	d82d      	bhi.n	8004790 <__ssputs_r+0x70>
 8004734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004738:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800473c:	d026      	beq.n	800478c <__ssputs_r+0x6c>
 800473e:	6965      	ldr	r5, [r4, #20]
 8004740:	6909      	ldr	r1, [r1, #16]
 8004742:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004746:	eba3 0901 	sub.w	r9, r3, r1
 800474a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800474e:	1c7b      	adds	r3, r7, #1
 8004750:	444b      	add	r3, r9
 8004752:	106d      	asrs	r5, r5, #1
 8004754:	429d      	cmp	r5, r3
 8004756:	bf38      	it	cc
 8004758:	461d      	movcc	r5, r3
 800475a:	0553      	lsls	r3, r2, #21
 800475c:	d527      	bpl.n	80047ae <__ssputs_r+0x8e>
 800475e:	4629      	mov	r1, r5
 8004760:	f7ff ff52 	bl	8004608 <_malloc_r>
 8004764:	4606      	mov	r6, r0
 8004766:	b360      	cbz	r0, 80047c2 <__ssputs_r+0xa2>
 8004768:	6921      	ldr	r1, [r4, #16]
 800476a:	464a      	mov	r2, r9
 800476c:	f000 fba4 	bl	8004eb8 <memcpy>
 8004770:	89a3      	ldrh	r3, [r4, #12]
 8004772:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800477a:	81a3      	strh	r3, [r4, #12]
 800477c:	6126      	str	r6, [r4, #16]
 800477e:	6165      	str	r5, [r4, #20]
 8004780:	444e      	add	r6, r9
 8004782:	eba5 0509 	sub.w	r5, r5, r9
 8004786:	6026      	str	r6, [r4, #0]
 8004788:	60a5      	str	r5, [r4, #8]
 800478a:	463e      	mov	r6, r7
 800478c:	42be      	cmp	r6, r7
 800478e:	d900      	bls.n	8004792 <__ssputs_r+0x72>
 8004790:	463e      	mov	r6, r7
 8004792:	6820      	ldr	r0, [r4, #0]
 8004794:	4632      	mov	r2, r6
 8004796:	4641      	mov	r1, r8
 8004798:	f000 fb64 	bl	8004e64 <memmove>
 800479c:	68a3      	ldr	r3, [r4, #8]
 800479e:	1b9b      	subs	r3, r3, r6
 80047a0:	60a3      	str	r3, [r4, #8]
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	4433      	add	r3, r6
 80047a6:	6023      	str	r3, [r4, #0]
 80047a8:	2000      	movs	r0, #0
 80047aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ae:	462a      	mov	r2, r5
 80047b0:	f000 fb97 	bl	8004ee2 <_realloc_r>
 80047b4:	4606      	mov	r6, r0
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d1e0      	bne.n	800477c <__ssputs_r+0x5c>
 80047ba:	6921      	ldr	r1, [r4, #16]
 80047bc:	4650      	mov	r0, sl
 80047be:	f7ff feaf 	bl	8004520 <_free_r>
 80047c2:	230c      	movs	r3, #12
 80047c4:	f8ca 3000 	str.w	r3, [sl]
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047ce:	81a3      	strh	r3, [r4, #12]
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295
 80047d4:	e7e9      	b.n	80047aa <__ssputs_r+0x8a>
	...

080047d8 <_svfiprintf_r>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	4698      	mov	r8, r3
 80047de:	898b      	ldrh	r3, [r1, #12]
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	b09d      	sub	sp, #116	@ 0x74
 80047e4:	4607      	mov	r7, r0
 80047e6:	460d      	mov	r5, r1
 80047e8:	4614      	mov	r4, r2
 80047ea:	d510      	bpl.n	800480e <_svfiprintf_r+0x36>
 80047ec:	690b      	ldr	r3, [r1, #16]
 80047ee:	b973      	cbnz	r3, 800480e <_svfiprintf_r+0x36>
 80047f0:	2140      	movs	r1, #64	@ 0x40
 80047f2:	f7ff ff09 	bl	8004608 <_malloc_r>
 80047f6:	6028      	str	r0, [r5, #0]
 80047f8:	6128      	str	r0, [r5, #16]
 80047fa:	b930      	cbnz	r0, 800480a <_svfiprintf_r+0x32>
 80047fc:	230c      	movs	r3, #12
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	b01d      	add	sp, #116	@ 0x74
 8004806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480a:	2340      	movs	r3, #64	@ 0x40
 800480c:	616b      	str	r3, [r5, #20]
 800480e:	2300      	movs	r3, #0
 8004810:	9309      	str	r3, [sp, #36]	@ 0x24
 8004812:	2320      	movs	r3, #32
 8004814:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004818:	f8cd 800c 	str.w	r8, [sp, #12]
 800481c:	2330      	movs	r3, #48	@ 0x30
 800481e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80049bc <_svfiprintf_r+0x1e4>
 8004822:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004826:	f04f 0901 	mov.w	r9, #1
 800482a:	4623      	mov	r3, r4
 800482c:	469a      	mov	sl, r3
 800482e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004832:	b10a      	cbz	r2, 8004838 <_svfiprintf_r+0x60>
 8004834:	2a25      	cmp	r2, #37	@ 0x25
 8004836:	d1f9      	bne.n	800482c <_svfiprintf_r+0x54>
 8004838:	ebba 0b04 	subs.w	fp, sl, r4
 800483c:	d00b      	beq.n	8004856 <_svfiprintf_r+0x7e>
 800483e:	465b      	mov	r3, fp
 8004840:	4622      	mov	r2, r4
 8004842:	4629      	mov	r1, r5
 8004844:	4638      	mov	r0, r7
 8004846:	f7ff ff6b 	bl	8004720 <__ssputs_r>
 800484a:	3001      	adds	r0, #1
 800484c:	f000 80a7 	beq.w	800499e <_svfiprintf_r+0x1c6>
 8004850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004852:	445a      	add	r2, fp
 8004854:	9209      	str	r2, [sp, #36]	@ 0x24
 8004856:	f89a 3000 	ldrb.w	r3, [sl]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 809f 	beq.w	800499e <_svfiprintf_r+0x1c6>
 8004860:	2300      	movs	r3, #0
 8004862:	f04f 32ff 	mov.w	r2, #4294967295
 8004866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800486a:	f10a 0a01 	add.w	sl, sl, #1
 800486e:	9304      	str	r3, [sp, #16]
 8004870:	9307      	str	r3, [sp, #28]
 8004872:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004876:	931a      	str	r3, [sp, #104]	@ 0x68
 8004878:	4654      	mov	r4, sl
 800487a:	2205      	movs	r2, #5
 800487c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004880:	484e      	ldr	r0, [pc, #312]	@ (80049bc <_svfiprintf_r+0x1e4>)
 8004882:	f7fb fcad 	bl	80001e0 <memchr>
 8004886:	9a04      	ldr	r2, [sp, #16]
 8004888:	b9d8      	cbnz	r0, 80048c2 <_svfiprintf_r+0xea>
 800488a:	06d0      	lsls	r0, r2, #27
 800488c:	bf44      	itt	mi
 800488e:	2320      	movmi	r3, #32
 8004890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004894:	0711      	lsls	r1, r2, #28
 8004896:	bf44      	itt	mi
 8004898:	232b      	movmi	r3, #43	@ 0x2b
 800489a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800489e:	f89a 3000 	ldrb.w	r3, [sl]
 80048a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80048a4:	d015      	beq.n	80048d2 <_svfiprintf_r+0xfa>
 80048a6:	9a07      	ldr	r2, [sp, #28]
 80048a8:	4654      	mov	r4, sl
 80048aa:	2000      	movs	r0, #0
 80048ac:	f04f 0c0a 	mov.w	ip, #10
 80048b0:	4621      	mov	r1, r4
 80048b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048b6:	3b30      	subs	r3, #48	@ 0x30
 80048b8:	2b09      	cmp	r3, #9
 80048ba:	d94b      	bls.n	8004954 <_svfiprintf_r+0x17c>
 80048bc:	b1b0      	cbz	r0, 80048ec <_svfiprintf_r+0x114>
 80048be:	9207      	str	r2, [sp, #28]
 80048c0:	e014      	b.n	80048ec <_svfiprintf_r+0x114>
 80048c2:	eba0 0308 	sub.w	r3, r0, r8
 80048c6:	fa09 f303 	lsl.w	r3, r9, r3
 80048ca:	4313      	orrs	r3, r2
 80048cc:	9304      	str	r3, [sp, #16]
 80048ce:	46a2      	mov	sl, r4
 80048d0:	e7d2      	b.n	8004878 <_svfiprintf_r+0xa0>
 80048d2:	9b03      	ldr	r3, [sp, #12]
 80048d4:	1d19      	adds	r1, r3, #4
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	9103      	str	r1, [sp, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bfbb      	ittet	lt
 80048de:	425b      	neglt	r3, r3
 80048e0:	f042 0202 	orrlt.w	r2, r2, #2
 80048e4:	9307      	strge	r3, [sp, #28]
 80048e6:	9307      	strlt	r3, [sp, #28]
 80048e8:	bfb8      	it	lt
 80048ea:	9204      	strlt	r2, [sp, #16]
 80048ec:	7823      	ldrb	r3, [r4, #0]
 80048ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80048f0:	d10a      	bne.n	8004908 <_svfiprintf_r+0x130>
 80048f2:	7863      	ldrb	r3, [r4, #1]
 80048f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80048f6:	d132      	bne.n	800495e <_svfiprintf_r+0x186>
 80048f8:	9b03      	ldr	r3, [sp, #12]
 80048fa:	1d1a      	adds	r2, r3, #4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	9203      	str	r2, [sp, #12]
 8004900:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004904:	3402      	adds	r4, #2
 8004906:	9305      	str	r3, [sp, #20]
 8004908:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80049cc <_svfiprintf_r+0x1f4>
 800490c:	7821      	ldrb	r1, [r4, #0]
 800490e:	2203      	movs	r2, #3
 8004910:	4650      	mov	r0, sl
 8004912:	f7fb fc65 	bl	80001e0 <memchr>
 8004916:	b138      	cbz	r0, 8004928 <_svfiprintf_r+0x150>
 8004918:	9b04      	ldr	r3, [sp, #16]
 800491a:	eba0 000a 	sub.w	r0, r0, sl
 800491e:	2240      	movs	r2, #64	@ 0x40
 8004920:	4082      	lsls	r2, r0
 8004922:	4313      	orrs	r3, r2
 8004924:	3401      	adds	r4, #1
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800492c:	4824      	ldr	r0, [pc, #144]	@ (80049c0 <_svfiprintf_r+0x1e8>)
 800492e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004932:	2206      	movs	r2, #6
 8004934:	f7fb fc54 	bl	80001e0 <memchr>
 8004938:	2800      	cmp	r0, #0
 800493a:	d036      	beq.n	80049aa <_svfiprintf_r+0x1d2>
 800493c:	4b21      	ldr	r3, [pc, #132]	@ (80049c4 <_svfiprintf_r+0x1ec>)
 800493e:	bb1b      	cbnz	r3, 8004988 <_svfiprintf_r+0x1b0>
 8004940:	9b03      	ldr	r3, [sp, #12]
 8004942:	3307      	adds	r3, #7
 8004944:	f023 0307 	bic.w	r3, r3, #7
 8004948:	3308      	adds	r3, #8
 800494a:	9303      	str	r3, [sp, #12]
 800494c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800494e:	4433      	add	r3, r6
 8004950:	9309      	str	r3, [sp, #36]	@ 0x24
 8004952:	e76a      	b.n	800482a <_svfiprintf_r+0x52>
 8004954:	fb0c 3202 	mla	r2, ip, r2, r3
 8004958:	460c      	mov	r4, r1
 800495a:	2001      	movs	r0, #1
 800495c:	e7a8      	b.n	80048b0 <_svfiprintf_r+0xd8>
 800495e:	2300      	movs	r3, #0
 8004960:	3401      	adds	r4, #1
 8004962:	9305      	str	r3, [sp, #20]
 8004964:	4619      	mov	r1, r3
 8004966:	f04f 0c0a 	mov.w	ip, #10
 800496a:	4620      	mov	r0, r4
 800496c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004970:	3a30      	subs	r2, #48	@ 0x30
 8004972:	2a09      	cmp	r2, #9
 8004974:	d903      	bls.n	800497e <_svfiprintf_r+0x1a6>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0c6      	beq.n	8004908 <_svfiprintf_r+0x130>
 800497a:	9105      	str	r1, [sp, #20]
 800497c:	e7c4      	b.n	8004908 <_svfiprintf_r+0x130>
 800497e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004982:	4604      	mov	r4, r0
 8004984:	2301      	movs	r3, #1
 8004986:	e7f0      	b.n	800496a <_svfiprintf_r+0x192>
 8004988:	ab03      	add	r3, sp, #12
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	462a      	mov	r2, r5
 800498e:	4b0e      	ldr	r3, [pc, #56]	@ (80049c8 <_svfiprintf_r+0x1f0>)
 8004990:	a904      	add	r1, sp, #16
 8004992:	4638      	mov	r0, r7
 8004994:	f3af 8000 	nop.w
 8004998:	1c42      	adds	r2, r0, #1
 800499a:	4606      	mov	r6, r0
 800499c:	d1d6      	bne.n	800494c <_svfiprintf_r+0x174>
 800499e:	89ab      	ldrh	r3, [r5, #12]
 80049a0:	065b      	lsls	r3, r3, #25
 80049a2:	f53f af2d 	bmi.w	8004800 <_svfiprintf_r+0x28>
 80049a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049a8:	e72c      	b.n	8004804 <_svfiprintf_r+0x2c>
 80049aa:	ab03      	add	r3, sp, #12
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	462a      	mov	r2, r5
 80049b0:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <_svfiprintf_r+0x1f0>)
 80049b2:	a904      	add	r1, sp, #16
 80049b4:	4638      	mov	r0, r7
 80049b6:	f000 f879 	bl	8004aac <_printf_i>
 80049ba:	e7ed      	b.n	8004998 <_svfiprintf_r+0x1c0>
 80049bc:	0800775b 	.word	0x0800775b
 80049c0:	08007765 	.word	0x08007765
 80049c4:	00000000 	.word	0x00000000
 80049c8:	08004721 	.word	0x08004721
 80049cc:	08007761 	.word	0x08007761

080049d0 <_printf_common>:
 80049d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d4:	4616      	mov	r6, r2
 80049d6:	4698      	mov	r8, r3
 80049d8:	688a      	ldr	r2, [r1, #8]
 80049da:	690b      	ldr	r3, [r1, #16]
 80049dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049e0:	4293      	cmp	r3, r2
 80049e2:	bfb8      	it	lt
 80049e4:	4613      	movlt	r3, r2
 80049e6:	6033      	str	r3, [r6, #0]
 80049e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049ec:	4607      	mov	r7, r0
 80049ee:	460c      	mov	r4, r1
 80049f0:	b10a      	cbz	r2, 80049f6 <_printf_common+0x26>
 80049f2:	3301      	adds	r3, #1
 80049f4:	6033      	str	r3, [r6, #0]
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	0699      	lsls	r1, r3, #26
 80049fa:	bf42      	ittt	mi
 80049fc:	6833      	ldrmi	r3, [r6, #0]
 80049fe:	3302      	addmi	r3, #2
 8004a00:	6033      	strmi	r3, [r6, #0]
 8004a02:	6825      	ldr	r5, [r4, #0]
 8004a04:	f015 0506 	ands.w	r5, r5, #6
 8004a08:	d106      	bne.n	8004a18 <_printf_common+0x48>
 8004a0a:	f104 0a19 	add.w	sl, r4, #25
 8004a0e:	68e3      	ldr	r3, [r4, #12]
 8004a10:	6832      	ldr	r2, [r6, #0]
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	42ab      	cmp	r3, r5
 8004a16:	dc26      	bgt.n	8004a66 <_printf_common+0x96>
 8004a18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a1c:	6822      	ldr	r2, [r4, #0]
 8004a1e:	3b00      	subs	r3, #0
 8004a20:	bf18      	it	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	0692      	lsls	r2, r2, #26
 8004a26:	d42b      	bmi.n	8004a80 <_printf_common+0xb0>
 8004a28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	4638      	mov	r0, r7
 8004a30:	47c8      	blx	r9
 8004a32:	3001      	adds	r0, #1
 8004a34:	d01e      	beq.n	8004a74 <_printf_common+0xa4>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	6922      	ldr	r2, [r4, #16]
 8004a3a:	f003 0306 	and.w	r3, r3, #6
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	bf02      	ittt	eq
 8004a42:	68e5      	ldreq	r5, [r4, #12]
 8004a44:	6833      	ldreq	r3, [r6, #0]
 8004a46:	1aed      	subeq	r5, r5, r3
 8004a48:	68a3      	ldr	r3, [r4, #8]
 8004a4a:	bf0c      	ite	eq
 8004a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a50:	2500      	movne	r5, #0
 8004a52:	4293      	cmp	r3, r2
 8004a54:	bfc4      	itt	gt
 8004a56:	1a9b      	subgt	r3, r3, r2
 8004a58:	18ed      	addgt	r5, r5, r3
 8004a5a:	2600      	movs	r6, #0
 8004a5c:	341a      	adds	r4, #26
 8004a5e:	42b5      	cmp	r5, r6
 8004a60:	d11a      	bne.n	8004a98 <_printf_common+0xc8>
 8004a62:	2000      	movs	r0, #0
 8004a64:	e008      	b.n	8004a78 <_printf_common+0xa8>
 8004a66:	2301      	movs	r3, #1
 8004a68:	4652      	mov	r2, sl
 8004a6a:	4641      	mov	r1, r8
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	47c8      	blx	r9
 8004a70:	3001      	adds	r0, #1
 8004a72:	d103      	bne.n	8004a7c <_printf_common+0xac>
 8004a74:	f04f 30ff 	mov.w	r0, #4294967295
 8004a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7c:	3501      	adds	r5, #1
 8004a7e:	e7c6      	b.n	8004a0e <_printf_common+0x3e>
 8004a80:	18e1      	adds	r1, r4, r3
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	2030      	movs	r0, #48	@ 0x30
 8004a86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a8a:	4422      	add	r2, r4
 8004a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a94:	3302      	adds	r3, #2
 8004a96:	e7c7      	b.n	8004a28 <_printf_common+0x58>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	4622      	mov	r2, r4
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	47c8      	blx	r9
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	d0e6      	beq.n	8004a74 <_printf_common+0xa4>
 8004aa6:	3601      	adds	r6, #1
 8004aa8:	e7d9      	b.n	8004a5e <_printf_common+0x8e>
	...

08004aac <_printf_i>:
 8004aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab0:	7e0f      	ldrb	r7, [r1, #24]
 8004ab2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ab4:	2f78      	cmp	r7, #120	@ 0x78
 8004ab6:	4691      	mov	r9, r2
 8004ab8:	4680      	mov	r8, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	469a      	mov	sl, r3
 8004abe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ac2:	d807      	bhi.n	8004ad4 <_printf_i+0x28>
 8004ac4:	2f62      	cmp	r7, #98	@ 0x62
 8004ac6:	d80a      	bhi.n	8004ade <_printf_i+0x32>
 8004ac8:	2f00      	cmp	r7, #0
 8004aca:	f000 80d1 	beq.w	8004c70 <_printf_i+0x1c4>
 8004ace:	2f58      	cmp	r7, #88	@ 0x58
 8004ad0:	f000 80b8 	beq.w	8004c44 <_printf_i+0x198>
 8004ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ad8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004adc:	e03a      	b.n	8004b54 <_printf_i+0xa8>
 8004ade:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ae2:	2b15      	cmp	r3, #21
 8004ae4:	d8f6      	bhi.n	8004ad4 <_printf_i+0x28>
 8004ae6:	a101      	add	r1, pc, #4	@ (adr r1, 8004aec <_printf_i+0x40>)
 8004ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004aec:	08004b45 	.word	0x08004b45
 8004af0:	08004b59 	.word	0x08004b59
 8004af4:	08004ad5 	.word	0x08004ad5
 8004af8:	08004ad5 	.word	0x08004ad5
 8004afc:	08004ad5 	.word	0x08004ad5
 8004b00:	08004ad5 	.word	0x08004ad5
 8004b04:	08004b59 	.word	0x08004b59
 8004b08:	08004ad5 	.word	0x08004ad5
 8004b0c:	08004ad5 	.word	0x08004ad5
 8004b10:	08004ad5 	.word	0x08004ad5
 8004b14:	08004ad5 	.word	0x08004ad5
 8004b18:	08004c57 	.word	0x08004c57
 8004b1c:	08004b83 	.word	0x08004b83
 8004b20:	08004c11 	.word	0x08004c11
 8004b24:	08004ad5 	.word	0x08004ad5
 8004b28:	08004ad5 	.word	0x08004ad5
 8004b2c:	08004c79 	.word	0x08004c79
 8004b30:	08004ad5 	.word	0x08004ad5
 8004b34:	08004b83 	.word	0x08004b83
 8004b38:	08004ad5 	.word	0x08004ad5
 8004b3c:	08004ad5 	.word	0x08004ad5
 8004b40:	08004c19 	.word	0x08004c19
 8004b44:	6833      	ldr	r3, [r6, #0]
 8004b46:	1d1a      	adds	r2, r3, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6032      	str	r2, [r6, #0]
 8004b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b54:	2301      	movs	r3, #1
 8004b56:	e09c      	b.n	8004c92 <_printf_i+0x1e6>
 8004b58:	6833      	ldr	r3, [r6, #0]
 8004b5a:	6820      	ldr	r0, [r4, #0]
 8004b5c:	1d19      	adds	r1, r3, #4
 8004b5e:	6031      	str	r1, [r6, #0]
 8004b60:	0606      	lsls	r6, r0, #24
 8004b62:	d501      	bpl.n	8004b68 <_printf_i+0xbc>
 8004b64:	681d      	ldr	r5, [r3, #0]
 8004b66:	e003      	b.n	8004b70 <_printf_i+0xc4>
 8004b68:	0645      	lsls	r5, r0, #25
 8004b6a:	d5fb      	bpl.n	8004b64 <_printf_i+0xb8>
 8004b6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b70:	2d00      	cmp	r5, #0
 8004b72:	da03      	bge.n	8004b7c <_printf_i+0xd0>
 8004b74:	232d      	movs	r3, #45	@ 0x2d
 8004b76:	426d      	negs	r5, r5
 8004b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b7c:	4858      	ldr	r0, [pc, #352]	@ (8004ce0 <_printf_i+0x234>)
 8004b7e:	230a      	movs	r3, #10
 8004b80:	e011      	b.n	8004ba6 <_printf_i+0xfa>
 8004b82:	6821      	ldr	r1, [r4, #0]
 8004b84:	6833      	ldr	r3, [r6, #0]
 8004b86:	0608      	lsls	r0, r1, #24
 8004b88:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b8c:	d402      	bmi.n	8004b94 <_printf_i+0xe8>
 8004b8e:	0649      	lsls	r1, r1, #25
 8004b90:	bf48      	it	mi
 8004b92:	b2ad      	uxthmi	r5, r5
 8004b94:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b96:	4852      	ldr	r0, [pc, #328]	@ (8004ce0 <_printf_i+0x234>)
 8004b98:	6033      	str	r3, [r6, #0]
 8004b9a:	bf14      	ite	ne
 8004b9c:	230a      	movne	r3, #10
 8004b9e:	2308      	moveq	r3, #8
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ba6:	6866      	ldr	r6, [r4, #4]
 8004ba8:	60a6      	str	r6, [r4, #8]
 8004baa:	2e00      	cmp	r6, #0
 8004bac:	db05      	blt.n	8004bba <_printf_i+0x10e>
 8004bae:	6821      	ldr	r1, [r4, #0]
 8004bb0:	432e      	orrs	r6, r5
 8004bb2:	f021 0104 	bic.w	r1, r1, #4
 8004bb6:	6021      	str	r1, [r4, #0]
 8004bb8:	d04b      	beq.n	8004c52 <_printf_i+0x1a6>
 8004bba:	4616      	mov	r6, r2
 8004bbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bc0:	fb03 5711 	mls	r7, r3, r1, r5
 8004bc4:	5dc7      	ldrb	r7, [r0, r7]
 8004bc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bca:	462f      	mov	r7, r5
 8004bcc:	42bb      	cmp	r3, r7
 8004bce:	460d      	mov	r5, r1
 8004bd0:	d9f4      	bls.n	8004bbc <_printf_i+0x110>
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d10b      	bne.n	8004bee <_printf_i+0x142>
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	07df      	lsls	r7, r3, #31
 8004bda:	d508      	bpl.n	8004bee <_printf_i+0x142>
 8004bdc:	6923      	ldr	r3, [r4, #16]
 8004bde:	6861      	ldr	r1, [r4, #4]
 8004be0:	4299      	cmp	r1, r3
 8004be2:	bfde      	ittt	le
 8004be4:	2330      	movle	r3, #48	@ 0x30
 8004be6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bee:	1b92      	subs	r2, r2, r6
 8004bf0:	6122      	str	r2, [r4, #16]
 8004bf2:	f8cd a000 	str.w	sl, [sp]
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	aa03      	add	r2, sp, #12
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	4640      	mov	r0, r8
 8004bfe:	f7ff fee7 	bl	80049d0 <_printf_common>
 8004c02:	3001      	adds	r0, #1
 8004c04:	d14a      	bne.n	8004c9c <_printf_i+0x1f0>
 8004c06:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0a:	b004      	add	sp, #16
 8004c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	f043 0320 	orr.w	r3, r3, #32
 8004c16:	6023      	str	r3, [r4, #0]
 8004c18:	4832      	ldr	r0, [pc, #200]	@ (8004ce4 <_printf_i+0x238>)
 8004c1a:	2778      	movs	r7, #120	@ 0x78
 8004c1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	6831      	ldr	r1, [r6, #0]
 8004c24:	061f      	lsls	r7, r3, #24
 8004c26:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c2a:	d402      	bmi.n	8004c32 <_printf_i+0x186>
 8004c2c:	065f      	lsls	r7, r3, #25
 8004c2e:	bf48      	it	mi
 8004c30:	b2ad      	uxthmi	r5, r5
 8004c32:	6031      	str	r1, [r6, #0]
 8004c34:	07d9      	lsls	r1, r3, #31
 8004c36:	bf44      	itt	mi
 8004c38:	f043 0320 	orrmi.w	r3, r3, #32
 8004c3c:	6023      	strmi	r3, [r4, #0]
 8004c3e:	b11d      	cbz	r5, 8004c48 <_printf_i+0x19c>
 8004c40:	2310      	movs	r3, #16
 8004c42:	e7ad      	b.n	8004ba0 <_printf_i+0xf4>
 8004c44:	4826      	ldr	r0, [pc, #152]	@ (8004ce0 <_printf_i+0x234>)
 8004c46:	e7e9      	b.n	8004c1c <_printf_i+0x170>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	f023 0320 	bic.w	r3, r3, #32
 8004c4e:	6023      	str	r3, [r4, #0]
 8004c50:	e7f6      	b.n	8004c40 <_printf_i+0x194>
 8004c52:	4616      	mov	r6, r2
 8004c54:	e7bd      	b.n	8004bd2 <_printf_i+0x126>
 8004c56:	6833      	ldr	r3, [r6, #0]
 8004c58:	6825      	ldr	r5, [r4, #0]
 8004c5a:	6961      	ldr	r1, [r4, #20]
 8004c5c:	1d18      	adds	r0, r3, #4
 8004c5e:	6030      	str	r0, [r6, #0]
 8004c60:	062e      	lsls	r6, r5, #24
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	d501      	bpl.n	8004c6a <_printf_i+0x1be>
 8004c66:	6019      	str	r1, [r3, #0]
 8004c68:	e002      	b.n	8004c70 <_printf_i+0x1c4>
 8004c6a:	0668      	lsls	r0, r5, #25
 8004c6c:	d5fb      	bpl.n	8004c66 <_printf_i+0x1ba>
 8004c6e:	8019      	strh	r1, [r3, #0]
 8004c70:	2300      	movs	r3, #0
 8004c72:	6123      	str	r3, [r4, #16]
 8004c74:	4616      	mov	r6, r2
 8004c76:	e7bc      	b.n	8004bf2 <_printf_i+0x146>
 8004c78:	6833      	ldr	r3, [r6, #0]
 8004c7a:	1d1a      	adds	r2, r3, #4
 8004c7c:	6032      	str	r2, [r6, #0]
 8004c7e:	681e      	ldr	r6, [r3, #0]
 8004c80:	6862      	ldr	r2, [r4, #4]
 8004c82:	2100      	movs	r1, #0
 8004c84:	4630      	mov	r0, r6
 8004c86:	f7fb faab 	bl	80001e0 <memchr>
 8004c8a:	b108      	cbz	r0, 8004c90 <_printf_i+0x1e4>
 8004c8c:	1b80      	subs	r0, r0, r6
 8004c8e:	6060      	str	r0, [r4, #4]
 8004c90:	6863      	ldr	r3, [r4, #4]
 8004c92:	6123      	str	r3, [r4, #16]
 8004c94:	2300      	movs	r3, #0
 8004c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c9a:	e7aa      	b.n	8004bf2 <_printf_i+0x146>
 8004c9c:	6923      	ldr	r3, [r4, #16]
 8004c9e:	4632      	mov	r2, r6
 8004ca0:	4649      	mov	r1, r9
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	47d0      	blx	sl
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d0ad      	beq.n	8004c06 <_printf_i+0x15a>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	079b      	lsls	r3, r3, #30
 8004cae:	d413      	bmi.n	8004cd8 <_printf_i+0x22c>
 8004cb0:	68e0      	ldr	r0, [r4, #12]
 8004cb2:	9b03      	ldr	r3, [sp, #12]
 8004cb4:	4298      	cmp	r0, r3
 8004cb6:	bfb8      	it	lt
 8004cb8:	4618      	movlt	r0, r3
 8004cba:	e7a6      	b.n	8004c0a <_printf_i+0x15e>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	4632      	mov	r2, r6
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	47d0      	blx	sl
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d09d      	beq.n	8004c06 <_printf_i+0x15a>
 8004cca:	3501      	adds	r5, #1
 8004ccc:	68e3      	ldr	r3, [r4, #12]
 8004cce:	9903      	ldr	r1, [sp, #12]
 8004cd0:	1a5b      	subs	r3, r3, r1
 8004cd2:	42ab      	cmp	r3, r5
 8004cd4:	dcf2      	bgt.n	8004cbc <_printf_i+0x210>
 8004cd6:	e7eb      	b.n	8004cb0 <_printf_i+0x204>
 8004cd8:	2500      	movs	r5, #0
 8004cda:	f104 0619 	add.w	r6, r4, #25
 8004cde:	e7f5      	b.n	8004ccc <_printf_i+0x220>
 8004ce0:	0800776c 	.word	0x0800776c
 8004ce4:	0800777d 	.word	0x0800777d

08004ce8 <__sflush_r>:
 8004ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf0:	0716      	lsls	r6, r2, #28
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	d454      	bmi.n	8004da2 <__sflush_r+0xba>
 8004cf8:	684b      	ldr	r3, [r1, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	dc02      	bgt.n	8004d04 <__sflush_r+0x1c>
 8004cfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	dd48      	ble.n	8004d96 <__sflush_r+0xae>
 8004d04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d06:	2e00      	cmp	r6, #0
 8004d08:	d045      	beq.n	8004d96 <__sflush_r+0xae>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004d10:	682f      	ldr	r7, [r5, #0]
 8004d12:	6a21      	ldr	r1, [r4, #32]
 8004d14:	602b      	str	r3, [r5, #0]
 8004d16:	d030      	beq.n	8004d7a <__sflush_r+0x92>
 8004d18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d1a:	89a3      	ldrh	r3, [r4, #12]
 8004d1c:	0759      	lsls	r1, r3, #29
 8004d1e:	d505      	bpl.n	8004d2c <__sflush_r+0x44>
 8004d20:	6863      	ldr	r3, [r4, #4]
 8004d22:	1ad2      	subs	r2, r2, r3
 8004d24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d26:	b10b      	cbz	r3, 8004d2c <__sflush_r+0x44>
 8004d28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d2a:	1ad2      	subs	r2, r2, r3
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d30:	6a21      	ldr	r1, [r4, #32]
 8004d32:	4628      	mov	r0, r5
 8004d34:	47b0      	blx	r6
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	d106      	bne.n	8004d4a <__sflush_r+0x62>
 8004d3c:	6829      	ldr	r1, [r5, #0]
 8004d3e:	291d      	cmp	r1, #29
 8004d40:	d82b      	bhi.n	8004d9a <__sflush_r+0xb2>
 8004d42:	4a2a      	ldr	r2, [pc, #168]	@ (8004dec <__sflush_r+0x104>)
 8004d44:	40ca      	lsrs	r2, r1
 8004d46:	07d6      	lsls	r6, r2, #31
 8004d48:	d527      	bpl.n	8004d9a <__sflush_r+0xb2>
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	6062      	str	r2, [r4, #4]
 8004d4e:	04d9      	lsls	r1, r3, #19
 8004d50:	6922      	ldr	r2, [r4, #16]
 8004d52:	6022      	str	r2, [r4, #0]
 8004d54:	d504      	bpl.n	8004d60 <__sflush_r+0x78>
 8004d56:	1c42      	adds	r2, r0, #1
 8004d58:	d101      	bne.n	8004d5e <__sflush_r+0x76>
 8004d5a:	682b      	ldr	r3, [r5, #0]
 8004d5c:	b903      	cbnz	r3, 8004d60 <__sflush_r+0x78>
 8004d5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d62:	602f      	str	r7, [r5, #0]
 8004d64:	b1b9      	cbz	r1, 8004d96 <__sflush_r+0xae>
 8004d66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d6a:	4299      	cmp	r1, r3
 8004d6c:	d002      	beq.n	8004d74 <__sflush_r+0x8c>
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f7ff fbd6 	bl	8004520 <_free_r>
 8004d74:	2300      	movs	r3, #0
 8004d76:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d78:	e00d      	b.n	8004d96 <__sflush_r+0xae>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b0      	blx	r6
 8004d80:	4602      	mov	r2, r0
 8004d82:	1c50      	adds	r0, r2, #1
 8004d84:	d1c9      	bne.n	8004d1a <__sflush_r+0x32>
 8004d86:	682b      	ldr	r3, [r5, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0c6      	beq.n	8004d1a <__sflush_r+0x32>
 8004d8c:	2b1d      	cmp	r3, #29
 8004d8e:	d001      	beq.n	8004d94 <__sflush_r+0xac>
 8004d90:	2b16      	cmp	r3, #22
 8004d92:	d11e      	bne.n	8004dd2 <__sflush_r+0xea>
 8004d94:	602f      	str	r7, [r5, #0]
 8004d96:	2000      	movs	r0, #0
 8004d98:	e022      	b.n	8004de0 <__sflush_r+0xf8>
 8004d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d9e:	b21b      	sxth	r3, r3
 8004da0:	e01b      	b.n	8004dda <__sflush_r+0xf2>
 8004da2:	690f      	ldr	r7, [r1, #16]
 8004da4:	2f00      	cmp	r7, #0
 8004da6:	d0f6      	beq.n	8004d96 <__sflush_r+0xae>
 8004da8:	0793      	lsls	r3, r2, #30
 8004daa:	680e      	ldr	r6, [r1, #0]
 8004dac:	bf08      	it	eq
 8004dae:	694b      	ldreq	r3, [r1, #20]
 8004db0:	600f      	str	r7, [r1, #0]
 8004db2:	bf18      	it	ne
 8004db4:	2300      	movne	r3, #0
 8004db6:	eba6 0807 	sub.w	r8, r6, r7
 8004dba:	608b      	str	r3, [r1, #8]
 8004dbc:	f1b8 0f00 	cmp.w	r8, #0
 8004dc0:	dde9      	ble.n	8004d96 <__sflush_r+0xae>
 8004dc2:	6a21      	ldr	r1, [r4, #32]
 8004dc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004dc6:	4643      	mov	r3, r8
 8004dc8:	463a      	mov	r2, r7
 8004dca:	4628      	mov	r0, r5
 8004dcc:	47b0      	blx	r6
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	dc08      	bgt.n	8004de4 <__sflush_r+0xfc>
 8004dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dda:	81a3      	strh	r3, [r4, #12]
 8004ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8004de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de4:	4407      	add	r7, r0
 8004de6:	eba8 0800 	sub.w	r8, r8, r0
 8004dea:	e7e7      	b.n	8004dbc <__sflush_r+0xd4>
 8004dec:	20400001 	.word	0x20400001

08004df0 <_fflush_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	690b      	ldr	r3, [r1, #16]
 8004df4:	4605      	mov	r5, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	b913      	cbnz	r3, 8004e00 <_fflush_r+0x10>
 8004dfa:	2500      	movs	r5, #0
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
 8004e00:	b118      	cbz	r0, 8004e0a <_fflush_r+0x1a>
 8004e02:	6a03      	ldr	r3, [r0, #32]
 8004e04:	b90b      	cbnz	r3, 8004e0a <_fflush_r+0x1a>
 8004e06:	f7ff fa41 	bl	800428c <__sinit>
 8004e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f3      	beq.n	8004dfa <_fflush_r+0xa>
 8004e12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e14:	07d0      	lsls	r0, r2, #31
 8004e16:	d404      	bmi.n	8004e22 <_fflush_r+0x32>
 8004e18:	0599      	lsls	r1, r3, #22
 8004e1a:	d402      	bmi.n	8004e22 <_fflush_r+0x32>
 8004e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e1e:	f7ff fb5e 	bl	80044de <__retarget_lock_acquire_recursive>
 8004e22:	4628      	mov	r0, r5
 8004e24:	4621      	mov	r1, r4
 8004e26:	f7ff ff5f 	bl	8004ce8 <__sflush_r>
 8004e2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e2c:	07da      	lsls	r2, r3, #31
 8004e2e:	4605      	mov	r5, r0
 8004e30:	d4e4      	bmi.n	8004dfc <_fflush_r+0xc>
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	059b      	lsls	r3, r3, #22
 8004e36:	d4e1      	bmi.n	8004dfc <_fflush_r+0xc>
 8004e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e3a:	f7ff fb51 	bl	80044e0 <__retarget_lock_release_recursive>
 8004e3e:	e7dd      	b.n	8004dfc <_fflush_r+0xc>

08004e40 <fiprintf>:
 8004e40:	b40e      	push	{r1, r2, r3}
 8004e42:	b503      	push	{r0, r1, lr}
 8004e44:	4601      	mov	r1, r0
 8004e46:	ab03      	add	r3, sp, #12
 8004e48:	4805      	ldr	r0, [pc, #20]	@ (8004e60 <fiprintf+0x20>)
 8004e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e4e:	6800      	ldr	r0, [r0, #0]
 8004e50:	9301      	str	r3, [sp, #4]
 8004e52:	f000 f89d 	bl	8004f90 <_vfiprintf_r>
 8004e56:	b002      	add	sp, #8
 8004e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e5c:	b003      	add	sp, #12
 8004e5e:	4770      	bx	lr
 8004e60:	20000020 	.word	0x20000020

08004e64 <memmove>:
 8004e64:	4288      	cmp	r0, r1
 8004e66:	b510      	push	{r4, lr}
 8004e68:	eb01 0402 	add.w	r4, r1, r2
 8004e6c:	d902      	bls.n	8004e74 <memmove+0x10>
 8004e6e:	4284      	cmp	r4, r0
 8004e70:	4623      	mov	r3, r4
 8004e72:	d807      	bhi.n	8004e84 <memmove+0x20>
 8004e74:	1e43      	subs	r3, r0, #1
 8004e76:	42a1      	cmp	r1, r4
 8004e78:	d008      	beq.n	8004e8c <memmove+0x28>
 8004e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e82:	e7f8      	b.n	8004e76 <memmove+0x12>
 8004e84:	4402      	add	r2, r0
 8004e86:	4601      	mov	r1, r0
 8004e88:	428a      	cmp	r2, r1
 8004e8a:	d100      	bne.n	8004e8e <memmove+0x2a>
 8004e8c:	bd10      	pop	{r4, pc}
 8004e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e96:	e7f7      	b.n	8004e88 <memmove+0x24>

08004e98 <_sbrk_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d06      	ldr	r5, [pc, #24]	@ (8004eb4 <_sbrk_r+0x1c>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	602b      	str	r3, [r5, #0]
 8004ea4:	f7fb fe7a 	bl	8000b9c <_sbrk>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_sbrk_r+0x1a>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_sbrk_r+0x1a>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	20001430 	.word	0x20001430

08004eb8 <memcpy>:
 8004eb8:	440a      	add	r2, r1
 8004eba:	4291      	cmp	r1, r2
 8004ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ec0:	d100      	bne.n	8004ec4 <memcpy+0xc>
 8004ec2:	4770      	bx	lr
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ece:	4291      	cmp	r1, r2
 8004ed0:	d1f9      	bne.n	8004ec6 <memcpy+0xe>
 8004ed2:	bd10      	pop	{r4, pc}

08004ed4 <abort>:
 8004ed4:	b508      	push	{r3, lr}
 8004ed6:	2006      	movs	r0, #6
 8004ed8:	f000 fa2e 	bl	8005338 <raise>
 8004edc:	2001      	movs	r0, #1
 8004ede:	f7fb fde5 	bl	8000aac <_exit>

08004ee2 <_realloc_r>:
 8004ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee6:	4607      	mov	r7, r0
 8004ee8:	4614      	mov	r4, r2
 8004eea:	460d      	mov	r5, r1
 8004eec:	b921      	cbnz	r1, 8004ef8 <_realloc_r+0x16>
 8004eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	f7ff bb88 	b.w	8004608 <_malloc_r>
 8004ef8:	b92a      	cbnz	r2, 8004f06 <_realloc_r+0x24>
 8004efa:	f7ff fb11 	bl	8004520 <_free_r>
 8004efe:	4625      	mov	r5, r4
 8004f00:	4628      	mov	r0, r5
 8004f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f06:	f000 fa33 	bl	8005370 <_malloc_usable_size_r>
 8004f0a:	4284      	cmp	r4, r0
 8004f0c:	4606      	mov	r6, r0
 8004f0e:	d802      	bhi.n	8004f16 <_realloc_r+0x34>
 8004f10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f14:	d8f4      	bhi.n	8004f00 <_realloc_r+0x1e>
 8004f16:	4621      	mov	r1, r4
 8004f18:	4638      	mov	r0, r7
 8004f1a:	f7ff fb75 	bl	8004608 <_malloc_r>
 8004f1e:	4680      	mov	r8, r0
 8004f20:	b908      	cbnz	r0, 8004f26 <_realloc_r+0x44>
 8004f22:	4645      	mov	r5, r8
 8004f24:	e7ec      	b.n	8004f00 <_realloc_r+0x1e>
 8004f26:	42b4      	cmp	r4, r6
 8004f28:	4622      	mov	r2, r4
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	bf28      	it	cs
 8004f2e:	4632      	movcs	r2, r6
 8004f30:	f7ff ffc2 	bl	8004eb8 <memcpy>
 8004f34:	4629      	mov	r1, r5
 8004f36:	4638      	mov	r0, r7
 8004f38:	f7ff faf2 	bl	8004520 <_free_r>
 8004f3c:	e7f1      	b.n	8004f22 <_realloc_r+0x40>

08004f3e <__sfputc_r>:
 8004f3e:	6893      	ldr	r3, [r2, #8]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	b410      	push	{r4}
 8004f46:	6093      	str	r3, [r2, #8]
 8004f48:	da08      	bge.n	8004f5c <__sfputc_r+0x1e>
 8004f4a:	6994      	ldr	r4, [r2, #24]
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	db01      	blt.n	8004f54 <__sfputc_r+0x16>
 8004f50:	290a      	cmp	r1, #10
 8004f52:	d103      	bne.n	8004f5c <__sfputc_r+0x1e>
 8004f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f58:	f000 b932 	b.w	80051c0 <__swbuf_r>
 8004f5c:	6813      	ldr	r3, [r2, #0]
 8004f5e:	1c58      	adds	r0, r3, #1
 8004f60:	6010      	str	r0, [r2, #0]
 8004f62:	7019      	strb	r1, [r3, #0]
 8004f64:	4608      	mov	r0, r1
 8004f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <__sfputs_r>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	4606      	mov	r6, r0
 8004f70:	460f      	mov	r7, r1
 8004f72:	4614      	mov	r4, r2
 8004f74:	18d5      	adds	r5, r2, r3
 8004f76:	42ac      	cmp	r4, r5
 8004f78:	d101      	bne.n	8004f7e <__sfputs_r+0x12>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	e007      	b.n	8004f8e <__sfputs_r+0x22>
 8004f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f82:	463a      	mov	r2, r7
 8004f84:	4630      	mov	r0, r6
 8004f86:	f7ff ffda 	bl	8004f3e <__sfputc_r>
 8004f8a:	1c43      	adds	r3, r0, #1
 8004f8c:	d1f3      	bne.n	8004f76 <__sfputs_r+0xa>
 8004f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f90 <_vfiprintf_r>:
 8004f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f94:	460d      	mov	r5, r1
 8004f96:	b09d      	sub	sp, #116	@ 0x74
 8004f98:	4614      	mov	r4, r2
 8004f9a:	4698      	mov	r8, r3
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	b118      	cbz	r0, 8004fa8 <_vfiprintf_r+0x18>
 8004fa0:	6a03      	ldr	r3, [r0, #32]
 8004fa2:	b90b      	cbnz	r3, 8004fa8 <_vfiprintf_r+0x18>
 8004fa4:	f7ff f972 	bl	800428c <__sinit>
 8004fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004faa:	07d9      	lsls	r1, r3, #31
 8004fac:	d405      	bmi.n	8004fba <_vfiprintf_r+0x2a>
 8004fae:	89ab      	ldrh	r3, [r5, #12]
 8004fb0:	059a      	lsls	r2, r3, #22
 8004fb2:	d402      	bmi.n	8004fba <_vfiprintf_r+0x2a>
 8004fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fb6:	f7ff fa92 	bl	80044de <__retarget_lock_acquire_recursive>
 8004fba:	89ab      	ldrh	r3, [r5, #12]
 8004fbc:	071b      	lsls	r3, r3, #28
 8004fbe:	d501      	bpl.n	8004fc4 <_vfiprintf_r+0x34>
 8004fc0:	692b      	ldr	r3, [r5, #16]
 8004fc2:	b99b      	cbnz	r3, 8004fec <_vfiprintf_r+0x5c>
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f000 f938 	bl	800523c <__swsetup_r>
 8004fcc:	b170      	cbz	r0, 8004fec <_vfiprintf_r+0x5c>
 8004fce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fd0:	07dc      	lsls	r4, r3, #31
 8004fd2:	d504      	bpl.n	8004fde <_vfiprintf_r+0x4e>
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd8:	b01d      	add	sp, #116	@ 0x74
 8004fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fde:	89ab      	ldrh	r3, [r5, #12]
 8004fe0:	0598      	lsls	r0, r3, #22
 8004fe2:	d4f7      	bmi.n	8004fd4 <_vfiprintf_r+0x44>
 8004fe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fe6:	f7ff fa7b 	bl	80044e0 <__retarget_lock_release_recursive>
 8004fea:	e7f3      	b.n	8004fd4 <_vfiprintf_r+0x44>
 8004fec:	2300      	movs	r3, #0
 8004fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ff0:	2320      	movs	r3, #32
 8004ff2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ff6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ffa:	2330      	movs	r3, #48	@ 0x30
 8004ffc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051ac <_vfiprintf_r+0x21c>
 8005000:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005004:	f04f 0901 	mov.w	r9, #1
 8005008:	4623      	mov	r3, r4
 800500a:	469a      	mov	sl, r3
 800500c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005010:	b10a      	cbz	r2, 8005016 <_vfiprintf_r+0x86>
 8005012:	2a25      	cmp	r2, #37	@ 0x25
 8005014:	d1f9      	bne.n	800500a <_vfiprintf_r+0x7a>
 8005016:	ebba 0b04 	subs.w	fp, sl, r4
 800501a:	d00b      	beq.n	8005034 <_vfiprintf_r+0xa4>
 800501c:	465b      	mov	r3, fp
 800501e:	4622      	mov	r2, r4
 8005020:	4629      	mov	r1, r5
 8005022:	4630      	mov	r0, r6
 8005024:	f7ff ffa2 	bl	8004f6c <__sfputs_r>
 8005028:	3001      	adds	r0, #1
 800502a:	f000 80a7 	beq.w	800517c <_vfiprintf_r+0x1ec>
 800502e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005030:	445a      	add	r2, fp
 8005032:	9209      	str	r2, [sp, #36]	@ 0x24
 8005034:	f89a 3000 	ldrb.w	r3, [sl]
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 809f 	beq.w	800517c <_vfiprintf_r+0x1ec>
 800503e:	2300      	movs	r3, #0
 8005040:	f04f 32ff 	mov.w	r2, #4294967295
 8005044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005048:	f10a 0a01 	add.w	sl, sl, #1
 800504c:	9304      	str	r3, [sp, #16]
 800504e:	9307      	str	r3, [sp, #28]
 8005050:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005054:	931a      	str	r3, [sp, #104]	@ 0x68
 8005056:	4654      	mov	r4, sl
 8005058:	2205      	movs	r2, #5
 800505a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505e:	4853      	ldr	r0, [pc, #332]	@ (80051ac <_vfiprintf_r+0x21c>)
 8005060:	f7fb f8be 	bl	80001e0 <memchr>
 8005064:	9a04      	ldr	r2, [sp, #16]
 8005066:	b9d8      	cbnz	r0, 80050a0 <_vfiprintf_r+0x110>
 8005068:	06d1      	lsls	r1, r2, #27
 800506a:	bf44      	itt	mi
 800506c:	2320      	movmi	r3, #32
 800506e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005072:	0713      	lsls	r3, r2, #28
 8005074:	bf44      	itt	mi
 8005076:	232b      	movmi	r3, #43	@ 0x2b
 8005078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800507c:	f89a 3000 	ldrb.w	r3, [sl]
 8005080:	2b2a      	cmp	r3, #42	@ 0x2a
 8005082:	d015      	beq.n	80050b0 <_vfiprintf_r+0x120>
 8005084:	9a07      	ldr	r2, [sp, #28]
 8005086:	4654      	mov	r4, sl
 8005088:	2000      	movs	r0, #0
 800508a:	f04f 0c0a 	mov.w	ip, #10
 800508e:	4621      	mov	r1, r4
 8005090:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005094:	3b30      	subs	r3, #48	@ 0x30
 8005096:	2b09      	cmp	r3, #9
 8005098:	d94b      	bls.n	8005132 <_vfiprintf_r+0x1a2>
 800509a:	b1b0      	cbz	r0, 80050ca <_vfiprintf_r+0x13a>
 800509c:	9207      	str	r2, [sp, #28]
 800509e:	e014      	b.n	80050ca <_vfiprintf_r+0x13a>
 80050a0:	eba0 0308 	sub.w	r3, r0, r8
 80050a4:	fa09 f303 	lsl.w	r3, r9, r3
 80050a8:	4313      	orrs	r3, r2
 80050aa:	9304      	str	r3, [sp, #16]
 80050ac:	46a2      	mov	sl, r4
 80050ae:	e7d2      	b.n	8005056 <_vfiprintf_r+0xc6>
 80050b0:	9b03      	ldr	r3, [sp, #12]
 80050b2:	1d19      	adds	r1, r3, #4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	9103      	str	r1, [sp, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bfbb      	ittet	lt
 80050bc:	425b      	neglt	r3, r3
 80050be:	f042 0202 	orrlt.w	r2, r2, #2
 80050c2:	9307      	strge	r3, [sp, #28]
 80050c4:	9307      	strlt	r3, [sp, #28]
 80050c6:	bfb8      	it	lt
 80050c8:	9204      	strlt	r2, [sp, #16]
 80050ca:	7823      	ldrb	r3, [r4, #0]
 80050cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80050ce:	d10a      	bne.n	80050e6 <_vfiprintf_r+0x156>
 80050d0:	7863      	ldrb	r3, [r4, #1]
 80050d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80050d4:	d132      	bne.n	800513c <_vfiprintf_r+0x1ac>
 80050d6:	9b03      	ldr	r3, [sp, #12]
 80050d8:	1d1a      	adds	r2, r3, #4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	9203      	str	r2, [sp, #12]
 80050de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050e2:	3402      	adds	r4, #2
 80050e4:	9305      	str	r3, [sp, #20]
 80050e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80051bc <_vfiprintf_r+0x22c>
 80050ea:	7821      	ldrb	r1, [r4, #0]
 80050ec:	2203      	movs	r2, #3
 80050ee:	4650      	mov	r0, sl
 80050f0:	f7fb f876 	bl	80001e0 <memchr>
 80050f4:	b138      	cbz	r0, 8005106 <_vfiprintf_r+0x176>
 80050f6:	9b04      	ldr	r3, [sp, #16]
 80050f8:	eba0 000a 	sub.w	r0, r0, sl
 80050fc:	2240      	movs	r2, #64	@ 0x40
 80050fe:	4082      	lsls	r2, r0
 8005100:	4313      	orrs	r3, r2
 8005102:	3401      	adds	r4, #1
 8005104:	9304      	str	r3, [sp, #16]
 8005106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800510a:	4829      	ldr	r0, [pc, #164]	@ (80051b0 <_vfiprintf_r+0x220>)
 800510c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005110:	2206      	movs	r2, #6
 8005112:	f7fb f865 	bl	80001e0 <memchr>
 8005116:	2800      	cmp	r0, #0
 8005118:	d03f      	beq.n	800519a <_vfiprintf_r+0x20a>
 800511a:	4b26      	ldr	r3, [pc, #152]	@ (80051b4 <_vfiprintf_r+0x224>)
 800511c:	bb1b      	cbnz	r3, 8005166 <_vfiprintf_r+0x1d6>
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	3307      	adds	r3, #7
 8005122:	f023 0307 	bic.w	r3, r3, #7
 8005126:	3308      	adds	r3, #8
 8005128:	9303      	str	r3, [sp, #12]
 800512a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800512c:	443b      	add	r3, r7
 800512e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005130:	e76a      	b.n	8005008 <_vfiprintf_r+0x78>
 8005132:	fb0c 3202 	mla	r2, ip, r2, r3
 8005136:	460c      	mov	r4, r1
 8005138:	2001      	movs	r0, #1
 800513a:	e7a8      	b.n	800508e <_vfiprintf_r+0xfe>
 800513c:	2300      	movs	r3, #0
 800513e:	3401      	adds	r4, #1
 8005140:	9305      	str	r3, [sp, #20]
 8005142:	4619      	mov	r1, r3
 8005144:	f04f 0c0a 	mov.w	ip, #10
 8005148:	4620      	mov	r0, r4
 800514a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800514e:	3a30      	subs	r2, #48	@ 0x30
 8005150:	2a09      	cmp	r2, #9
 8005152:	d903      	bls.n	800515c <_vfiprintf_r+0x1cc>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0c6      	beq.n	80050e6 <_vfiprintf_r+0x156>
 8005158:	9105      	str	r1, [sp, #20]
 800515a:	e7c4      	b.n	80050e6 <_vfiprintf_r+0x156>
 800515c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005160:	4604      	mov	r4, r0
 8005162:	2301      	movs	r3, #1
 8005164:	e7f0      	b.n	8005148 <_vfiprintf_r+0x1b8>
 8005166:	ab03      	add	r3, sp, #12
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	462a      	mov	r2, r5
 800516c:	4b12      	ldr	r3, [pc, #72]	@ (80051b8 <_vfiprintf_r+0x228>)
 800516e:	a904      	add	r1, sp, #16
 8005170:	4630      	mov	r0, r6
 8005172:	f3af 8000 	nop.w
 8005176:	4607      	mov	r7, r0
 8005178:	1c78      	adds	r0, r7, #1
 800517a:	d1d6      	bne.n	800512a <_vfiprintf_r+0x19a>
 800517c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800517e:	07d9      	lsls	r1, r3, #31
 8005180:	d405      	bmi.n	800518e <_vfiprintf_r+0x1fe>
 8005182:	89ab      	ldrh	r3, [r5, #12]
 8005184:	059a      	lsls	r2, r3, #22
 8005186:	d402      	bmi.n	800518e <_vfiprintf_r+0x1fe>
 8005188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800518a:	f7ff f9a9 	bl	80044e0 <__retarget_lock_release_recursive>
 800518e:	89ab      	ldrh	r3, [r5, #12]
 8005190:	065b      	lsls	r3, r3, #25
 8005192:	f53f af1f 	bmi.w	8004fd4 <_vfiprintf_r+0x44>
 8005196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005198:	e71e      	b.n	8004fd8 <_vfiprintf_r+0x48>
 800519a:	ab03      	add	r3, sp, #12
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	462a      	mov	r2, r5
 80051a0:	4b05      	ldr	r3, [pc, #20]	@ (80051b8 <_vfiprintf_r+0x228>)
 80051a2:	a904      	add	r1, sp, #16
 80051a4:	4630      	mov	r0, r6
 80051a6:	f7ff fc81 	bl	8004aac <_printf_i>
 80051aa:	e7e4      	b.n	8005176 <_vfiprintf_r+0x1e6>
 80051ac:	0800775b 	.word	0x0800775b
 80051b0:	08007765 	.word	0x08007765
 80051b4:	00000000 	.word	0x00000000
 80051b8:	08004f6d 	.word	0x08004f6d
 80051bc:	08007761 	.word	0x08007761

080051c0 <__swbuf_r>:
 80051c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c2:	460e      	mov	r6, r1
 80051c4:	4614      	mov	r4, r2
 80051c6:	4605      	mov	r5, r0
 80051c8:	b118      	cbz	r0, 80051d2 <__swbuf_r+0x12>
 80051ca:	6a03      	ldr	r3, [r0, #32]
 80051cc:	b90b      	cbnz	r3, 80051d2 <__swbuf_r+0x12>
 80051ce:	f7ff f85d 	bl	800428c <__sinit>
 80051d2:	69a3      	ldr	r3, [r4, #24]
 80051d4:	60a3      	str	r3, [r4, #8]
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	071a      	lsls	r2, r3, #28
 80051da:	d501      	bpl.n	80051e0 <__swbuf_r+0x20>
 80051dc:	6923      	ldr	r3, [r4, #16]
 80051de:	b943      	cbnz	r3, 80051f2 <__swbuf_r+0x32>
 80051e0:	4621      	mov	r1, r4
 80051e2:	4628      	mov	r0, r5
 80051e4:	f000 f82a 	bl	800523c <__swsetup_r>
 80051e8:	b118      	cbz	r0, 80051f2 <__swbuf_r+0x32>
 80051ea:	f04f 37ff 	mov.w	r7, #4294967295
 80051ee:	4638      	mov	r0, r7
 80051f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	6922      	ldr	r2, [r4, #16]
 80051f6:	1a98      	subs	r0, r3, r2
 80051f8:	6963      	ldr	r3, [r4, #20]
 80051fa:	b2f6      	uxtb	r6, r6
 80051fc:	4283      	cmp	r3, r0
 80051fe:	4637      	mov	r7, r6
 8005200:	dc05      	bgt.n	800520e <__swbuf_r+0x4e>
 8005202:	4621      	mov	r1, r4
 8005204:	4628      	mov	r0, r5
 8005206:	f7ff fdf3 	bl	8004df0 <_fflush_r>
 800520a:	2800      	cmp	r0, #0
 800520c:	d1ed      	bne.n	80051ea <__swbuf_r+0x2a>
 800520e:	68a3      	ldr	r3, [r4, #8]
 8005210:	3b01      	subs	r3, #1
 8005212:	60a3      	str	r3, [r4, #8]
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	6022      	str	r2, [r4, #0]
 800521a:	701e      	strb	r6, [r3, #0]
 800521c:	6962      	ldr	r2, [r4, #20]
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	429a      	cmp	r2, r3
 8005222:	d004      	beq.n	800522e <__swbuf_r+0x6e>
 8005224:	89a3      	ldrh	r3, [r4, #12]
 8005226:	07db      	lsls	r3, r3, #31
 8005228:	d5e1      	bpl.n	80051ee <__swbuf_r+0x2e>
 800522a:	2e0a      	cmp	r6, #10
 800522c:	d1df      	bne.n	80051ee <__swbuf_r+0x2e>
 800522e:	4621      	mov	r1, r4
 8005230:	4628      	mov	r0, r5
 8005232:	f7ff fddd 	bl	8004df0 <_fflush_r>
 8005236:	2800      	cmp	r0, #0
 8005238:	d0d9      	beq.n	80051ee <__swbuf_r+0x2e>
 800523a:	e7d6      	b.n	80051ea <__swbuf_r+0x2a>

0800523c <__swsetup_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4b29      	ldr	r3, [pc, #164]	@ (80052e4 <__swsetup_r+0xa8>)
 8005240:	4605      	mov	r5, r0
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	460c      	mov	r4, r1
 8005246:	b118      	cbz	r0, 8005250 <__swsetup_r+0x14>
 8005248:	6a03      	ldr	r3, [r0, #32]
 800524a:	b90b      	cbnz	r3, 8005250 <__swsetup_r+0x14>
 800524c:	f7ff f81e 	bl	800428c <__sinit>
 8005250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005254:	0719      	lsls	r1, r3, #28
 8005256:	d422      	bmi.n	800529e <__swsetup_r+0x62>
 8005258:	06da      	lsls	r2, r3, #27
 800525a:	d407      	bmi.n	800526c <__swsetup_r+0x30>
 800525c:	2209      	movs	r2, #9
 800525e:	602a      	str	r2, [r5, #0]
 8005260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005264:	81a3      	strh	r3, [r4, #12]
 8005266:	f04f 30ff 	mov.w	r0, #4294967295
 800526a:	e033      	b.n	80052d4 <__swsetup_r+0x98>
 800526c:	0758      	lsls	r0, r3, #29
 800526e:	d512      	bpl.n	8005296 <__swsetup_r+0x5a>
 8005270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005272:	b141      	cbz	r1, 8005286 <__swsetup_r+0x4a>
 8005274:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005278:	4299      	cmp	r1, r3
 800527a:	d002      	beq.n	8005282 <__swsetup_r+0x46>
 800527c:	4628      	mov	r0, r5
 800527e:	f7ff f94f 	bl	8004520 <_free_r>
 8005282:	2300      	movs	r3, #0
 8005284:	6363      	str	r3, [r4, #52]	@ 0x34
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800528c:	81a3      	strh	r3, [r4, #12]
 800528e:	2300      	movs	r3, #0
 8005290:	6063      	str	r3, [r4, #4]
 8005292:	6923      	ldr	r3, [r4, #16]
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	f043 0308 	orr.w	r3, r3, #8
 800529c:	81a3      	strh	r3, [r4, #12]
 800529e:	6923      	ldr	r3, [r4, #16]
 80052a0:	b94b      	cbnz	r3, 80052b6 <__swsetup_r+0x7a>
 80052a2:	89a3      	ldrh	r3, [r4, #12]
 80052a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80052a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052ac:	d003      	beq.n	80052b6 <__swsetup_r+0x7a>
 80052ae:	4621      	mov	r1, r4
 80052b0:	4628      	mov	r0, r5
 80052b2:	f000 f88b 	bl	80053cc <__smakebuf_r>
 80052b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ba:	f013 0201 	ands.w	r2, r3, #1
 80052be:	d00a      	beq.n	80052d6 <__swsetup_r+0x9a>
 80052c0:	2200      	movs	r2, #0
 80052c2:	60a2      	str	r2, [r4, #8]
 80052c4:	6962      	ldr	r2, [r4, #20]
 80052c6:	4252      	negs	r2, r2
 80052c8:	61a2      	str	r2, [r4, #24]
 80052ca:	6922      	ldr	r2, [r4, #16]
 80052cc:	b942      	cbnz	r2, 80052e0 <__swsetup_r+0xa4>
 80052ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80052d2:	d1c5      	bne.n	8005260 <__swsetup_r+0x24>
 80052d4:	bd38      	pop	{r3, r4, r5, pc}
 80052d6:	0799      	lsls	r1, r3, #30
 80052d8:	bf58      	it	pl
 80052da:	6962      	ldrpl	r2, [r4, #20]
 80052dc:	60a2      	str	r2, [r4, #8]
 80052de:	e7f4      	b.n	80052ca <__swsetup_r+0x8e>
 80052e0:	2000      	movs	r0, #0
 80052e2:	e7f7      	b.n	80052d4 <__swsetup_r+0x98>
 80052e4:	20000020 	.word	0x20000020

080052e8 <_raise_r>:
 80052e8:	291f      	cmp	r1, #31
 80052ea:	b538      	push	{r3, r4, r5, lr}
 80052ec:	4605      	mov	r5, r0
 80052ee:	460c      	mov	r4, r1
 80052f0:	d904      	bls.n	80052fc <_raise_r+0x14>
 80052f2:	2316      	movs	r3, #22
 80052f4:	6003      	str	r3, [r0, #0]
 80052f6:	f04f 30ff 	mov.w	r0, #4294967295
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80052fe:	b112      	cbz	r2, 8005306 <_raise_r+0x1e>
 8005300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005304:	b94b      	cbnz	r3, 800531a <_raise_r+0x32>
 8005306:	4628      	mov	r0, r5
 8005308:	f000 f830 	bl	800536c <_getpid_r>
 800530c:	4622      	mov	r2, r4
 800530e:	4601      	mov	r1, r0
 8005310:	4628      	mov	r0, r5
 8005312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005316:	f000 b817 	b.w	8005348 <_kill_r>
 800531a:	2b01      	cmp	r3, #1
 800531c:	d00a      	beq.n	8005334 <_raise_r+0x4c>
 800531e:	1c59      	adds	r1, r3, #1
 8005320:	d103      	bne.n	800532a <_raise_r+0x42>
 8005322:	2316      	movs	r3, #22
 8005324:	6003      	str	r3, [r0, #0]
 8005326:	2001      	movs	r0, #1
 8005328:	e7e7      	b.n	80052fa <_raise_r+0x12>
 800532a:	2100      	movs	r1, #0
 800532c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005330:	4620      	mov	r0, r4
 8005332:	4798      	blx	r3
 8005334:	2000      	movs	r0, #0
 8005336:	e7e0      	b.n	80052fa <_raise_r+0x12>

08005338 <raise>:
 8005338:	4b02      	ldr	r3, [pc, #8]	@ (8005344 <raise+0xc>)
 800533a:	4601      	mov	r1, r0
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	f7ff bfd3 	b.w	80052e8 <_raise_r>
 8005342:	bf00      	nop
 8005344:	20000020 	.word	0x20000020

08005348 <_kill_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4d07      	ldr	r5, [pc, #28]	@ (8005368 <_kill_r+0x20>)
 800534c:	2300      	movs	r3, #0
 800534e:	4604      	mov	r4, r0
 8005350:	4608      	mov	r0, r1
 8005352:	4611      	mov	r1, r2
 8005354:	602b      	str	r3, [r5, #0]
 8005356:	f7fb fb99 	bl	8000a8c <_kill>
 800535a:	1c43      	adds	r3, r0, #1
 800535c:	d102      	bne.n	8005364 <_kill_r+0x1c>
 800535e:	682b      	ldr	r3, [r5, #0]
 8005360:	b103      	cbz	r3, 8005364 <_kill_r+0x1c>
 8005362:	6023      	str	r3, [r4, #0]
 8005364:	bd38      	pop	{r3, r4, r5, pc}
 8005366:	bf00      	nop
 8005368:	20001430 	.word	0x20001430

0800536c <_getpid_r>:
 800536c:	f7fb bb86 	b.w	8000a7c <_getpid>

08005370 <_malloc_usable_size_r>:
 8005370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005374:	1f18      	subs	r0, r3, #4
 8005376:	2b00      	cmp	r3, #0
 8005378:	bfbc      	itt	lt
 800537a:	580b      	ldrlt	r3, [r1, r0]
 800537c:	18c0      	addlt	r0, r0, r3
 800537e:	4770      	bx	lr

08005380 <__swhatbuf_r>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	460c      	mov	r4, r1
 8005384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005388:	2900      	cmp	r1, #0
 800538a:	b096      	sub	sp, #88	@ 0x58
 800538c:	4615      	mov	r5, r2
 800538e:	461e      	mov	r6, r3
 8005390:	da0d      	bge.n	80053ae <__swhatbuf_r+0x2e>
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005398:	f04f 0100 	mov.w	r1, #0
 800539c:	bf14      	ite	ne
 800539e:	2340      	movne	r3, #64	@ 0x40
 80053a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053a4:	2000      	movs	r0, #0
 80053a6:	6031      	str	r1, [r6, #0]
 80053a8:	602b      	str	r3, [r5, #0]
 80053aa:	b016      	add	sp, #88	@ 0x58
 80053ac:	bd70      	pop	{r4, r5, r6, pc}
 80053ae:	466a      	mov	r2, sp
 80053b0:	f000 f848 	bl	8005444 <_fstat_r>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	dbec      	blt.n	8005392 <__swhatbuf_r+0x12>
 80053b8:	9901      	ldr	r1, [sp, #4]
 80053ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80053be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80053c2:	4259      	negs	r1, r3
 80053c4:	4159      	adcs	r1, r3
 80053c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053ca:	e7eb      	b.n	80053a4 <__swhatbuf_r+0x24>

080053cc <__smakebuf_r>:
 80053cc:	898b      	ldrh	r3, [r1, #12]
 80053ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053d0:	079d      	lsls	r5, r3, #30
 80053d2:	4606      	mov	r6, r0
 80053d4:	460c      	mov	r4, r1
 80053d6:	d507      	bpl.n	80053e8 <__smakebuf_r+0x1c>
 80053d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	6123      	str	r3, [r4, #16]
 80053e0:	2301      	movs	r3, #1
 80053e2:	6163      	str	r3, [r4, #20]
 80053e4:	b003      	add	sp, #12
 80053e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053e8:	ab01      	add	r3, sp, #4
 80053ea:	466a      	mov	r2, sp
 80053ec:	f7ff ffc8 	bl	8005380 <__swhatbuf_r>
 80053f0:	9f00      	ldr	r7, [sp, #0]
 80053f2:	4605      	mov	r5, r0
 80053f4:	4639      	mov	r1, r7
 80053f6:	4630      	mov	r0, r6
 80053f8:	f7ff f906 	bl	8004608 <_malloc_r>
 80053fc:	b948      	cbnz	r0, 8005412 <__smakebuf_r+0x46>
 80053fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005402:	059a      	lsls	r2, r3, #22
 8005404:	d4ee      	bmi.n	80053e4 <__smakebuf_r+0x18>
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	f043 0302 	orr.w	r3, r3, #2
 800540e:	81a3      	strh	r3, [r4, #12]
 8005410:	e7e2      	b.n	80053d8 <__smakebuf_r+0xc>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	6020      	str	r0, [r4, #0]
 8005416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800541a:	81a3      	strh	r3, [r4, #12]
 800541c:	9b01      	ldr	r3, [sp, #4]
 800541e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005422:	b15b      	cbz	r3, 800543c <__smakebuf_r+0x70>
 8005424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005428:	4630      	mov	r0, r6
 800542a:	f000 f81d 	bl	8005468 <_isatty_r>
 800542e:	b128      	cbz	r0, 800543c <__smakebuf_r+0x70>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	81a3      	strh	r3, [r4, #12]
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	431d      	orrs	r5, r3
 8005440:	81a5      	strh	r5, [r4, #12]
 8005442:	e7cf      	b.n	80053e4 <__smakebuf_r+0x18>

08005444 <_fstat_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4d07      	ldr	r5, [pc, #28]	@ (8005464 <_fstat_r+0x20>)
 8005448:	2300      	movs	r3, #0
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	4611      	mov	r1, r2
 8005450:	602b      	str	r3, [r5, #0]
 8005452:	f7fb fb7b 	bl	8000b4c <_fstat>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	d102      	bne.n	8005460 <_fstat_r+0x1c>
 800545a:	682b      	ldr	r3, [r5, #0]
 800545c:	b103      	cbz	r3, 8005460 <_fstat_r+0x1c>
 800545e:	6023      	str	r3, [r4, #0]
 8005460:	bd38      	pop	{r3, r4, r5, pc}
 8005462:	bf00      	nop
 8005464:	20001430 	.word	0x20001430

08005468 <_isatty_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4d06      	ldr	r5, [pc, #24]	@ (8005484 <_isatty_r+0x1c>)
 800546c:	2300      	movs	r3, #0
 800546e:	4604      	mov	r4, r0
 8005470:	4608      	mov	r0, r1
 8005472:	602b      	str	r3, [r5, #0]
 8005474:	f7fb fb7a 	bl	8000b6c <_isatty>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d102      	bne.n	8005482 <_isatty_r+0x1a>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	b103      	cbz	r3, 8005482 <_isatty_r+0x1a>
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	20001430 	.word	0x20001430

08005488 <_init>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	bf00      	nop
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr

08005494 <_fini>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	bf00      	nop
 8005498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549a:	bc08      	pop	{r3}
 800549c:	469e      	mov	lr, r3
 800549e:	4770      	bx	lr
